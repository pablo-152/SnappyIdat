<?php
defined('BASEPATH') or exit('No direct script access allowed');

use CodeIgniter\HTTP\IncomingRequest;
use CodeIgniter\Database\Query;

use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

use PhpOffice\PhpSpreadsheet\Helper\Sample;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\RichText\RichText;
use PhpOffice\PhpSpreadsheet\Shared\Date;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Color;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\Font;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;
use PhpOffice\PhpSpreadsheet\Style\Protection;
use PhpOffice\PhpSpreadsheet\Worksheet\Drawing;
use PhpOffice\PhpSpreadsheet\Worksheet\PageSetup;
use PhpOffice\PhpSpreadsheet\Worksheet\ColumnDimension;
use PhpOffice\PhpSpreadsheet\Worksheet;

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
use SebastianBergmann\Environment\Console;

require 'PHPMailer/Exception.php';
require 'PHPMailer/PHPMailer.php';
require 'PHPMailer/SMTP.php';

class AppIFV extends CI_Controller
{
    public function __construct()
    {
        parent::__construct();

        $this->load->model('Model_IFV');
        $this->load->model('Model_IFVS');
        $this->load->model('Model_snappy');
        $this->load->model('Admin_model');
        $this->load->model('Model_General');
        $this->load->model('Model_Ceba');
        $this->load->helper('download');
        $this->load->helper(array('text'));
        $this->load->library("parser");
        $this->load->library(array('session'));
        //$this->load->library('excel');
        $this->load->helper(array('url'));
        //$this->load->helper("url");
        $this->load->helper('form');
        //  $this->load->helper(array('form', 'url'));
    }

    protected function jsonResponse($respuesta = array())
    {
        $status = 200; // SUCCESS
        if (empty($respuesta)) {
            //$status = 400; // FAILURE
            $respuesta = array(
                'success' => false,
                'mensaje' => 'No hay nada'
            );
        }
        return $this->output
            ->set_content_type('application/json;charset=utf-8')
            ->set_status_header($status)
            ->set_output(json_encode($respuesta, JSON_UNESCAPED_UNICODE));
    }

    public function index()
    {
        if ($this->session->userdata('usuario')) {
            $data['fondo_ifv'] = $this->Model_IFV->Model_IFV();
            $this->Model_IFVS->actu_estado_examen_ifv();
            //NO BORRAR AVISO
            $data['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $data['list_aviso'] = $this->Model_General->get_list_aviso();

            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $data['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $data['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $data['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $data['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $data['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$data['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $data['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $data['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);
            $data['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $data['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $data['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());

            $this->load->view('view_IFV/administrador/index', $data);
        } else {
            //$this->load->view('view_IFV/asistencia/login');
            redirect('/login');
        }
    }

    public function Detalle_Aviso()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/aviso/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Postulantes()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/postulantes/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Muestra_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $parametro = $this->input->post("parametro");
            $dato['parametro'] = $this->input->post("parametro");
            $dato['list_resultados'] = $this->Model_IFV->list_resultado_examen_postulantes_activos();
            if ($parametro == 1) {
                $dato['list_postulantes'] = $this->Model_IFV->list_postulantes_activos();
                $this->load->view('view_IFV/postulantes/lista_activo', $dato);
            } elseif ($parametro == 2) {
                $dato['list_postulantes'] = $this->Model_IFV->list_postulantes_terminado();
                $this->load->view('view_IFV/postulantes/lista_terminados', $dato);
            } elseif ($parametro == 3) {
                $dato['list_postulantes'] = $this->Model_IFV->list_postulantes_todos();
                $this->load->view('view_IFV/postulantes/lista_todo', $dato);
            }
        } else {
            redirect('');
        }
    }

    public function Delete_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_postulante'] = $this->input->post("id_postulante");

            $this->Model_IFV->delete_postulante($dato);
        } else {
            redirect('/login');
        }
    }

    public function Valida_RLista()
    {
        if ($this->session->userdata('usuario')) {
            // $dato['id_ot']= $this->input->post("ot");
            //$dato['id_lista']= $this->input->post("id_lista");
            //$dato['id_sector']= $this->input->post("sector");
            $dato['archivo_excel'] = $this->input->post("archivo_excel");
            $dato['v_lista'] = $this->Model_IFV->verificar_lista($dato);
            $total_lista = count($dato['v_lista']);
            if ($total_lista < 1) {
            } else {
                echo "error";
            }
        } else {
            redirect('/login');
        }
    }

    public function Insert_Listas()
    {
        if ($this->session->userdata('usuario')) {

            $dato['archivo_excel'] = $this->input->post("archivo_excel");
            $path = $_FILES["archivo_excel"]["tmp_name"];
            $documento = IOFactory::load($path);
            $hojaDeProductos = $documento->getSheet(0);

            $numeroMayorDeFila = $hojaDeProductos->getHighestRow();
            $letraMayorDeColumna = $hojaDeProductos->getHighestColumn();
            $numeroMayorDeColumna = \PhpOffice\PhpSpreadsheet\Cell\Coordinate::columnIndexFromString($letraMayorDeColumna);


            for ($indiceFila = 2; $indiceFila <= $numeroMayorDeFila; $indiceFila++) {

                $dato['codigo'] = $hojaDeProductos->getCellByColumnAndRow(1, $indiceFila);
                $dato['interese'] = $hojaDeProductos->getCellByColumnAndRow(2, $indiceFila);
                $dato['nr_documento'] = $hojaDeProductos->getCellByColumnAndRow(3, $indiceFila);
                $dato['apellido_pat'] = $hojaDeProductos->getCellByColumnAndRow(4, $indiceFila);
                $dato['apellido_mat'] = $hojaDeProductos->getCellByColumnAndRow(5, $indiceFila);
                $dato['nombres'] = $hojaDeProductos->getCellByColumnAndRow(6, $indiceFila);
                //$excelDate = $hojaDeProductos->getCellByColumnAndRow(7, $indiceFila);
                //$fec_inscripcion = \PhpOffice\PhpSpreadsheet\Cell\Coordinate::toFormattedString($excelDate, 'YYYY-MM-DD');
                //$dato['fec_inscripcion']=$excelDate;
                $dato['email'] = $hojaDeProductos->getCellByColumnAndRow(8, $indiceFila);
                $dato['grupo'] = $hojaDeProductos->getCellByColumnAndRow(9, $indiceFila);
                $dato['celular'] = $hojaDeProductos->getCellByColumnAndRow(10, $indiceFila);

                $excelDate = $hojaDeProductos->getCellByColumnAndRow(7, $indiceFila)->getValue(); // gives you a number like 44444, which is days since 1900
                $dato['fec_inscripcion'] = NumberFormat::toFormattedString($excelDate, 'YYYY-MM-DD');

                strlen($dato['codigo']);


                $dato['contador_codigo'] = $this->Model_IFV->valida_reg_codpostulante($dato);
                $dato['contador_codigo_pre'] = $this->Model_IFV->valida_reg_codpostulante_preguardar($dato);
                if (count($dato['contador_codigo']) > 0 || count($dato['contador_codigo_pre']) > 0) {
                    $dato['tipo_error'] = "1";
                    $this->Model_IFV->insert_lista_postulantes_temporal($dato);
                } else {
                    if ($dato["email"] == "") {
                        $dato['tipo_error'] = "2";
                        $this->Model_IFV->insert_lista_postulantes_temporal($dato);
                    } elseif (strlen($dato['codigo']) != "4") {
                        $dato['tipo_error'] = "3";
                        $this->Model_IFV->insert_lista_postulantes_temporal($dato);
                    } else {
                        $dato['carrera'] = $this->Model_IFV->valida_id_carrera($dato);
                        if (count($dato['carrera']) > 0) {
                            $dato['id_carrera'] = $dato['carrera'][0]['id_carrera'];
                            $this->Model_IFV->insert_lista_postulantes_preguardar($dato);
                        } else {
                            $dato['tipo_error'] = "4";
                            $this->Model_IFV->insert_lista_postulantes_temporal($dato);
                        }
                    }
                }
            }

            $dato['contador_general'] = $this->Model_IFV->valida_lista_postulante_temporal_general();
            $dato['contador_tmp'] = $this->Model_IFV->valida_lista_postulante_temporal();
            $dato['contador_email_tmp'] = $this->Model_IFV->valida_postulante_email_temporal();
            $dato['contador_num_cod_tmp'] = $this->Model_IFV->valida_postulante_num_cod_temporal();
            $dato['contador_sin_carrera'] = $this->Model_IFV->valida_postulante_nom_carrera();

            if (count($dato['contador_general']) > 15) {
                echo "15";
                $this->Model_IFV->limpiar_postulante_temporal();
            } else {

                if (count($dato['contador_tmp']) > 0) {
                    foreach ($dato['contador_tmp'] as $list) {
                        echo "<p style='text-align: justify; font-size:95%; color:black' >Código " . $list['codigo'] . ", no ha sido creado por duplicidad!</p>";
                    }
                }
                if (count($dato['contador_email_tmp']) > 0) {
                    foreach ($dato['contador_email_tmp'] as $list) {
                        echo "<p style='text-align: justify; font-size:95%; color:black' >Código " . $list['codigo'] . ", no ha sido creado por falta de Correo!</p>";
                    }
                }
                if (count($dato['contador_num_cod_tmp']) > 0) {
                    foreach ($dato['contador_num_cod_tmp'] as $list) {
                        echo "<p style='text-align: justify; font-size:95%; color:black' >Código " . $list['codigo'] . " es inválido por cantidad de dígitos!</p>";
                    }
                }
                if (count($dato['contador_sin_carrera']) > 0) {
                    foreach ($dato['contador_sin_carrera'] as $list) {
                        echo "<p style='text-align: justify; font-size:95%; color:black' >Código " . $list['codigo'] . " no ha sido creado por nombre de carrera erronea!</p>";
                    }
                }
                $this->Model_IFV->insert_select_postulantes_preguardar();
            }
            $this->Model_IFV->limpiar_postulante_temporal();
        } else {
            redirect('/login');
        }

        //
    }


    public function Insert_Listas_Siosi()
    {
        if ($this->session->userdata('usuario')) {

            $dato['archivo_excel'] = $this->input->post("archivo_excel");
            $path = $_FILES["archivo_excel"]["tmp_name"];
            $documento = IOFactory::load($path);
            $hojaDeProductos = $documento->getSheet(0);

            $numeroMayorDeFila = $hojaDeProductos->getHighestRow();
            $letraMayorDeColumna = $hojaDeProductos->getHighestColumn();
            $numeroMayorDeColumna = \PhpOffice\PhpSpreadsheet\Cell\Coordinate::columnIndexFromString($letraMayorDeColumna);

            for ($indiceFila = 2; $indiceFila <= $numeroMayorDeFila; $indiceFila++) {

                $dato['codigo'] = $hojaDeProductos->getCellByColumnAndRow(1, $indiceFila);
                $dato['interese'] = $hojaDeProductos->getCellByColumnAndRow(2, $indiceFila);
                $dato['nr_documento'] = $hojaDeProductos->getCellByColumnAndRow(3, $indiceFila);
                $dato['apellido_pat'] = $hojaDeProductos->getCellByColumnAndRow(4, $indiceFila);
                $dato['apellido_mat'] = $hojaDeProductos->getCellByColumnAndRow(5, $indiceFila);
                $dato['nombres'] = $hojaDeProductos->getCellByColumnAndRow(6, $indiceFila);
                //$dato['fec_inscripcion'] = $hojaDeProductos->getCellByColumnAndRow(7, $indiceFila);
                $excelDate = $hojaDeProductos->getCellByColumnAndRow(7, $indiceFila)->getValue(); // gives you a number like 44444, which is days since 1900
                $dato['fec_inscripcion'] = NumberFormat::toFormattedString($excelDate, 'YYYY-MM-DD');
                $dato['email'] = $hojaDeProductos->getCellByColumnAndRow(8, $indiceFila);
                $dato['grupo'] = $hojaDeProductos->getCellByColumnAndRow(9, $indiceFila);
                $dato['celular'] = $hojaDeProductos->getCellByColumnAndRow(10, $indiceFila);


                strlen($dato['codigo']);


                $dato['contador_codigo'] = $this->Model_IFV->valida_reg_codpostulante($dato);
                if (count($dato['contador_codigo']) > 0) {
                    $dato['tipo_error'] = "1";
                    $this->Model_IFV->insert_lista_postulantes_temporal($dato);
                } else {
                    if ($dato["email"] == "") {
                        $dato['tipo_error'] = "2";
                        $this->Model_IFV->insert_lista_postulantes_temporal($dato);
                    } elseif (strlen($dato['codigo']) != "4") {
                        $dato['tipo_error'] = "3";
                        $this->Model_IFV->insert_lista_postulantes_temporal($dato);
                    } else {
                        $dato['carrera'] = $this->Model_IFV->valida_id_carrera($dato);
                        if (count($dato['carrera']) > 0) {
                            $dato['id_carrera'] = $dato['carrera'][0]['id_carrera'];
                            $this->Model_IFV->insert_lista_postulantes($dato);
                        } else {
                            $dato['tipo_error'] = "4";
                            $this->Model_IFV->insert_lista_postulantes_temporal($dato);
                        }
                    }
                }
            }

            $this->Model_IFV->limpiar_postulante_temporal();
        } else {
            redirect('/login');
        }
    }

    public function Invitar()
    {
        if ($this->session->userdata('usuario')) {

            $dato['get_examen'] = $this->Model_IFV->get_examen_activo();
            if (count($dato['get_examen']) > 0) {
                $cadena = $this->input->post("cadena");

                $postulantes = substr($cadena, 0, -1);
                $array = explode(",", $postulantes);

                if (count($array) > 0) {
                    $mail = new PHPMailer(true);
                    try {
                        $mail->SMTPDebug = 0;                      // Enable verbose debug output
                        $mail->isSMTP();                                            // Send using SMTP
                        $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                        $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                        $mail->Username = 'admision@ifv.edu.pe';                     // usuario de acceso
                        $mail->Password = $this->config->item('password_fv'); //'lxruwiqijszzomar';                                // SMTP password
                        $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                        $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above

                        foreach ($array as $list) {
                            $mail->setFrom('admision@ifv.edu.pe', "Admisión IFV"); //desde donde se envia
                            $dato['codigo'] = $list;
                            $dato['id_examen'] = $dato['get_examen'][0]['id_examen'];
                            $dato['get_id'] = $this->Model_IFV->get_id_postulante_xcodigo($dato);
                            $dato['id_postulante'] = $dato['get_id'][0]['id_postulante'];
                            $this->Model_IFV->update_envio_invitacion($dato);
                            $dato['get_resultado'] = $this->Model_IFV->get_id_postulante_resultado_examen($dato);
                            if (count($dato['get_resultado']) > 0) {
                                $this->Model_IFV->delete_resultado_examen_ifv($dato);
                            }
                            $dato['fecha_examen'] = $dato['get_examen'][0]['fecha_limite'];
                            $dato['fecha_resultados'] = $dato['get_examen'][0]['fecha_resultados'];
                            $dato['nombres'] = $dato['get_id'][0]['nombres'];
                            $dato['apellido_pat'] = $dato['get_id'][0]['apellido_pat'];
                            $dato['apellido_mat'] = $dato['get_id'][0]['apellido_mat'];
                            $dato['email_postulante'] = $dato['get_id'][0]['email'];
                            $dato['codigo'] = $dato['get_id'][0]['codigo'];
                            $mail->addAddress($dato['email_postulante']);
                            $link = 'https://ifvonline.edu.pe/examen_admision/index.php?/Examendeadmision/index/' . $dato['codigo'];
                            $mail->isHTML(true);
                            $mail->Subject = "EXAMEN DE ADMISIÓN " . $dato['fecha_examen'];
                            $mail->Body = '<FONT SIZE=4>¡Hola Estimado postulante!<br>
                                        Llegó el gran día para que puedas rendir el EXAMEN DE ADMISIÓN. <br><br>
                                        
                                        <b>Por ello es importante que sepas las condiciones del examen: </b><br><br>
                                        
                                        - El examen queda activo solo hasta las 8pm del dia de hoy. Después de esa hora ya no puedes ingresar y hacer el examen.<br>
                                        - Sólo se considerará el examen y la puntuación del primer envío registrado.<br>
                                        - Después de  activar el link del examen sólo puede aplicarse una sola vez, por lo que un segundo intento quedará invalidado.<br>
                                        - Asegúrate que el dispositivo en el cual realices el examen se encuentra cargado y con disponibilidad de internet para evitar que se cuelgue o se pierda la información.<br>
                                        - El puntaje mínimo para calificar es de 164.<br>
                                        - Los resultados serán publicados a través de nuestra web institucional <a href="http://www.ifv.edu.pe/admision/">http://www.ifv.edu.pe/admision/</a> en el icono “ResultadosAdmisión” el ' . $dato['fecha_resultados'] . '.<br><br>
                                        
                                        - Lee atentamente las instrucciones.<br><br>
                    
                                        <b>Instrucciones para el óptimo desarrollo del examen: </b><br>
                                        - El examen de admisión es único para todos los postulantes y consiste en una prueba de aptitud académica y de conocimientos.<br>
                                        - Durante el examen, lea con cuidado cada pregunta. Si lee apresuradamente, puede obviar información y equivocarse.<br>
                                        - Todas las preguntas otorgan el mismo puntaje: 4 puntos.<br>
                                        - El examen de admisión está integrado por 80 Preguntas, que evalúan 4 componentes: <br>
                                                Razonamiento Matemático, Razonamiento Verbal, Ciencias y Ambiente y Cultura General.<br>
                                        - Las preguntas del 1 al 20 están referidas a Razonamiento Matemático, del 21 al 40 a Razonamiento Verbal,  del 41 al 60 a Ciencia y Ambiente y del 61 al 80 a Cultura General.<br>
                                        - El tiempo máximo para responder el examen es de 120 minutos, una vez iniciado/activado el link. Despues de eso no puede continuar a hacer su examen y queda invalido.<br>
                                        - Es recomendable marcar cada respuesta, al momento mismo de conocerla.<br><br>
                                        <b>¡Vamos inicia tu examen haciendo click Aquí !:</b><br>
                                        ' . $link . '<br><br>
                                        ¡¡ EXITOS EN TU EXAMEN !!</FONT SIZE>';
                            $mail->CharSet = 'UTF-8';
                            $mail->send();
                            $mail->clearAddresses();
                            $mail->Subject = '';
                            $mail->Body = '';
                        }
                    } catch (Exception $e) {
                        echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                    }
                } else {
                    echo "error";
                }
            } else {
                echo "error";
            }
        } else {
            redirect('/login');
        }
    }

    public function Invitar_Postulantes_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_examen'] = $this->Model_IFV->get_examen_efsrt_activo();
            $dato['grupo'] = $this->input->post("grupo");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['modulo'] = $this->input->post("modulo");
            $dato['ciclo'] = $this->input->post("ciclo");
            $dato['turno'] = $this->input->post("turno");
            $dato['seccion'] = $this->input->post("seccion");
            $dato['hora_inicio'] = $this->input->post("hora_inicio");
            $dato['cant_alumno'] = count($this->input->post("alumno"));
            $dato['alumno'] = implode(",", $this->input->post("alumno"));

            $dato['get_especialidad'] = $this->Model_IFV->list_especialidad($dato['especialidad']);
            $dato['especialidad'] = $dato['get_especialidad'][0]['nom_especialidad'];

            if (count($dato['get_examen']) > 0) {
                if ($dato['cant_alumno'] > 0) {
                    $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_grupo_c_invitar($dato);

                    $dato['fecha_examen'] = $dato['get_examen'][0]['fecha_limite'];
                    $dato['fecha_examen2'] = $dato['get_examen'][0]['fec_limite2'];
                    $dato['fecha_resultados'] = $dato['get_examen'][0]['fecha_resultados'];
                    $dato['id_examen'] = $dato['get_examen'][0]['id_examen'];
                    $mail = new PHPMailer(true);
                    try {
                        $mail->SMTPDebug = 0;                      // Enable verbose debug output
                        $mail->isSMTP();                                            // Send using SMTP
                        $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                        $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                        $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                        $mail->Password = 'ifvc2022';                                // SMTP password
                        $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                        $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                        $errados = 0;
                        foreach ($dato['list_alumno'] as $list) {
                            $dato['carrera'] = $list['Especialidad'];
                            $dato['get_especialidad'] = $this->Model_IFV->get_especialidad_xnombre($dato);
                            $dato['id_carrera'] = $dato['get_especialidad'][0]['id_especialidad'];
                            $array_carreras = explode(",", $dato['get_examen'][0]['examen_carrera']);
                            if (in_array($dato['id_carrera'], $array_carreras)) {
                                $mail->setFrom('noreplay@ifv.edu.pe', "Examen EFSRT"); //desde donde se envia
                                $mail->addAddress($list['Email'], $list['Nombre'] . " " . $list['Apellido_Paterno'] . " " . $list['Apellido_Materno']);
                                $dato['codigo'] = $list['Codigo'];

                                $dato['nr_documento'] = $list['Dni'];
                                $dato['apellido_pat'] = $list['Apellido_Paterno'];
                                $dato['apellido_mat'] = $list['Apellido_Materno'];
                                $dato['nombres'] = $list['Nombre'];
                                $dato['grupo'] = $list['Grupo'];
                                $dato['email'] = $list['Email'];
                                $dato['celular'] = $list['Celular'];

                                $this->Model_IFV->update_envio_invitacion_efsrt($dato);

                                $link = 'http://ifv.snappy.org.pe/practicas/index.php?/Examen/index/' . $list['Codigo'];
                                //$link = 'http://localhost/examen_ifv/practicas/index.php?/Examen/index/'.$dato['get_id'][0]['codigo'];
                                $mail->isHTML(true);
                                $mail->Body = '<FONT SIZE=4>Estimado estudiante:<br><br>
                                                En el presente correo se adjunta el enlace que permitirá tu ingreso al Examen Básico (teórico) de EFSRT.<br>
                                                Recuerda que la APROBACIÓN del mismo forma parte de la condicionante para la PROGRAMACIÓN DE TUS EFSRT DEL MÓDULO I.<br><br>
                                                
                                                EXAMEN BÁSICO = EXAMEN TEÓRICO + EXAMEN PRÁCTICO<br><br>

                                                Condiciones del examen:<br><br>
                                                
                                                - El examen queda activo sólo en la hora establecida y programada , ésta información será indicada por la Coordinación de EFSRT. Duración 30 min.<br>
                                                - Sólo se considerará el examen y la nota del primer envío registrado.<br>
                                                - Asegúrate que el dispositivo en el cual realices el examen se encuentra cargado y con disponibilidad de internet para evitar que se cuelgue o se pierda la información.<br>
                                                - El puntaje mínimo para calificar es de 13.<br>
                                                - Los resultados serán publicados en la Extranet IFV.<br><br>
                                                
                                                - Lee atentamente las instrucciones.<br><br>
                                                
                                                Instrucciones para el óptimo desarrollo del examen:<br>
                                                - Durante el examen, lea con cuidado cada pregunta. Si lee apresuradamente, puede obviar información y equivocarse.<br>
                                                - Todas las preguntas otorgan el mismo puntaje.<br>
                                                - El examen consta de 10 preguntas teóricas, una vez iniciado/activado el link sólo puede aplicarse una sola vez, por lo que un segundo intento quedará invalidado.<br>
                                                - Es recomendable marcar cada respuesta, al momento mismo de conocerla.<br><br>
                                                
                                                ¡Vamos inicia tu examen haciendo click Aquí !:<br>
                                                ' . $link . '<br><br>
                                            ¡¡ EXITOS EN TU EXAMEN !!</FONT SIZE>';
                                $mail->Subject = "Exámen de Prácticas EFSRT " . $dato['fecha_examen'];
                                $mail->CharSet = 'UTF-8';
                                $mail->send();
                                $mail->clearAddresses();
                                $mail->Subject = '';
                                $mail->Body = '';
                            } else {
                                $errados = $errados + 1;
                            }
                        }
                        if (count($dato['list_alumno']) > 0 && $errados == 0) {
                            echo "3Se enviaron las invitaciones exitosamente.";
                        }
                        if ($errados > 0 && count($dato['list_alumno']) != $errados) {
                            echo "2Algunos especialidades de los postulantes no estas incluidas en el examen activo. Por favor revisar.";
                        } elseif (count($dato['list_alumno']) == $errados && count($dato['list_alumno']) > 0) {
                            echo "1No se enviaron las invitaciones debido a que las especialidades de los postulantes no estan incluidos en el examen activo. Por favor revisar";
                        }
                    } catch (Exception $e) {
                        echo "1Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                    }
                } else {
                    echo "1No se encontraron postulantes del grupo seleccionado!";
                }
            } else {
                echo "1No tienes ningún examen activo para hoy!";
            }
        } else {
            redirect('/login');
        }
    }

    public function Reenviar_Invitar_Postulantes_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_examen'] = $this->Model_IFV->get_examen_efsrt_activo();
            $dato['id_postulante'] = $this->input->post("id_postulante");
            $dato['get_id'] = $this->Model_IFV->get_id_postulante_efsrt($dato['id_postulante']);
            $dato['hora_inicio'] = $dato['get_id'][0]['hora_inicio'];
            $dato['alumno'] = $dato['get_id'][0]['Id'];

            if (count($dato['get_examen']) > 0) {
                $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_grupo_c_invitar($dato);

                $dato['fecha_examen'] = $dato['get_examen'][0]['fecha_limite'];
                $dato['fecha_examen2'] = $dato['get_examen'][0]['fec_limite2'];
                $dato['fecha_resultados'] = $dato['get_examen'][0]['fecha_resultados'];
                $dato['id_examen'] = $dato['get_examen'][0]['id_examen'];


                $mail = new PHPMailer(true);
                try {
                    $mail->SMTPDebug = 0;                      // Enable verbose debug output
                    $mail->isSMTP();                                            // Send using SMTP
                    $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                    $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                    $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                    $mail->Password = 'ifvc2022';                                // SMTP password
                    $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                    $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                    $errados = 0;
                    foreach ($dato['list_alumno'] as $list) {
                        $dato['carrera'] = $list['Especialidad'];
                        $dato['get_especialidad'] = $this->Model_IFV->get_especialidad_xnombre($dato);
                        $dato['id_carrera'] = $dato['get_especialidad'][0]['id_especialidad'];
                        $array_carreras = explode(",", $dato['get_examen'][0]['examen_carrera']);
                        if (in_array($dato['id_carrera'], $array_carreras)) {
                            $mail->setFrom('noreplay@ifv.edu.pe', "Examen EFSRT"); //desde donde se envia
                            $mail->addAddress($dato['get_id'][0]['email'], $list['Nombre'] . " " . $list['Apellido_Paterno'] . " " . $list['Apellido_Materno']);
                            $dato['codigo'] = $list['Codigo'];

                            $dato['nr_documento'] = $list['Dni'];
                            $dato['apellido_pat'] = $list['Apellido_Paterno'];
                            $dato['apellido_mat'] = $list['Apellido_Materno'];
                            $dato['nombres'] = $list['Nombre'];
                            $dato['grupo'] = $list['Grupo'];
                            $dato['email'] = $dato['get_id'][0]['email'];
                            $dato['celular'] = $list['Celular'];

                            $this->Model_IFV->update_envio_invitacion_efsrt($dato);

                            $link = 'http://ifv.snappy.org.pe/practicas/index.php?/Examen/index/' . $list['Codigo'];
                            //$link = 'http://localhost/examen_ifv/practicas/index.php?/Examen/index/'.$dato['get_id'][0]['codigo'];
                            $mail->isHTML(true);
                            $mail->Body = '<FONT SIZE=4>Estimado estudiante:<br><br>
                                            En el presente correo se adjunta el enlace que permitirá tu ingreso al Examen Básico (teórico) de EFSRT.<br>
                                            Recuerda que la APROBACIÓN del mismo forma parte de la condicionante para la PROGRAMACIÓN DE TUS EFSRT DEL MÓDULO I.<br><br>
                                            
                                            EXAMEN BÁSICO = EXAMEN TEÓRICO + EXAMEN PRÁCTICO<br><br>

                                            Condiciones del examen:<br><br>
                                            
                                            - El examen queda activo sólo en la hora establecida y programada , ésta información será indicada por la Coordinación de EFSRT. Duración 30 min.<br>
                                            - Sólo se considerará el examen y la nota del primer envío registrado.<br>
                                            - Asegúrate que el dispositivo en el cual realices el examen se encuentra cargado y con disponibilidad de internet para evitar que se cuelgue o se pierda la información.<br>
                                            - El puntaje mínimo para calificar es de 13.<br>
                                            - Los resultados serán publicados en la Extranet IFV.<br><br>
                                            
                                            - Lee atentamente las instrucciones.<br><br>
                                            
                                            Instrucciones para el óptimo desarrollo del examen:<br>
                                            - Durante el examen, lea con cuidado cada pregunta. Si lee apresuradamente, puede obviar información y equivocarse.<br>
                                            - Todas las preguntas otorgan el mismo puntaje.<br>
                                            - El examen consta de 10 preguntas teóricas, una vez iniciado/activado el link sólo puede aplicarse una sola vez, por lo que un segundo intento quedará invalidado.<br>
                                            - Es recomendable marcar cada respuesta, al momento mismo de conocerla.<br><br>
                                            
                                            ¡Vamos inicia tu examen haciendo click Aquí !:<br>
                                            ' . $link . '<br><br>
                                        ¡¡ EXITOS EN TU EXAMEN !!</FONT SIZE>';
                            $mail->Subject = "Exámen de Prácticas EFSRT " . $dato['fecha_examen'];
                            $mail->CharSet = 'UTF-8';
                            $mail->send();
                            $mail->clearAddresses();
                            $mail->Subject = '';
                            $mail->Body = '';
                        } else {
                            $errados = $errados + 1;
                        }

                    }
                    if (count($dato['list_alumno']) > 0 && $errados == 0) {
                        echo "3Se reenvió las invitaciones exitosamente.";
                    }
                    if ($errados > 0 && count($dato['list_alumno']) != $errados) {
                        echo "2Algunos especialidades de los postulantes no estas incluidas en el examen activo. Por favor revisar.";
                    } elseif (count($dato['list_alumno']) == $errados && count($dato['list_alumno']) > 0) {
                        echo "1No se envió la invitación debido a que la especialidad del postulante no está incluido en el examen activo. Por favor revisar";
                    }
                } catch (Exception $e) {
                    echo "1Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                }
            } else {
                echo "1No tienes ningún examen activo para hoy!";
            }
        } else {
            redirect('/login');
        }
    }

    public function enviar_email()
    {
        if ($this->session->userdata('usuario')) {
            //$this->load->library('phpmailer_lib');
            $mail = $this->phpmailer_lib->load();
            $correo = $this->input->post('email');

            $data = array(
                'email' => $this->input->post('email'),
            );
            $datos = $this->Model_IFV->filter("postulantes", null, $data, true);

            if (count($datos) > 0) {

                $mail->IsSMTP();
                $mail->Timeout = 180;
                $mail->Host = 'smtp.gmail.com';
                $mail->SMTPAuth = true;
                $mail->Username = 'flor.yanina@hotmail.com'; //webcontactos@gllg.edu.pe
                $mail->Password = 'quirkincha1992';
                $mail->SMTPSecure = 'tls'; //ssl
                $mail->Port = 587; //465
                $mail->setFrom("fyaninacubas@gmail.com");
                $mail->addAddress($correo);
                $mail->isHTML(true);
                $mail->Subject = 'Portal de Seguimiento de Personas Adultas Mayores de Alto Riesgo y Personas con Discapacidad Severa';
                $mail->Body = 'Hola, <br>
                Tu codigo es: ' . $datos[0]["codigo"] . ' <br>
                ¡Hola!, Llegó el gran día para que puedas rendir el EXAMEN DE ADMISIÓN .
                Por ello es importante que sepas las condiciones del examen:
                1º Sólo se considerará el examen y la puntuación del primer envío registrado.
                2º Asegúrate tener la carga de tu equipo y la disponibilidad de internet para evitar que se cuelgue o se pierda la información.
                3º El puntaje mínimo para calificar es de 164
                4º Los resultados serán publicados el 13-02-2021 a través de nuestra web institucional y redes sociales.
                Lee atentamente las instrucciones y EXITOS EN TU EXAMEN !"!!!... <br>
                Instrucciones para el óptimo desarrollo del examen:<br>
                El examen de admisión es único para todos los postulantes y consiste en una prueba de aptitud académica y de conocimientos.';
                $mail->AltBody = 'Atentamente .Ministerio de Desarrollo e Inclusión Social (MIDIS)';
                $mail->CharSet = 'UTF-8';
                // $mail->SMTPDebug = 2;
                if (!$mail->send()) {
                    echo 'no ok ' . $mail->ErrorInfo;
                } else {
                    echo "ok";
                }
                $mail->SmtpClose();
            }
            redirect('AppIFV/Postulantes');
        } else {
            redirect('/login');
        }
    }

    public function Enviar_Correo()
    {
        $dato['email'] = $this->input->post("email");
        //$dato['get_id'] = $this->Admin_model->valida_correo($dato);
        //$dato['nombre']=$dato['get_id'][0]['usuario_nombres'];
        //$dato['password']=$dato['get_id'][0]['password_desc'];

        $this->load->view('view_IFV/postulantes/enviar', $dato);
    }

    public function Update_Postulante()
    {
        $dato['id_postulante'] = $this->input->post("id_postulante");
        $dato['nr_documento'] = $this->input->post("nr_documento");
        $dato['nombres'] = $this->input->post("nombres");
        $dato['celular'] = $this->input->post("celular");
        $dato['apellido_pat'] = $this->input->post("apellido_pat");
        $dato['apellido_mat'] = $this->input->post("apellido_mat");
        $dato['email'] = $this->input->post("email");
        $dato['fec_inscripcion'] = $this->input->post("fec_inscripcion");
        $dato['estado'] = $this->input->post("estado");
        $dato['interese'] = $this->input->post("interese");
        $dato['id_carrera'] = $this->input->post("id_carrera");
        $dato['grupo'] = $this->input->post("grupo");
        $cant = count($this->Model_IFV->valida_update_postulante($dato));
        if ($cant > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_postulante($dato);
        }
    }

    public function Excel_Postulante()
    {
        $parametro = $this->input->post("parametro");
        $list_resultados = $this->Model_IFV->list_resultado_examen_postulantes_activos();
        if ($parametro == 1 || $parametro == 0) {
            $dato['list_postulantes'] = $this->Model_IFV->list_postulantes_activos();
        } elseif ($parametro == 2) {
            $dato['list_postulantes'] = $this->Model_IFV->list_postulantes_terminado();
        } elseif ($parametro == 3) {
            $dato['list_postulantes'] = $this->Model_IFV->list_postulantes_todos();
        }

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:P1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:P1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        if ($parametro == 1 || $parametro == 0) {
            $spreadsheet->getActiveSheet()->setTitle('Postulantes Invitados');
        }
        if ($parametro == 2) {
            $spreadsheet->getActiveSheet()->setTitle('Postulantes Concluidos');
        }
        if ($parametro == 3) {
            $spreadsheet->getActiveSheet()->setTitle('Postulantes - Todos');
        }

        $sheet->setAutoFilter('A1:P1');

        $sheet->getColumnDimension('A')->setWidth(14);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(20);
        $sheet->getColumnDimension('D')->setWidth(20);
        $sheet->getColumnDimension('E')->setWidth(25);
        $sheet->getColumnDimension('F')->setWidth(25);
        $sheet->getColumnDimension('G')->setWidth(30);
        $sheet->getColumnDimension('H')->setWidth(14);
        $sheet->getColumnDimension('I')->setWidth(32);
        $sheet->getColumnDimension('J')->setWidth(12);
        $sheet->getColumnDimension('K')->setWidth(15.3);
        $sheet->getColumnDimension('L')->setWidth(23);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(30);
        $sheet->getColumnDimension('O')->setWidth(30);
        $sheet->getColumnDimension('P')->setWidth(20);
        $sheet->getColumnDimension('Q')->setWidth(20);

        $sheet->getStyle('A1:Q1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:Q1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:Q1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Grupo');
        $sheet->setCellValue("C1", 'Carrera');
        $sheet->setCellValue("D1", 'DNI');
        $sheet->setCellValue("E1", 'Apellido Paterno');
        $sheet->setCellValue("F1", 'Apellido Materno');
        $sheet->setCellValue("G1", 'Nombre(s)');
        $sheet->setCellValue("H1", 'Fec. Inscripción');
        $sheet->setCellValue("I1", 'Correo');
        $sheet->setCellValue("J1", 'Celular');
        $sheet->setCellValue("K1", 'Estado');
        $sheet->setCellValue("L1", 'Fecha Envío');
        $sheet->setCellValue("M1", 'Inicio');
        $sheet->setCellValue("N1", 'Evaluación');
        $sheet->setCellValue("O1", 'Evaluación Equivalente');
        $sheet->setCellValue("P1", 'Termino');
        $sheet->setCellValue("Q1", 'Tiempo');
        //$sheet->setCellValue("P1", 'Minutos');

        $contador = 1;

        foreach ($dato['list_postulantes'] as $list) {
            $contador++;

            $busqueda = in_array($list['id_postulante'], array_column($list_resultados, 'id_postulante'));
            if ($busqueda != false) {
                $posicion = array_search($list['id_postulante'], array_column($list_resultados, 'id_postulante'));
            }

            $sheet->getStyle("E{$contador}:Q{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);

            $sheet->getStyle("A{$contador}:Q{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:Q{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['codigo']);
            $sheet->setCellValue("B{$contador}", $list['grupo']);
            $sheet->setCellValue("C{$contador}", $list['nom_carrera']);
            $sheet->setCellValue("D{$contador}", $list['nr_documento']);
            $sheet->setCellValue("E{$contador}", $list['apellido_pat']);
            $sheet->setCellValue("F{$contador}", $list['apellido_mat']);
            $sheet->setCellValue("G{$contador}", $list['nombres']);
            //$sheet->setCellValue("H{$contador}", $list['fecha_inscripcion']);
            if ($list['fecha_inscripcion'] != "00/00/0000") {
                $sheet->setCellValue("H{$contador}", Date::PHPToExcel($list['fecha_inscripcion']));
                $sheet->getStyle("H{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            }

            $sheet->setCellValue("I{$contador}", $list['email']);
            $sheet->setCellValue("J{$contador}", $list['celular']);
            $sheet->setCellValue("K{$contador}", $list['nom_status']);
            //$sheet->setCellValue("K{$contador}", $list['fecha_envio']);
            if ($list['fecha_envio'] != "00/00/0000") {
                $sheet->setCellValue("L{$contador}", Date::PHPToExcel($list['fecha_envio']));
                $sheet->getStyle("L{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            }

            if ($list['estado_postulante'] == 31 || $list['estado_postulante'] == 64) {

                if ($busqueda != false) {
                    if ($list_resultados[$posicion]['tiempo_inicio'] != "") {
                        $mifecha = new DateTime($list_resultados[$posicion]['tiempo_ini']);
                        //$mifecha->modify('+3 hours');
                        echo $mifecha->format('d/m/Y H:i');

                        if (substr($list_resultados[$posicion]['tiempo_inicio'], 11, 2) >= 12) {
                            $algo = "PM";
                        } else {
                            $algo = "AM";
                        }
                        $list['tiempo_inicio'] = $mifecha->format('d/m/Y H:i:s');
                        $sheet->setCellValue("M{$contador}", substr($list['tiempo_inicio'], 0, 16) . " " . $algo);
                    }
                }

                /*if ($list['tiempo_inicio'] != "") {
                    $mifecha = new DateTime($list['tiempo_ini']);
                    $mifecha->modify('+3 hours');
                    $list['tiempo_inicio']= $mifecha->format('Y-m-d H:i:s');


                    if (substr($list['tiempo_inicio'], 11, 2) >= 12) {
                        $algo = "PM";
                    } else {
                        $algo = "AM";
                    }
                    $list['tiempo_inicio']= $mifecha->format('d/m/Y H:i:s');
                    $sheet->setCellValue("M{$contador}", substr($list['tiempo_inicio'], 0, 16) . " " . $algo);
                }*/
            }

            if ($list['estado_postulante'] == 31 || $list['estado_postulante'] == 64 || $list['estado_postulante'] == 33) {
                if ($busqueda != false) {
                    $sheet->setCellValue("N{$contador}", $list_resultados[$posicion]['puntaje']);
                    $sheet->setCellValue("O{$contador}", $list_resultados[$posicion]['puntaje_arpay']);
                }
            }
            if ($list['estado_postulante'] == 31 || $list['estado_postulante'] == 64) {
                if ($busqueda != false) {
                    if ($list_resultados[$posicion]['fecha_termino'] != "") {
                        $mifecha = new DateTime($list_resultados[$posicion]['fec_termino']);
                        //$mifecha->modify('+3 hours');
                        $list['fecha_termino'] = $mifecha->format('Y-m-d H:i:s');
                        if (substr($list['fecha_termino'], 11, 2) >= 12) {
                            $algo = "PM";
                        } else {
                            $algo = "AM";
                        }
                        $list['fecha_termino'] = $mifecha->format('d/m/Y H:i:s');
                        $sheet->setCellValue("P{$contador}", substr($list['fecha_termino'], 0, 16) . " " . $algo);
                    }
                    if ($list_resultados[$posicion]['minutos_t'] != "") {
                        $sheet->setCellValue("Q{$contador}", substr($list_resultados[$posicion]['minutos_t'], 1, 5) . " hr m");
                    }
                }
                /*if ($list['fecha_termino'] != "") {
                    $mifecha = new DateTime($list['fec_termino']);
                    $mifecha->modify('+3 hours');
                    $list['fecha_termino']= $mifecha->format('Y-m-d H:i:s');
                    if (substr($list['fecha_termino'], 11, 2) >= 12) {
                        $algo = "PM";
                    } else {
                        $algo = "AM";
                    }
                    $list['fecha_termino']= $mifecha->format('d/m/Y H:i:s');
                    $sheet->setCellValue("P{$contador}", substr($list['fecha_termino'], 0, 16) . " " . $algo);
                }
                if ($list['minutos_t'] != "") {
                    $sheet->setCellValue("Q{$contador}", substr($list['minutos_t'], 1, 5) . " hr m");
                }*/
                /*if ($list['minutos_t'] != "") {
                    $array = explode(":", $list['minutos_t']);
                    $hr = $array[0];
                    $m = $array[1];
                    $sheet->setCellValue("P{$contador}", (($hr * 60) + ($m)));
                }*/
            }
        }

        $writer = new Xlsx($spreadsheet);

        $filename = 'Postulantes (Lista)';

        /*if ($parametro == 1 || $parametro == 0) {
            $filename = 'Postulantes Invitados';
        }
        if ($parametro == 2) {
            $filename = 'Postulantes Concluidos';
        }
        if ($parametro == 3) {
            $filename = 'Postulantes (Todos)';
        }*/

        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Excel_Vacio_Postulante()
    {

        $dato['list_postulantes'] = $this->Model_IFV->list_postulantes_todos();
        if (count($dato['list_postulantes']) > 0) {
            $spreadsheet = new Spreadsheet();
            $sheet = $spreadsheet->getActiveSheet();

            $sheet->getStyle("A1:J1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A1:J1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

            $spreadsheet->getActiveSheet()->setTitle('Postulantes');


            $sheet->setAutoFilter('A1:J1');

            $sheet->getColumnDimension('A')->setWidth(14);
            $sheet->getColumnDimension('B')->setWidth(15);
            $sheet->getColumnDimension('C')->setWidth(20);
            $sheet->getColumnDimension('D')->setWidth(20);
            $sheet->getColumnDimension('E')->setWidth(20);
            $sheet->getColumnDimension('F')->setWidth(20);
            $sheet->getColumnDimension('G')->setWidth(20);
            $sheet->getColumnDimension('H')->setWidth(14);
            $sheet->getColumnDimension('I')->setWidth(32);
            $sheet->getColumnDimension('J')->setWidth(32);

            $sheet->getStyle('A1:J1')->getFont()->setBold(true);

            $spreadsheet->getActiveSheet()->getStyle("A1:J1")->getFill()
                ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
                ->getStartColor()->setARGB('C8C8C8');

            $styleThinBlackBorderOutline = [
                'borders' => [
                    'allBorders' => [
                        'borderStyle' => Border::BORDER_THIN,
                        'color' => ['argb' => 'FF000000'],
                    ],
                ],
            ];

            $sheet->getStyle("A1:J1")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A1", 'Código');
            $sheet->setCellValue("B1", 'Carrera');
            $sheet->setCellValue("C1", 'N° Documento');
            $sheet->setCellValue("D1", 'Ap. Paterno');
            $sheet->setCellValue("E1", 'Ap. Materno');
            $sheet->setCellValue("F1", 'Nombres');
            $sheet->setCellValue("G1", 'Fec. Inscripción');
            $sheet->setCellValue("H1", 'Correo');
            $sheet->setCellValue("I1", 'Grupo');
            $sheet->setCellValue("J1", 'Celular');


            $contador = 1;

            foreach ($dato['list_postulantes'] as $list) {
                $contador++;

                /*$sheet->getStyle("A{$contador}:N{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("A{$contador}:N{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                $sheet->getStyle("A{$contador}:N{$contador}")->applyFromArray($styleThinBlackBorderOutline);

                $sheet->setCellValue("A{$contador}", $list['codigo']);
                $sheet->setCellValue("B{$contador}", $list['grupo']);
                $sheet->setCellValue("C{$contador}", $list['nom_carrera']);
                $sheet->setCellValue("D{$contador}", $list['nr_documento']);
                $sheet->setCellValue("E{$contador}", $list['apellido_pat']);
                $sheet->setCellValue("F{$contador}", $list['apellido_mat']);
                $sheet->setCellValue("G{$contador}", $list['nombres']);
                $sheet->setCellValue("H{$contador}", $list['fecha_inscripcion']);
                $sheet->setCellValue("I{$contador}", $list['email']);
                $sheet->setCellValue("J{$contador}", $list['nom_status']);
                $sheet->setCellValue("K{$contador}", $list['fecha_envio']);
                if($list['estado_postulante']==31){
                    $sheet->setCellValue("L{$contador}", $list['puntaje']);
                    $sheet->setCellValue("M{$contador}", $list['fecha_termino']);
                    $sheet->setCellValue("N{$contador}", substr($list['minutos_t'],1,8));
                }*/
            }

            $curdate = date('d-m-Y');
            $writer = new Xlsx($spreadsheet);

            $filename = 'Lista_Potulantes_Ejemplo';

            if (ob_get_contents()) ob_end_clean();
            header('Content-Type: application/vnd.ms-excel');
            header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
            header('Cache-Control: max-age=0');

            $writer->save('php://output');
        } else {
            echo 'No se han encontrado llamadas';
            exit;
        }
    }

    //------------------------------------------CARRERA---------------------------------------------
    public function Carrera()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_carrera'] = $this->Model_IFV->list_carrera();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


        $this->load->view('view_IFV/area_carrera/index_carrera', $dato);
    }

    public function Modal_carrera()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_estado'] = $this->Model_snappy->get_list_estado();
            $this->load->view('view_IFV/area_carrera/modal_carrera', $dato);
        } else {
            //$this->load->view('view_IFV/asistencia/login');
            redirect('/login');
        }
    }

    public function Valida_Duplicado_codecarrera()
    {

        $dato['codigo'] = $this->input->post("codigo");
        $dato['nombre'] = $this->input->post("nombre");
        $total = count($this->Model_IFV->valida_reg_codcarrera($dato));
        if ($total > 0) {
            echo "error";
        }
    }

    public function Insert_carrera()
    {
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['codigo'] = $this->input->post("codigo");
        $dato['nombre'] = $this->input->post("nombre");
        $dato['estado'] = $this->input->post("estado");

        $this->Model_IFV->insert_carrera($dato);

        redirect('AppIFV/Carrera');
    }


    public function Modal_Update_Carrera($id_carrera)
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_estado'] = $this->Model_snappy->get_list_estado();
            $dato['get_id'] = $this->Model_IFV->get_id_carrera_modulo($id_carrera);
            $this->load->view('view_IFV/area_carrera/modal_editar_carrera', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Carrera()
    {
        $dato['id_carrera'] = $this->input->post("id_carrera");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['codigo'] = $this->input->post("codigo");
        $dato['nombre'] = $this->input->post("nombre");
        $dato['estado'] = $this->input->post("estado");

        $this->Model_IFV->update_carrera($dato);

        redirect('AppIFV/Carrera');
    }

    public function Delete_Carrera()
    {
        if ($this->session->userdata('usuario')) {
            $id_carrera = $this->input->post("id_carrera");
            $this->Model_IFV->delete_carrera($id_carrera);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Carrera()
    {
        $dato['list_carrera'] = $this->Model_IFV->list_carrera();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:D1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:D1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Carreras');

        $sheet->setAutoFilter('A1:D1');

        $sheet->getColumnDimension('A')->setWidth(18);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(40);
        $sheet->getColumnDimension('D')->setWidth(15);

        $sheet->getStyle('A1:D1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:D1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:D1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Licenciamiento');
        $sheet->setCellValue("B1", 'Código');
        $sheet->setCellValue("C1", 'Nombre');
        $sheet->setCellValue("D1", 'Estado');

        $contador = 1;

        foreach ($dato['list_carrera'] as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:D{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            if ($list['id_especialidad'] == 1) {
                $sheet->setCellValue("A{$contador}", "L14");
            } else {
                $sheet->setCellValue("A{$contador}", "L20");
            }
            $sheet->setCellValue("B{$contador}", $list['codigo']);
            $sheet->setCellValue("C{$contador}", $list['nombre']);
            $sheet->setCellValue("D{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Carreras (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //----------------------------------------------------------AREA-------------------------------------
    public function Area()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_area'] = $this->Model_IFV->list_carrera_area();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


        $this->load->view('view_IFV/area_carrera/index_area', $dato);
    }

    public function Modal_Update_Postulante($id_postulante)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_postulante'] = $id_postulante;
            $dato['get_id'] = $this->Model_IFV->get_id_postulante($dato);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado_postulante();
            $dato['list_carrera'] = $this->Model_IFV->get_listar_carrera();
            $this->load->view('view_IFV/postulantes/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    //--------------------------------------------------------EXAMEN--------------------------------------
    public function Examen()
    {
        if ($this->session->userdata('usuario')) {
            $this->Model_IFVS->actu_estado_examen_ifv();

            $dato['limite'] = $this->Model_IFV->cant_area_carrera();


            $dato['list_examen'] = $this->Model_IFV->list_examen_ifv();
            $dato['list_examen2'] = $this->Model_IFV->list_examen_ifv2();
            $dato['list_examen3'] = $this->Model_IFV->list_examen_ifv3();
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/examen_adm/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Detalle_Examen($id_examen)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_examen_ifv($id_examen);
            $dato['list_pregunta'] = $this->Model_IFV->list_detalle_pregunta($id_examen);
            $dato['list_area'] = $this->Model_IFV->list_carrera_area();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/examen_adm/index_detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Preguntas($id_area, $id_examen)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_examen'] = $id_examen;
            $dato['id_area'] = $id_area;
            $dato['get_id'] = $this->Model_IFV->get_id_examen_ifv($id_examen);
            $dato['get_area'] = $this->Model_IFV->get_id_area($id_area);
            $dato['list_area'] = $this->Model_IFV->list_carrera_area();
            $dato['list_pregunta'] = $this->Model_IFV->list_preguntas_admision($id_area, $id_examen);
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/examen_adm/detalle_examen/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Pregunta($id_area, $id_examen)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_area'] = $id_area;
            $dato['id_examen'] = $id_examen;
            $dato['get_id'] = $this->Model_IFV->get_id_carrera_area($id_area);
            $this->load->view('view_IFV/examen_adm/detalle_examen/modal_pregunta', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Valida_Pregunta_Adm()
    {
        $dato['id_area'] = $this->input->post("id_area");
        $dato['id_examen'] = $this->input->post("id_examen");
        $dato['pregunta'] = $this->input->post("pregunta");

        $total = count($this->Model_IFV->valida_pregunta_admision($dato));
        $total2 = count($this->Model_IFV->valida_cant_pregunta_admision($dato));

        if ($total2 > 19) {
            echo "cant";
        }/*elseif($total>0){
            echo "dup";
        }*/
    }

    public function Insert_Pregunta_Admision()
    {
        $dato['id_area'] = $this->input->post("id_area");
        $dato['id_examen'] = $this->input->post("id_examen");
        $dato['orden'] = $this->input->post("orden");
        $dato['pregunta'] = $this->input->post("pregunta");
        $dato['alternativa1'] = $this->input->post("alternativa1");
        $dato['alternativa2'] = $this->input->post("alternativa2");
        $dato['alternativa3'] = $this->input->post("alternativa3");
        $dato['alternativa4'] = $this->input->post("alternativa4");
        $dato['alternativa5'] = $this->input->post("alternativa5");

        $this->Model_IFV->insert_pregunta_admision($dato);

        $total = count($this->Model_IFV->valida_cant_pregunta($dato));
        $dato['limite'] = $this->Model_IFV->cant_area_carrera();

        if ($total >= (count($dato['limite']) * 20)) {
            $dato['estado_contenido'] = "1";
            $this->Model_IFV->update_examen_estado_contenido($dato);
        } else {
            $dato['estado_contenido'] = "0";
            $this->Model_IFV->update_examen_estado_contenido($dato);
        }
        //redirect('AppIFV/Preguntas/' . $dato['id_area'] . '/' . $dato['id_examen']);
    }

    public function Modal_Update_Pregunta($id_pregunta, $id_area, $id_examen)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_pregunta'] = $id_pregunta;
            $dato['id_area'] = $id_area;
            $dato['id_examen'] = $id_examen;
            $dato['get_id'] = $this->Model_IFV->get_id_pregunta_admision($dato);
            $dato['get_id_respuesta'] = $this->Model_IFV->get_id_respuesta_admision($dato);
            $this->load->view('view_IFV/examen_adm/detalle_examen/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Pregunta_Admision()
    {
        $dato['id_area'] = $this->input->post("id_area");
        $dato['id_examen'] = $this->input->post("id_examen");
        $dato['id_pregunta'] = $this->input->post("id_pregunta");
        $dato['orden'] = $this->input->post("orden");
        $dato['pregunta'] = $this->input->post("pregunta");

        $dato['id_respuesta1'] = $this->input->post("id_respuesta1");
        $dato['id_respuesta2'] = $this->input->post("id_respuesta2");
        $dato['id_respuesta3'] = $this->input->post("id_respuesta3");
        $dato['id_respuesta4'] = $this->input->post("id_respuesta4");
        $dato['id_respuesta5'] = $this->input->post("id_respuesta5");

        $dato['alternativa1'] = $this->input->post("alternativa1");
        $dato['alternativa2'] = $this->input->post("alternativa2");
        $dato['alternativa3'] = $this->input->post("alternativa3");
        $dato['alternativa4'] = $this->input->post("alternativa4");
        $dato['alternativa5'] = $this->input->post("alternativa5");

        $dato['img'] = $_FILES['img']['name'];
        $this->Model_IFV->update_pregunta_admision($dato);

        $total = count($this->Model_IFV->valida_cant_pregunta($dato));
        $dato['limite'] = $this->Model_IFV->cant_area_carrera();
        if ($total >= (count($dato['limite']) * 20)) {
            $dato['estado_contenido'] = "1";
            $this->Model_IFV->update_examen_estado_contenido($dato);
        } else {
            $dato['estado_contenido'] = "0";
            $this->Model_IFV->update_examen_estado_contenido($dato);
        }
        redirect('AppIFV/Preguntas/' . $dato['id_area'] . '/' . $dato['id_examen']);
    }

    public function Delete_Pregunta_Admision()
    {
        if ($this->session->userdata('usuario')) {
            $id_pregunta = $this->input->post("id_pregunta");
            $dato['id_examen'] = $this->input->post("id_examen");
            $this->Model_IFV->delete_pregunta_admision($id_pregunta);

            $total = count($this->Model_IFV->valida_cant_pregunta($dato));

            if ($total == 80) {
                $dato['estado_contenido'] = "1";
                $this->Model_IFV->update_examen_estado_contenido($dato);
            } else {
                $dato['estado_contenido'] = "0";
                $this->Model_IFV->update_examen_estado_contenido($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Excel_Examen()
    {
        $dato['limite'] = $this->Model_IFV->cant_area_carrera();
        $dato['list_examen'] = $this->Model_IFV->list_examen_ifv();
        $dato['list_examen2'] = $this->Model_IFV->list_examen_ifv2();
        $dato['list_examen3'] = $this->Model_IFV->list_examen_ifv3();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:K1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:K1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Examenes');

        $sheet->setAutoFilter('A1:K1');

        $sheet->getColumnDimension('A')->setWidth(30);
        $sheet->getColumnDimension('B')->setWidth(18);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(22);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(25);

        $sheet->getStyle('A1:K1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:K1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:K1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Descripción');
        $sheet->setCellValue("B1", 'Fecha Envío');
        $sheet->setCellValue("C1", 'Fecha Publicación');
        $sheet->setCellValue("D1", 'Enviados');
        $sheet->setCellValue("E1", 'Sin Iniciar');
        $sheet->setCellValue("F1", 'Sin Concluir');
        $sheet->setCellValue("G1", 'Concluidos');
        $sheet->setCellValue("H1", 'Tiempo');
        $sheet->setCellValue("I1", 'Evaluación');
        $sheet->setCellValue("J1", 'Contenido');
        $sheet->setCellValue("K1", 'Estado');

        $contador = 1;

        foreach ($dato['list_examen2'] as $list) {
            $contador++;

            $sheet->getStyle("B{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:K{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_examen']);
            //$sheet->setCellValue("B{$contador}", $list['fecha_limite']);
            $sheet->setCellValue("B{$contador}", Date::PHPToExcel($list['fecha_limite']));
            $sheet->getStyle("B{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            //$sheet->setCellValue("C{$contador}", $list['fecha_resultados']);
            $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['fecha_resultados']));
            $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            $sheet->setCellValue("D{$contador}", $list['Enviados']);
            $sheet->setCellValue("E{$contador}", $list['Sin Iniciar']);
            $sheet->setCellValue("F{$contador}", $list['Sin Concluir']);
            $sheet->setCellValue("G{$contador}", $list['Concluido']);

            foreach ($dato['list_examen3'] as $list1) {
                if ($list1['id_examen'] == $list['id_examen']) {
                    $sheet->setCellValue("H{$contador}", substr($list1['Tiempo'], 0, 8));
                }
            }

            foreach ($dato['list_examen3'] as $list1) {
                if ($list1['id_examen'] == $list['id_examen']) {
                    $sheet->setCellValue("I{$contador}", substr($list1['Evaluacion'], 0, 2));
                }
            }

            foreach ($dato['list_examen'] as $cant) {
                if ($cant['id_examen'] == $list['id_examen']) {
                    if ($cant['cantidad'] >= (count($dato['limite']) * 20)) {
                        $sheet->setCellValue("J{$contador}", "Completo");
                    } else {
                        $sheet->setCellValue("J{$contador}", "Incompleto");
                    }
                }
            }


            if ($list['Concluido'] > 0) {
                $sheet->setCellValue("K{$contador}", $list['nom_status'] . " - Terminado");
            } else {
                $sheet->setCellValue("K{$contador}", $list['nom_status']);
            }

        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Examenes de Admisión (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-----------------------------------------------------CENTROS--------------------------------------------
    public function Centro()
    {
        if ($this->session->userdata('usuario')) {
            $dato['parametro'] = 1;

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();
            //$dato['list_especialidad'] = $this->Model_IFV->list_especialidad();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/centro/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Muestra_Centro()
    {
        if ($this->session->userdata('usuario')) {
            $dato['parametro'] = $this->input->post("parametro");
            $dato['list_centro'] = $this->Model_IFV->get_busqueda_centro($dato);
            $this->load->view('view_IFV/centro/list_centro', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Centro()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_nivel'] = $_SESSION['usuario'][0]['id_nivel'];
            $dato['total'] = $this->Model_IFV->list_preguardado_general_centro_especialidad();
            $this->Model_IFV->limpiar_temporal_centro($dato);
            $dato['list_estado'] = $this->Model_snappy->get_list_estado();
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();
            $dato['list_departamento'] = $this->Admin_model->get_list_departamento();
            $dato['get_list_especialidad'] = $this->Model_IFV->get_list_especialidad();
            $dato['list_especialidad'] = $this->Model_IFV->list_especialidad();

            $dato['list_producto'] = $this->Model_IFV->get_list_preguardado_producto_especialidad();

            $dato['get_general'] = $this->Model_IFV->list_preguardado_general_centro_especialidad();

            /*$anio=date('Y');
            $query_id = $this->Model_IFV->get_registros_centro();
            $totalRows_t = count($query_id);
            $aniof=substr($anio, 2,2);
            if($totalRows_t<9){
                $codigoregistro=$aniof."000".($totalRows_t+1);
            }
            if($totalRows_t>8 && $totalRows_t<99){
                    $codigoregistro=$aniof."00".($totalRows_t+1);
            }
            if($totalRows_t>98 && $totalRows_t<999){
                $codigoregistro=$aniof."0".($totalRows_t+1);
            }*/

            /** */
            $anio = date('Y');
            $query_id = $this->Model_IFV->get_registros_centro();
            $totalRows_t = count($query_id);
            $aniof = substr($anio, 2, 2);
            if ($totalRows_t < 9) {
                $codigoregistro = $aniof . "0" . ($totalRows_t + 1);
            }
            if ($totalRows_t > 8) {
                $codigoregistro = $aniof . ($totalRows_t + 1);
            }
            /** */
            $dato['referencia'] = $codigoregistro;
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/centro/modal_registrar', $dato);
        } else {
            //$this->load->view('view_IFV/asistencia/login');
            redirect('/login');
        }
    }

    //---------------------------------IFV PDF----------------------------

    public function PDF_Admision()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_comu_img'] = $this->Model_IFV->list_comu_img();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


        $this->load->view('view_IFV/comunicacion/index', $dato);
    }

    //---------------------------------WEB IFV----------------------------
    public function Web_IFV()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $list_web_ifv = $this->Model_IFV->get_list_web_ifv(3);
            $count = 0;
            foreach ($list_web_ifv as $value) {
                $fin = date('Y-m-d', strtotime(str_replace('/', '-', $value['fin'])));
                $seven_days_before = date('Y-m-d', strtotime('-7 days', strtotime($fin)));
                if (date('Y-m-d') >= $seven_days_before) {
                    $count++;
                }
            }
            $dato['cantidad_caducados'] = $count;
            $this->load->view('view_IFV/comunicacion/web_ifv/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Web_IFV()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            if ($dato['tipo'] == 1) {
                $list_web_ifv = $this->Model_IFV->get_list_web_ifv(1);
                foreach ($list_web_ifv as $value) {
                    $fin = date('Y-m-d', strtotime(str_replace('/', '-', $value['fin'])));
                    if ($fin < date('Y-m-d')) {
                        $state = 2;
                        $id = $value['id_comuimg'];
                        $this->Model_IFV->update_state_web_ifv($state, $id);
                    }
                }
            }
            $dato['list_total_web_ifv'] = $this->Model_IFV->get_list_web_ifv($dato['tipo']);
            $this->load->view('view_IFV/comunicacion/web_ifv/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Web_IFV()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo'] = $this->Model_IFV->get_missing_types();
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();
            $this->load->view('view_IFV/comunicacion/web_ifv/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Web_IFV()
    {
        $dato['flag_referencia'] = $this->input->post("flag_referencia_i");

        if ($dato['flag_referencia'] == 1) {
            $id_carrera = $this->input->post("id_carrera_i");
            $get_carrera = $this->Model_IFV->get_id_carrera_modulo($id_carrera);
            $dato['cod_referencia'] = $id_carrera;
            $dato['refe_comuimg'] = $get_carrera[0]['nombre'];
        } else {
            $dato['cod_referencia'] = "";
            $dato['refe_comuimg'] = $this->input->post("refe_comuimg_i");
        }

        $dato['inicio_comuimg'] = $this->input->post("inicio_comuimg_i");
        $dato['fin_comuimg'] = $this->input->post("fin_comuimg_i");
        $dato['img_comuimg'] = "";
        $dato['estado'] = 5;

        $valida = count($this->Model_IFV->valida_insert_web_ifv($dato));

        if ($valida > 0) {
            echo "error";
        } else {
            if ($_FILES["img_comuimg_i"]["name"] != "") {
                $cantidad = count($this->Model_IFV->ultimo_id_comunimg()) + 1;
                $dato['nom_archivo'] = str_replace(' ', '_', $_FILES["img_comuimg_i"]["name"]);
                $config['upload_path'] = './img_web_ifv/' . $cantidad;
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./img_web_ifv/', 0777);
                    chmod('./img_web_ifv/' . $cantidad, 0777);
                }
                $config["allowed_types"] = 'pdf|PDF|jpg|JPG';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $_FILES["file"]["name"] = $dato['nom_archivo'];
                $_FILES["file"]["type"] = $_FILES["img_comuimg_i"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_i"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["img_comuimg_i"]["error"];
                $_FILES["file"]["size"] = $_FILES["img_comuimg_i"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['img_comuimg'] = "img_web_ifv/" . $cantidad . "/" . $dato['nom_archivo'];
                }
                $dato['estado'] = 1;
            }
            $this->Model_IFV->insert_web_ifv($dato);

            $valida = count($this->Model_IFV->valida_cambiar_imagen_web_ifv($dato));

            if ($valida > 0) {
                if ($dato['flag_referencia'] == 1) {
                    $id_carrera = $this->input->post("id_carrera_i");
                    $get_carrera = $this->Model_IFV->get_id_carrera_modulo($id_carrera);

                    array_map('unlink', glob('./triptico/' . $get_carrera[0]['url'] . '.pdf'));

                    if ($_FILES["img_comuimg_i"]["name"] != "") {
                        $config['upload_path'] = './triptico/';
                        if (!file_exists($config['upload_path'])) {
                            mkdir($config['upload_path'], 0777, true);
                            chmod($config['upload_path'], 0777);
                            chmod('./triptico/', 0777);
                        }
                        $config["allowed_types"] = 'PDF|pdf';
                        $this->load->library('upload', $config);
                        $this->upload->initialize($config);
                        $path = $_FILES["img_comuimg_i"]["name"];
                        $fecha = date('Y-m-d');
                        $ext = pathinfo($path, PATHINFO_EXTENSION);
                        $dato['nom_archivo'] = $get_carrera[0]['url'] . "." . $ext;
                        $_FILES["file"]["name"] = $dato['nom_archivo'];
                        $_FILES["file"]["type"] = $_FILES["img_comuimg_i"]["type"];
                        $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_i"]["tmp_name"];
                        $_FILES["file"]["error"] = $_FILES["img_comuimg_i"]["error"];
                        $_FILES["file"]["size"] = $_FILES["img_comuimg_i"]["size"];
                        if ($this->upload->do_upload('file')) {
                            $data = $this->upload->data();
                        }
                    }
                } else {
                    if ($dato['flag_referencia'] == 0) {
                        array_map('unlink', glob('./resultadoifv/resultados.pdf'));

                        if ($_FILES["img_comuimg_i"]["name"] != "") {
                            $config['upload_path'] = './resultadoifv/';
                            if (!file_exists($config['upload_path'])) {
                                mkdir($config['upload_path'], 0777, true);
                                chmod($config['upload_path'], 0777);
                                chmod('./resultadoifv/', 0777);
                            }
                            $config["allowed_types"] = 'PDF|pdf';
                            $this->load->library('upload', $config);
                            $this->upload->initialize($config);
                            $path = $_FILES["img_comuimg_i"]["name"];
                            $fecha = date('Y-m-d');
                            $ext = pathinfo($path, PATHINFO_EXTENSION);
                            $dato['nom_archivo'] = "resultados." . $ext;
                            $_FILES["file"]["name"] = $dato['nom_archivo'];
                            $_FILES["file"]["type"] = $_FILES["img_comuimg_i"]["type"];
                            $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_i"]["tmp_name"];
                            $_FILES["file"]["error"] = $_FILES["img_comuimg_i"]["error"];
                            $_FILES["file"]["size"] = $_FILES["img_comuimg_i"]["size"];
                            if ($this->upload->do_upload('file')) {
                                $data = $this->upload->data();
                            }
                        }
                    } elseif ($dato['flag_referencia'] == 2) {
                        array_map('unlink', glob('./imagenWeb/web.jpg'));

                        if ($_FILES["img_comuimg_i"]["name"] != "") {
                            $config['upload_path'] = './imagenWeb/';
                            if (!file_exists($config['upload_path'])) {
                                mkdir($config['upload_path'], 0777, true);
                                chmod($config['upload_path'], 0777);
                                chmod('./imagenWeb/', 0777);
                            }
                            $config["allowed_types"] = 'JPG|jpg';
                            $this->load->library('upload', $config);
                            $this->upload->initialize($config);
                            $path = $_FILES["img_comuimg_i"]["name"];
                            $fecha = date('Y-m-d');
                            $ext = pathinfo($path, PATHINFO_EXTENSION);
                            $dato['nom_archivo'] = "web." . $ext;
                            $_FILES["file"]["name"] = $dato['nom_archivo'];
                            $_FILES["file"]["type"] = $_FILES["img_comuimg_i"]["type"];
                            $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_i"]["tmp_name"];
                            $_FILES["file"]["error"] = $_FILES["img_comuimg_i"]["error"];
                            $_FILES["file"]["size"] = $_FILES["img_comuimg_i"]["size"];
                            if ($this->upload->do_upload('file')) {
                                $data = $this->upload->data();
                            }
                        }
                    } elseif ($dato['flag_referencia'] == 3) {
                        array_map('unlink', glob('./reglamento/reglamento.pdf'));

                        if ($_FILES["img_comuimg_i"]["name"] != "") {
                            $config['upload_path'] = './reglamento/';
                            if (!file_exists($config['upload_path'])) {
                                mkdir($config['upload_path'], 0777, true);
                                chmod($config['upload_path'], 0777);
                                chmod('./reglamento/', 0777);
                            }
                            $config["allowed_types"] = 'PDF|pdf';
                            $this->load->library('upload', $config);
                            $this->upload->initialize($config);
                            $path = $_FILES["img_comuimg_i"]["name"];
                            $fecha = date('Y-m-d');
                            $ext = pathinfo($path, PATHINFO_EXTENSION);
                            $dato['nom_archivo'] = "reglamento." . $ext;
                            $_FILES["file"]["name"] = $dato['nom_archivo'];
                            $_FILES["file"]["type"] = $_FILES["img_comuimg_i"]["type"];
                            $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_i"]["tmp_name"];
                            $_FILES["file"]["error"] = $_FILES["img_comuimg_i"]["error"];
                            $_FILES["file"]["size"] = $_FILES["img_comuimg_i"]["size"];
                            if ($this->upload->do_upload('file')) {
                                $data = $this->upload->data();
                            }
                        }
                    }
                }
            }
        }
    }

    /*public function Insert_Archivos(){
        $dato['flag_referencia'] = $this->input->post("flag_referencia_i");

        if($dato['flag_referencia']==1){
            $id_carrera = $this->input->post("id_carrera_i");
            $get_carrera = $this->Model_IFV->get_id_carrera_modulo($id_carrera);

            array_map('unlink', glob('./triptico/'.$get_carrera[0]['url'].'.pdf'));

            if($_FILES["img_comuimg_i"]["name"] != ""){
                $config['upload_path'] = './triptico/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./triptico/', 0777);
                }
                $config["allowed_types"] = 'PDF|pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["img_comuimg_i"]["name"];
                $fecha=date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $dato['nom_archivo'] = $get_carrera[0]['url'].".".$ext;
                $_FILES["file"]["name"] = $dato['nom_archivo'];
                $_FILES["file"]["type"] = $_FILES["img_comuimg_i"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_i"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["img_comuimg_i"]["error"];
                $_FILES["file"]["size"] = $_FILES["img_comuimg_i"]["size"];
                if($this->upload->do_upload('file')){
                    $data = $this->upload->data();
                }
            }
        }else{
            if($dato['flag_referencia']==0){
                array_map('unlink', glob('./resultadoifv/resultados.pdf'));

                if($_FILES["img_comuimg_i"]["name"] != ""){
                    $config['upload_path'] = './resultadoifv/';
                    if (!file_exists($config['upload_path'])) {
                        mkdir($config['upload_path'], 0777, true);
                        chmod($config['upload_path'], 0777);
                        chmod('./resultadoifv/', 0777);
                    }
                    $config["allowed_types"] = 'PDF|pdf';
                    $this->load->library('upload', $config);
                    $this->upload->initialize($config);
                    $path = $_FILES["img_comuimg_i"]["name"];
                    $fecha=date('Y-m-d');
                    $ext = pathinfo($path, PATHINFO_EXTENSION);
                    $dato['nom_archivo'] = "resultados.".$ext;
                    $_FILES["file"]["name"] = $dato['nom_archivo'];
                    $_FILES["file"]["type"] = $_FILES["img_comuimg_i"]["type"];
                    $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_i"]["tmp_name"];
                    $_FILES["file"]["error"] = $_FILES["img_comuimg_i"]["error"];
                    $_FILES["file"]["size"] = $_FILES["img_comuimg_i"]["size"];
                    if($this->upload->do_upload('file')){
                        $data = $this->upload->data();
                    }
                }
            }elseif($dato['flag_referencia']==2){
                array_map('unlink', glob('./imagenWeb/web.jpg'));

                if($_FILES["img_comuimg_i"]["name"] != ""){
                    $config['upload_path'] = './imagenWeb/';
                    if (!file_exists($config['upload_path'])) {
                        mkdir($config['upload_path'], 0777, true);
                        chmod($config['upload_path'], 0777);
                        chmod('./imagenWeb/', 0777);
                    }
                    $config["allowed_types"] = 'JPG|jpg';
                    $this->load->library('upload', $config);
                    $this->upload->initialize($config);
                    $path = $_FILES["img_comuimg_i"]["name"];
                    $fecha=date('Y-m-d');
                    $ext = pathinfo($path, PATHINFO_EXTENSION);
                    $dato['nom_archivo'] = "web.".$ext;
                    $_FILES["file"]["name"] = $dato['nom_archivo'];
                    $_FILES["file"]["type"] = $_FILES["img_comuimg_i"]["type"];
                    $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_i"]["tmp_name"];
                    $_FILES["file"]["error"] = $_FILES["img_comuimg_i"]["error"];
                    $_FILES["file"]["size"] = $_FILES["img_comuimg_i"]["size"];
                    if($this->upload->do_upload('file')){
                        $data = $this->upload->data();
                    }
                }
            }elseif($dato['flag_referencia']==3){
                array_map('unlink', glob('./reglamento/reglamento.pdf'));

                if($_FILES["img_comuimg_i"]["name"] != ""){
                    $config['upload_path'] = './reglamento/';
                    if (!file_exists($config['upload_path'])) {
                        mkdir($config['upload_path'], 0777, true);
                        chmod($config['upload_path'], 0777);
                        chmod('./reglamento/', 0777);
                    }
                    $config["allowed_types"] = 'PDF|pdf';
                    $this->load->library('upload', $config);
                    $this->upload->initialize($config);
                    $path = $_FILES["img_comuimg_i"]["name"];
                    $fecha=date('Y-m-d');
                    $ext = pathinfo($path, PATHINFO_EXTENSION);
                    $dato['nom_archivo'] = "reglamento.".$ext;
                    $_FILES["file"]["name"] = $dato['nom_archivo'];
                    $_FILES["file"]["type"] = $_FILES["img_comuimg_i"]["type"];
                    $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_i"]["tmp_name"];
                    $_FILES["file"]["error"] = $_FILES["img_comuimg_i"]["error"];
                    $_FILES["file"]["size"] = $_FILES["img_comuimg_i"]["size"];
                    if($this->upload->do_upload('file')){
                        $data = $this->upload->data();
                    }
                }
            }
        }
    }*/

    public function Modal_Update_Web_IFV($id_comuimg)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_comuimg($id_comuimg);
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();
            $dato['list_estado'] = $this->Model_IFV->get_list_statusva();
            $id_flag = $dato['get_id'][0]['flag_referencia'];
            $dato['list_tipo'] = $this->Model_IFV->get_missing_types($id_flag);
            $this->load->view('view_IFV/comunicacion/web_ifv/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Web_IFV()
    {
        $dato['id_comuimg'] = $this->input->post("id_comuimg");
        $dato['flag_referencia'] = $this->input->post("flag_referencia_u");

        if ($dato['flag_referencia'] == 1) {
            $id_carrera = $this->input->post("id_carrera_u");
            $get_carrera = $this->Model_IFV->get_id_carrera_modulo($id_carrera);
            $dato['cod_referencia'] = $id_carrera;
            $dato['refe_comuimg'] = $get_carrera[0]['nombre'];
        } else {
            $dato['cod_referencia'] = "";
            $dato['refe_comuimg'] = $this->input->post("refe_comuimg_u");
        }

        $dato['inicio_comuimg'] = $this->input->post("inicio_comuimg_u");
        $dato['fin_comuimg'] = $this->input->post("fin_comuimg_u");
        $dato['estado'] = $this->input->post("estado_u");
        $dato['img_comuimg'] = $this->input->post("archivo_actual");
        //$dato['estado'] = 5;

        $valida = count($this->Model_IFV->valida_update_web_ifv($dato));

        if ($valida > 0) {
            echo "error";
        } else {
            if ($_FILES["img_comuimg_u"]["name"] != "") {
                if (file_exists($dato['img_comuimg'])) {
                    unlink($dato['img_comuimg']);
                }
                $dato['nom_archivo'] = str_replace(' ', '_', $_FILES["img_comuimg_u"]["name"]);
                $config['upload_path'] = './img_web_ifv/' . $dato['id_comuimg'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./img_web_ifv/', 0777);
                    chmod('./img_web_ifv/' . $dato['id_comuimg'], 0777);
                }
                $config["allowed_types"] = 'pdf|PDF|jpg|JPG';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $_FILES["file"]["name"] = $dato['nom_archivo'];
                $_FILES["file"]["type"] = $_FILES["img_comuimg_u"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg_u"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["img_comuimg_u"]["error"];
                $_FILES["file"]["size"] = $_FILES["img_comuimg_u"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['img_comuimg'] = "img_web_ifv/" . $dato['id_comuimg'] . "/" . $dato['nom_archivo'];
                }
                $dato['estado'] = 1;
            }
            $this->Model_IFV->update_web_ifv($dato);

            $valida = count($this->Model_IFV->valida_cambiar_imagen_web_ifv($dato));

            if ($valida > 0) {
                if ($dato['estado'] == 1) {
                    $get_id = $this->Model_IFV->get_id_comuimg($dato['id_comuimg']);
                    $ruta1 = $get_id[0]['img_comuimg'];
                    if ($dato['flag_referencia'] == 1) {
                        $get_carrera = $this->Model_IFV->get_id_carrera_modulo($get_id[0]['cod_referencia']);
                        $ruta2 = "./triptico/" . $get_carrera[0]['url'] . ".pdf";
                        array_map('unlink', glob('./triptico/' . $get_carrera[0]['url'] . '.pdf'));
                    } else {
                        if ($dato['flag_referencia'] == 0) {
                            $ruta2 = "./resultadoifv/resultados.pdf";
                            array_map('unlink', glob('./resultadoifv/resultados.pdf'));
                        } elseif ($dato['flag_referencia'] == 2) {
                            $ruta2 = "./imagenWeb/web.jpg";
                            array_map('unlink', glob('./imagenWeb/web.jpg'));
                        } elseif ($dato['flag_referencia'] == 3) {
                            $ruta2 = "./reglamento/reglamento.pdf";
                            array_map('unlink', glob('./reglamento/reglamento.pdf'));
                        }
                    }
                    copy($ruta1, $ruta2);
                }
            }
        }
    }

    public function Descargar_Web_IFV($id_comuimg)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_comuimg($id_comuimg);
            $image = $dato['get_file'][0]['img_comuimg'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['img_comuimg']));
        } else {
            redirect('');
        }
    }

    public function Delete_Web_IFV()
    {
        $dato['id_comuimg'] = $this->input->post("id_comuimg");
        $this->Model_IFV->delete_web_ifv($dato);
    }

    /*public function Modal_REG_Editar_WEB_IFV($id_comuimg){
        if ($this->session->userdata('usuario')) {
            $dato['list_statusva'] = $this->Model_IFV->get_list_statusva();
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();

            if($id_comuimg==0){
                $dato['get_id'] = 0;
            }else{
                $dato['get_id'] = $this->Model_IFV->get_id_comuimg($id_comuimg);

            }
            $this->load->view('view_IFV/comunicacion/web_ifv/modal_reg_edit', $dato);
        }else{
            redirect('/login');
        }
    }*/

    public function Excel_Web_IFV($tipo)
    {
        $list_web_ifv = $this->Model_IFV->get_list_web_ifv($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Web IFV');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(20);
        $sheet->getColumnDimension('B')->setWidth(40);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(40);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Tipo');
        $sheet->setCellValue("B1", 'Referencia o Carrera');
        $sheet->setCellValue("C1", 'Activo de');
        $sheet->setCellValue("D1", 'Hasta');
        $sheet->setCellValue("E1", 'Creado por');
        $sheet->setCellValue("F1", 'Fecha');
        $sheet->setCellValue("G1", 'Estado');

        $contador = 1;

        foreach ($list_web_ifv as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['tipo']);
            $sheet->setCellValue("B{$contador}", $list['refe_comuimg']);
            $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['inicio']));
            $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("D{$contador}", Date::PHPToExcel($list['fin']));
            $sheet->getStyle("D{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("E{$contador}", $list['creado_por']);
            $sheet->setCellValue("F{$contador}", Date::PHPToExcel($list['fec_reg']));
            $sheet->getStyle("F{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("G{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Web IFV (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //------------------------------------------------------------------------------
    public function Modal_Insertar_Admision()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_statusva'] = $this->Model_IFV->list_statusva();
        $dato['list_carrera'] = $this->Model_IFV->list_carrera();

        $this->load->view('view_IFV/comunicacion/modal_registrar', $dato);
    }

    public function Insert_ComuImg()
    {
        $dato['flag_referencia'] = $this->input->post("flag_referencia");

        if ($dato['flag_referencia'] == 1) {
            $id_carrera = $this->input->post("id_carrera");
            $get_carrera = $this->Model_IFV->get_id_carrera_modulo($id_carrera);
            $dato['cod_referencia'] = $id_carrera;
            $dato['refe_comuimg'] = $get_carrera[0]['nombre'];
        } elseif ($dato['flag_referencia'] == 0) {
            $dato['cod_referencia'] = "";
            $dato['refe_comuimg'] = $this->input->post("refe_comuimg");
        }

        $dato['inicio_comuimg'] = $this->input->post("inicio_comuimg");
        $dato['fin_comuimg'] = $this->input->post("fin_comuimg");
        $dato['img_comuimg'] = "";
        $dato['estado'] = $this->input->post("estado");
        $dato['mod'] = 1;

        $cant = count($this->Model_IFV->valida_comuimg($dato));

        if ($cant > 0) {
            echo "error";
        } else {
            if ($_FILES["img_comuimg"]["name"] != "") {


                $config['upload_path'] = './imgcomunicaion/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./imgcomunicaion/', 0777);
                }
                $config["allowed_types"] = 'PDF|pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["img_comuimg"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $dato['nom_archivo'] = "comunicacion" . $fecha . "_" . rand(1, 200) . "." . $ext;
                $_FILES["file"]["name"] = $dato['nom_archivo'];
                $_FILES["file"]["type"] = $_FILES["img_comuimg"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["img_comuimg"]["error"];
                $_FILES["file"]["size"] = $_FILES["img_comuimg"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['img_comuimg'] = "imgcomunicaion/" . $dato['nom_archivo'];
                }


            }

            $this->Model_IFV->insert_comuimg($dato);
        }
    }

    public function InsertarPDFIFV()
    {
        $dato['flag_referencia'] = $this->input->post("flag_referencia");

        if ($dato['flag_referencia'] == 1) {
            $id_carrera = $this->input->post("id_carrera");
            $get_carrera = $this->Model_IFV->get_id_carrera_modulo($id_carrera);

            array_map('unlink', glob('./triptico/' . $get_carrera[0]['url'] . '.pdf'));

            if ($_FILES["img_comuimg"]["name"] != "") {
                $config['upload_path'] = './triptico/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./triptico/', 0777);
                }
                $config["allowed_types"] = 'PDF|pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["img_comuimg"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $dato['nom_archivo'] = $get_carrera[0]['url'] . "." . $ext;
                $_FILES["file"]["name"] = $dato['nom_archivo'];
                $_FILES["file"]["type"] = $_FILES["img_comuimg"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["img_comuimg"]["error"];
                $_FILES["file"]["size"] = $_FILES["img_comuimg"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                }
            }
        } else {
            array_map('unlink', glob('./resultadoifv/resultados.pdf'));

            if ($_FILES["img_comuimg"]["name"] != "") {
                $config['upload_path'] = './resultadoifv/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./resultadoifv/', 0777);
                }
                $config["allowed_types"] = 'PDF|pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["img_comuimg"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $dato['nom_archivo'] = "resultados." . $ext;
                $_FILES["file"]["name"] = $dato['nom_archivo'];
                $_FILES["file"]["type"] = $_FILES["img_comuimg"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["img_comuimg"]["error"];
                $_FILES["file"]["size"] = $_FILES["img_comuimg"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                }
            }
        }
    }

    public function Modal_Editar_Admision($id_comuimg)
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['get_id'] = $this->Model_IFV->get_id_comuimg($id_comuimg);
        $dato['list_statusva'] = $this->Model_IFV->list_statusva();
        $dato['list_carrera'] = $this->Model_IFV->list_carrera();
        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        $this->load->view('view_IFV/comunicacion/modal_editar', $dato);
    }

    public function Update_ComuImg()
    {
        $dato['id_comuimg'] = $this->input->post("id_comuimg");
        $dato['flag_referencia'] = $this->input->post("flag_referencia");

        if ($dato['flag_referencia'] == 1) {
            $id_carrera = $this->input->post("id_carrera");
            $get_carrera = $this->Model_IFV->get_id_carrera_modulo($id_carrera);
            $dato['cod_referencia'] = $id_carrera;
            $dato['refe_comuimg'] = $get_carrera[0]['nombre'];
        } else {
            $dato['cod_referencia'] = "";
            $dato['refe_comuimg'] = $this->input->post("refe_comuimg");
        }

        $dato['inicio_comuimg'] = $this->input->post("inicio_comuimg");
        $dato['fin_comuimg'] = $this->input->post("fin_comuimg");
        $dato['img_comuimg'] = $this->input->post("archivo_actual");
        $dato['estado'] = $this->input->post("estado");

        $dato['mod'] = 2;
        $cant = count($this->Model_IFV->valida_comuimg($dato));
        if ($cant > 0) {
            echo "error";
        } else {
            if ($_FILES["img_comuimg"]["name"] != "") {
                if (file_exists($dato['img_comuimg'])) {
                    unlink($dato['img_comuimg']);
                }
                $config['upload_path'] = './imgcomunicaion/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./imgcomunicaion/', 0777);
                }
                $config["allowed_types"] = 'PDF|pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["img_comuimg"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $dato['nom_archivo'] = "comunicacion" . $fecha . "_" . rand(1, 200) . "." . $ext;
                $_FILES["file"]["name"] = $dato['nom_archivo'];
                $_FILES["file"]["type"] = $_FILES["img_comuimg"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["img_comuimg"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["img_comuimg"]["error"];
                $_FILES["file"]["size"] = $_FILES["img_comuimg"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['img_comuimg'] = "imgcomunicaion/" . $dato['nom_archivo'];
                }
            }

            $this->Model_IFV->update_comuimg($dato);

            if ($dato['estado'] == 1) {
                $get_id = $this->Model_IFV->get_registro($dato['id_comuimg']);
                $ruta1 = $get_id[0]['img_comuimg'];
                if ($dato['flag_referencia'] == 1) {
                    $get_carrera = $this->Model_IFV->get_id_carrera_modulo($get_id[0]['cod_referencia']);
                    $ruta2 = "./triptico/" . $get_carrera[0]['url'] . ".pdf";
                    array_map('unlink', glob('./triptico/' . $get_carrera[0]['url'] . '.pdf'));
                } else {
                    $ruta2 = "./resultadoifv/resultados.pdf";
                    array_map('unlink', glob('./resultadoifv/resultados.pdf'));
                }
                copy($ruta1, $ruta2);
            }
            /*else if($dato['estado']==3 || $dato['estado']==2){
                $dato2['img_comuimg2'] = $this->Model_IFV->get_registro_activo();
                $ruta1 = $dato2['img_comuimg2'][0]["img_comuimg"];
                $ruta2 = "./resultadoifv/resultados.pdf";
                array_map('unlink', glob('./resultadoifv/resultados.pdf'));
                copy($ruta1,$ruta2);
            }*/
        }
    }

    public function Delete_ComuImg()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_comuimg'] = $this->input->post("id_comuimg");

            $this->Model_IFV->delete_comuimg($dato);
        } else {
            redirect('/login');
        }
    }

    //---------------------IFV WEB-----------------------------

    public function Imagen_Web()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_web_img'] = $this->Model_IFV->list_web_img();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


        $this->load->view('view_IFV/imagenWeb/index', $dato);
    }

    public function Modal_Insertar_Web()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_statusva'] = $this->Model_IFV->list_statusva();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        $this->load->view('view_IFV/imagenWeb/modal_registrar', $dato);
    }

    public function Insertar_WebImg()
    {


        $dato['flag_referencia'] = $this->input->post("flag_referencia");

        $dato['refe_comuimg'] = $this->input->post("refe_comuimg");
        $dato['inicio_comuimg'] = $this->input->post("inicio_comuimg");
        $dato['fin_comuimg'] = $this->input->post("fin_comuimg");
        $dato['img_comuimg'] = $this->input->post("img_comuimg");
        $dato['estado'] = $this->input->post("estado");
        $this->Model_IFV->insertar_webimg($dato);
    }

    public function Insertar_Web_Img_IFV()
    {
        array_map('unlink', glob('./imagenWeb/web.jpg'));
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();
        $this->Model_IFV->cargarimg();
    }

    public function Modal_Editar_Web($id_comuimg)
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['get_id'] = $this->Model_IFV->get_id_comuimg($id_comuimg);
        $dato['list_statusva'] = $this->Model_IFV->list_statusva();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        $this->load->view('view_IFV/imagenWeb/modal_editar', $dato);
    }

    public function Update_WebImg()
    {
        $dato['refe_comuimg'] = $this->input->post("refe_comuimg");
        $dato['refe_comuimg'] = $this->input->post("refe_comuimg");
        $dato['inicio_comuimg'] = $this->input->post("inicio_comuimg");
        $dato['fin_comuimg'] = $this->input->post("fin_comuimg");
        $dato['img_comuimg'] = $this->input->post("img_comuimg");
        $dato['estado'] = $this->input->post("estado");
        $dato['id_comuimg'] = $this->input->post("id_comuimg");

        $this->Model_IFV->update_webimg($dato);

        if ($dato['estado'] == 1) {
            $dato2['img_comuimg2'] = $this->Model_IFV->get_registro($dato['id_comuimg']);
            $ruta1 = $dato2['img_comuimg2'][0]["img_comuimg"];
            $ruta2 = "./imagenWeb/web.jpg";
            array_map('unlink', glob('./imagenWeb/web.jpg'));
            copy($ruta1, $ruta2);
        } else if ($dato['estado'] == 3 || $dato['estado'] == 2) {
            $dato2['img_comuimg2'] = $this->Model_IFV->get_registro_activo_web();
            $ruta1 = $dato2['img_comuimg2'][0]["img_comuimg"];
            $ruta2 = "./imagenWeb/web.jpg";
            array_map('unlink', glob('./imagenWeb/web.jpg'));
            copy($ruta1, $ruta2);
        }
    }

    public function Excel_Imagen_Web()
    {
        $list_web_img = $this->Model_IFV->list_web_img();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:F1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:F1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Imagenes Web');

        $sheet->setAutoFilter('A1:F1');

        $sheet->getColumnDimension('A')->setWidth(40);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(40);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);

        $sheet->getStyle('A1:F1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:F1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:F1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Referencia');
        $sheet->setCellValue("B1", 'Activo de');
        $sheet->setCellValue("C1", 'Hasta');
        $sheet->setCellValue("D1", 'Creado por');
        $sheet->setCellValue("E1", 'Fecha');
        $sheet->setCellValue("F1", 'Estado');

        $contador = 1;

        foreach ($list_web_img as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:F{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:F{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['refe_comuimg']);

            $sheet->setCellValue("B{$contador}", Date::PHPToExcel($list['inicio_comuimg']));
            $sheet->getStyle("B{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);

            $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['fin_comuimg']));
            $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);

            $sheet->setCellValue("D{$contador}", $list['creado_por']);

            $sheet->setCellValue("E{$contador}", Date::PHPToExcel($list['fec_reg']));
            $sheet->getStyle("E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);

            $sheet->setCellValue("F{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Imagenes Web (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //--------------------------------------
    public function Carrera_Asignacion()
    {
        if ($this->session->userdata('usuario')) {
            $id_carrera = $this->input->post("id_carrera");

            $get_id = $this->Model_IFV->get_id_carrera_modulo($id_carrera);

            if ($get_id[0]['id_especialidad'] == 1) {
                $nombre = "Ciclos";
                $dato['list_asignacion'] = $this->Model_IFV->get_list_carrera_ciclo($id_carrera);
            } else {
                $nombre = "Modulos";
                $dato['list_asignacion'] = $this->Model_IFV->get_list_carrera_modulo($id_carrera);
            }

            $dato['nombre'] = $nombre;
            $dato['id_especialidad'] = $get_id[0]['id_especialidad'];

            $this->load->view('view_IFV/centro/carrera_asignacion', $dato);
        } else {
            redirect('/login');
        }
    }

    /*public function Valida_Centro(){

        $dato['codigo']= $this->input->post("codigo");
        $dato['nombre']= $this->input->post("nombre");
        $total=count($this->Model_IFV->valida_reg_codcarrera($dato));
        if($total>0){
            echo "error";
        }
    }*/

    public function Busca_Provincia()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_departamento'] = $this->input->post("id_departamento");

            $dato['list_provincia'] = $this->Model_IFV->busca_provincia($dato);
            $this->load->view('view_IFV/centro/provincia', $dato);
        } else {
            redirect('');
        }
    }

    public function Busca_Distrito()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_departamento'] = $this->input->post("id_departamento");
            $dato['id_provincia'] = $this->input->post("id_provincia");

            $dato['list_distrito'] = $this->Model_IFV->busca_distrito($dato);
            $this->load->view('view_IFV/centro/distrito', $dato);
        } else {
            redirect('');
        }
    }

    public function Insert_Centro()
    {
        if ($this->session->userdata('usuario')) {

            /*$dato['direccion'] = $this->input->post("direccion");
            $dato['departamento'] = $this->input->post("departamento");
            $dato['provincia'] = $this->input->post("provincia");
            $dato['distrito'] = $this->input->post("distrito");
            $dato['cp'] = $this->input->post("cp");
            $dato['contacto_dir'] = $this->input->post("contacto_dir");
            $dato['celular_dir'] = $this->input->post("celular_dir");
            $dato['correo_dir'] = $this->input->post("correo_dir");*/
            $id_nivel = $_SESSION['usuario'][0]['id_nivel'];
            $dato['estado'] = $this->input->post("estado");

            $dato['referencia'] = $this->input->post("referencia");
            $dato['nom_comercial'] = $this->input->post("nom_comercial");
            $dato['convenio'] = $this->input->post("convenio");
            $dato['empresa'] = $this->input->post("empresa");
            $dato['ruc'] = $this->input->post("ruc");
            $dato['persona'] = $this->input->post("persona");
            $dato['celular'] = $this->input->post("celular");
            $dato['correo'] = $this->input->post("correo");
            $dato['web'] = $this->input->post("web");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['observaciones'] = $this->input->post("observaciones");
            $dato['observaciones'] = $this->input->post("observaciones");

            $dato['fecha_firma'] = $this->input->post("fecha_firma");
            $dato['val_de'] = $this->input->post("val_de");
            $dato['val_a'] = $this->input->post("val_a");
            $dato['documento'] = $this->input->post("documento");
            $dato['observaciones_admin'] = $this->input->post("observaciones_admin");

            if ($id_nivel == 1 || $id_nivel == 6 || $id_nivel == 7 || $id_nivel == 12) {
                $dato['firmasf'] = $this->input->post("asf");
            } else {
                $dato['firmasf'] = "";
            }
            $anio = date('Y');
            $query_id = $this->Model_IFV->get_registros_centro();
            $totalRows_t = count($query_id);
            $aniof = substr($anio, 2, 2);
            if ($totalRows_t < 9) {
                $codigoregistro = $aniof . "0" . ($totalRows_t + 1);
            }
            if ($totalRows_t > 8) {
                $codigoregistro = $aniof . ($totalRows_t + 1);
            }
            /*if($totalRows_t>98){
                $codigoregistro=$aniof.($totalRows_t+1);
            }
            if($totalRows_t>998 && $totalRows_t<9999){
                $codigoregistro=$aniof.($totalRows_t+1);
            }
            if($totalRows_t>9998){
                $codigoregistro=$aniof.($totalRows_t+1);
            }*/
            $dato['cod_centro'] = $codigoregistro;

            /*if($dato['direccion']!="" && $dato['departamento']!=0 && $dato['provincia']!=0 && $dato['distrito']!=0){

                $cant=count($this->Model_IFV->valida_preinsert_direccion_centro($dato));
                if($cant>0){
                    echo "error";
                }else{
                    //$this->Model_IFV->preinsert_direccion_centro($dato);

                    $this->Model_IFV->insert_centro($dato);

                    $dato['get_id']=$this->Model_IFV->get_idcentro_xcodigo($dato);
                    $dato['id_centro']=$dato['get_id'][0]['id_centro'];
                    $dato['get_general']=$this->Model_IFV->list_preguardado_general_centro_especialidad();
                    $dato['fecha_firma']=$dato['get_general'][0]['fecha_firma'];
                    $dato['documento']=$dato['get_general'][0]['documento'];
                    $dato['observaciones_admin']=$dato['get_general'][0]['observaciones_admin'];
                    $dato['val_de']=$dato['get_general'][0]['val_de'];
                    $dato['val_a']=$dato['get_general'][0]['val_a'];
                    $this->Model_IFV->insert_especialidad_centro($dato);
                }

            }else{*/
            $this->Model_IFV->insert_centro($dato);

            $dato['get_id'] = $this->Model_IFV->get_idcentro_xcodigo($dato);
            $dato['id_centro'] = $dato['get_id'][0]['id_centro'];
            $dato['get_general'] = $this->Model_IFV->list_preguardado_general_centro_especialidad();
            $dato['fecha_firma'] = $dato['get_general'][0]['fecha_firma'];
            $dato['documento'] = $dato['get_general'][0]['documento'];
            $dato['observaciones_admin'] = $dato['get_general'][0]['observaciones_admin'];
            $dato['val_de'] = $dato['get_general'][0]['val_de'];
            $dato['val_a'] = $dato['get_general'][0]['val_a'];
            $this->Model_IFV->insert_especialidad_centro_sinultimodireccion($dato);
            //}

        } else {
            redirect('/login');
        }
    }

    public function Preguardar_Especialidad()
    {
        if ($this->session->userdata('usuario')) {

            $dato['documento'] = $this->input->post("documento");
            $dato['total'] = $this->Model_IFV->list_preguardado_general_centro_especialidad();

            if (count($dato['total']) > 0) {

                if ($dato['documento'] == "" && $dato['total'][0]['documento'] != "") {
                    $dato['documento'] = $dato['total'][0]['documento'];
                } else {
                    $dato['documento'] = $this->input->post("documento");
                }
            }
            $this->Model_IFV->limpiar_temporal_especialidad_centro($dato);

            $dato['fecha_firma'] = $this->input->post("fecha_firma");
            $dato['observaciones_admin'] = $this->input->post("observaciones_admin");
            $dato['val_de'] = $this->input->post("val_de");
            $dato['val_a'] = $this->input->post("val_a");

            $id_nivel = $_SESSION['usuario'][0]['id_nivel'];
            if ($id_nivel == 1 || $id_nivel == 6 || $id_nivel == 7 || $id_nivel == 12) {
                $dato['firmasf'] = $this->input->post("asf");
            } else {
                $dato['firmasf'] = "";
            }
            $this->Model_IFV->preinsert_general_especialidad($dato);

            $list_especialidad = $this->Model_IFV->get_list_especialidad();
            $list_producto = $this->Model_IFV->get_list_preguardado_producto_especialidad();

            foreach ($list_especialidad as $list) {
                $dato['especialidad'] = $list['id_especialidad'];
                $dato['total'] = $this->input->post("total_" . $list['id_especialidad']);
                if ($dato['total'] != "") {
                    $this->Model_IFV->preinsert_centro_especialidad_total($dato);
                }

                foreach ($list_producto as $prod) {
                    if ($prod['id_tipo_especialidad'] == $list['id_tipo_especialidad'] && $prod['id_especialidad'] == $list['id_especialidad']) {
                        if ($this->input->post("id_producto_" . $prod['id_producto']) != "") {
                            if ($dato['total'] == "") {
                                $dato['cantidad'] = $this->input->post("input_" . $prod['id_producto']);
                            } else {
                                $dato['cantidad'] = "";
                            }
                            $cadena = explode("-", $this->input->post("id_producto_" . $prod['id_producto']));
                            $dato['id_producto'] = $cadena[0];
                            $dato['id_especialidad'] = $cadena[1];
                            $this->Model_IFV->preinsert_centro_especialidad($dato);
                        }
                    }
                }
            }

            /*foreach ($_POST['id_producto'] as $producto) {
                $cadena = explode("-", $producto);

                $dato['id_producto']=$cadena[0];
                $dato['id_especialidad']=$cadena[1];
                $this->Model_IFV->preinsert_centro_especialidad($dato);
            }*/
        } else {
            redirect('/login');
        }
    }

    public function Preguardar_Direccion_Centro()
    {
        if ($this->session->userdata('usuario')) {

            $dato['direccion'] = $this->input->post("direccion");
            $dato['departamento'] = $this->input->post("departamento");
            $dato['provincia'] = $this->input->post("provincia");
            $dato['distrito'] = $this->input->post("distrito");
            $dato['cp'] = $this->input->post("cp");
            $dato['contacto_dir'] = $this->input->post("contacto_dir");
            $dato['celular_dir'] = $this->input->post("celular_dir");
            $dato['tel_fijo'] = $this->input->post("tel_fijo");
            $dato['correo_dir'] = $this->input->post("correo_dir");
            $cant = count($this->Model_IFV->valida_preinsert_direccion_centro($dato));
            if ($cant > 0) {
                echo "error";
            } else {
                $this->Model_IFV->preinsert_direccion_centro($dato);
            }

        } else {
            redirect('/login');
        }
    }

    public function Delete_Direccion_Temporal()
    {
        if ($this->session->userdata('usuario')) {

            $id_direccion_temporal = $this->input->post("id_direccion_temporal");
            $cant = $this->Model_IFV->delete_direccion_temporal($id_direccion_temporal);

        } else {
            redirect('/login');
        }
    }

    public function Delete_Direccion()
    {
        if ($this->session->userdata('usuario')) {

            $id_centro_direccion = $this->input->post("id_centro_direccion");
            $dato['id_centro'] = $this->input->post("id_centro");
            $id_centro = $this->input->post("id_centro");
            $this->Model_IFV->delete_direccion($id_centro_direccion);

            $dato['get_id'] = $this->Model_IFV->get_id_centro($id_centro);
            $en_bd = count($this->Model_IFV->get_list_direccion_centro_cp($id_centro));

            $dato['val_a'] = $dato['get_id'][0]['val_a'];

            $dato['anio1'] = date("Y", strtotime($dato['val_a']));
            $dato['mes1'] = date("m", strtotime($dato['val_a']));
            $dato['dia1'] = date("d", strtotime($dato['val_a']));
            $fecha_actual = date("Y/m/d");

            $dato['anio2'] = date("Y", strtotime($fecha_actual));
            $dato['mes2'] = date("m", strtotime($fecha_actual));
            $dato['dia2'] = date("d", strtotime($fecha_actual));

            $timestamp1 = mktime(0, 0, 0, $dato['mes1'], $dato['dia1'], $dato['anio1']);
            $timestamp2 = mktime(4, 12, 0, $dato['mes2'], $dato['dia2'], $dato['anio2']);

            $segundos_diferencia = $timestamp1 - $timestamp2;
            $dias_diferencia = $segundos_diferencia / (60 * 60 * 24);
            $dias_diferencia = abs($dias_diferencia);

            if ($en_bd == 0) {
                if ($dato['val_a'] != "") {
                    $dato['estado'] = 51;
                } else if ($dato['val_a'] == "") {
                    $dato['estado'] = 49;
                }
            } else {
                if ($dias_diferencia >= 0) {
                    $dato['estado'] = 48;
                } else if ($dias_diferencia < 0) {
                    $dato['estado'] = 50;
                }
            }
            $this->Model_IFV->update_estado_centro_xdireccion($dato);

        } else {
            redirect('/login');
        }
    }


    public function Update_Especialidad()
    {
        if ($this->session->userdata('usuario')) {

            $dato['id_centro'] = $this->input->post("id_centro");
            $dato['estado'] = $this->input->post("estado");
            $dato['id_ultimo_historial'] = $this->input->post("id_ultimo_historial");
            $dato['fecha_firma'] = $this->input->post("fecha_firmae");
            $dato['documento'] = $this->input->post("documentoe");
            $dato['observaciones_admin'] = $this->input->post("observaciones_admine");
            $dato['val_de'] = $this->input->post("val_dee");

            $dato['val_a'] = $this->input->post("val_ae");
            $id_nivel = $_SESSION['usuario'][0]['id_nivel'];
            if ($id_nivel == 1 || $id_nivel == 6 || $id_nivel == 7 || $id_nivel == 12) {
                $dato['firmasf'] = $this->input->post("asf");
            } else {
                $dato['firmasf'] = "";
            }
            $this->Model_IFV->update_general_especialidad($dato);
            $this->Model_IFV->limpiar_centro_especialidad($dato);

            $list_especialidad = $this->Model_IFV->get_list_especialidad();
            $list_producto = $this->Model_IFV->get_list_guardado_producto_especialidad($dato['id_centro']);

            foreach ($list_especialidad as $list) {
                $dato['especialidad'] = $list['id_especialidad'];
                $dato['total'] = $this->input->post("total_" . $list['id_especialidad']);
                if ($dato['total'] != "") {
                    $this->Model_IFV->update_centro_especialidad_total($dato);
                }

                foreach ($list_producto as $prod) {
                    if ($prod['id_tipo_especialidad'] == $list['id_tipo_especialidad'] && $prod['id_especialidad'] == $list['id_especialidad']) {
                        if ($this->input->post("id_producto_" . $prod['id_producto']) != "") {
                            if ($dato['total'] == "") {
                                $dato['cantidad'] = $this->input->post("input_" . $prod['id_producto']);
                            } else {
                                $dato['cantidad'] = "";
                            }
                            $cadena = explode("-", $this->input->post("id_producto_" . $prod['id_producto']));
                            $dato['id_producto'] = $cadena[0];
                            $dato['id_especialidad'] = $cadena[1];
                            $this->Model_IFV->update_centro_especialidad($dato);
                        }
                    }
                }
            }

            /*foreach ($_POST['id_producto'] as $producto) {

                $cadena = explode("-", $producto);

                $dato['id_producto']=$cadena[0];
                $dato['id_especialidad']=$cadena[1];
                $this->Model_IFV->update_centro_especialidad($dato);
            }*/
        } else {
            redirect('/login');
        }
    }

    public function List_Preguardado_Especialidad()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_nivel'] = $_SESSION['usuario'][0]['id_nivel'];

            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();
            $dato['list_producto'] = $this->Model_IFV->get_list_preguardado_producto_especialidad();

            $dato['get_especialidad'] = $this->Model_IFV->list_preguardado_centro_especialidad();
            $dato['get_general'] = $this->Model_IFV->list_preguardado_general_centro_especialidad();

            $dato['v_cen_esp'] = $this->Model_IFV->get_list_pre_centro_especialidad();
            $dato['v_cen_esp_tot'] = $this->Model_IFV->get_list_pre_centro_especialidad_total();

            $this->load->view('view_IFV/centro/list_especialidad', $dato);
        } else {
            redirect('/login');
        }
    }

    public function List_Preguardado_Direccion()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_direccion'] = $this->Model_IFV->get_list_direccion_temporal();

            $dato['i'] = 0;

            foreach ($dato['list_direccion'] as $char) {
                if ($char['cp'] == 1) {
                    $dato['i'] = $dato['i'] + 1;
                }
            }


            $this->load->view('view_IFV/centro/list_direccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function List_Guardado_Direccion()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_centro'] = $this->input->post("id_centro");
            $dato['list_direccion'] = $this->Model_IFV->get_list_direccion($dato);

            $dato['i'] = 0;

            foreach ($dato['list_direccion'] as $char) {
                if ($char['cp'] == 1) {
                    $dato['i'] = $dato['i'] + 1;
                }
            }

            $this->load->view('view_IFV/centro/list_direccion_edit', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Cancelar_Preguardado_Especialidad()
    {

        if ($this->session->userdata('usuario')) {
            $dato['id_nivel'] = $_SESSION['usuario'][0]['id_nivel'];
            $dato['total'] = $this->Model_IFV->list_preguardado_general_centro_especialidad();
            $this->Model_IFV->limpiar_temporal_especialidad_centro($dato);
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();
            $dato['list_producto'] = $this->Model_IFV->get_list_preguardado_producto_especialidad();

            $dato['get_especialidad'] = $this->Model_IFV->list_preguardado_centro_especialidad();
            $dato['get_general'] = $this->Model_IFV->list_preguardado_general_centro_especialidad();

            $this->load->view('view_IFV/centro/list_especialidad', $dato);
        } else {
            redirect('/login');
        }
    }

    public function List_Guardado_Especialidad()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_nivel'] = $_SESSION['usuario'][0]['id_nivel'];
            $id_centro = $this->input->post("id_centro");
            $dato['get_id'] = $this->Model_IFV->get_id_centro($id_centro);

            $dato['v_cen_esp'] = $this->Model_IFV->get_list_centro_especialidad($id_centro);
            $dato['v_cen_esp_tot'] = $this->Model_IFV->get_list_centro_especialidad_total($id_centro);

            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_centro($id_centro);
            $dato['list_producto'] = $this->Model_IFV->get_list_guardado_producto_especialidad($id_centro);

            $this->load->view('view_IFV/centro/list_especialidad_edit', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Detalle_Centro($id_centro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_nivel'] = $_SESSION['usuario'][0]['id_nivel'];
            $dato['id_centro'] = $id_centro;
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();
            $dato['id_status_mae'] = 8;
            $dato['list_estado'] = $this->Model_snappy->get_list_estado_mae($dato);
            $dato['get_id'] = $this->Model_IFV->get_id_centro($id_centro);
            $dato['list_direccion'] = $this->Model_IFV->get_list_direccion($dato);

            $dato['i'] = 0;

            foreach ($dato['list_direccion'] as $char) {
                if ($char['cp'] == 1) {
                    $dato['i'] = $dato['i'] + 1;
                }
            }
            $dato['list_documentos'] = $this->Model_IFV->get_list_documentos_centro($id_centro);
            $dato['list_historial'] = $this->Model_IFV->get_list_centro_historial($id_centro);
            $dato['list_departamento'] = $this->Admin_model->get_list_departamento();

            $dato['v_cen_esp'] = $this->Model_IFV->get_list_centro_especialidad($id_centro);
            $dato['v_cen_esp_tot'] = $this->Model_IFV->get_list_centro_especialidad_total($id_centro);

            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_centro($id_centro);
            $dato['list_producto'] = $this->Model_IFV->get_list_guardado_producto_especialidad($id_centro);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/centro/detalle_centro', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Vista_Update_Centro($id_centro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_nivel'] = $_SESSION['usuario'][0]['id_nivel'];
            $dato['id_centro'] = $id_centro;
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();
            $dato['id_status_mae'] = 8;
            $dato['list_estado'] = $this->Model_snappy->get_list_estado_mae($dato);
            $dato['get_id'] = $this->Model_IFV->get_id_centro($id_centro);
            $dato['list_direccion'] = $this->Model_IFV->get_list_direccion($dato);
            $dato['v_cen_esp'] = $this->Model_IFV->get_list_centro_especialidad($id_centro);
            $dato['v_cen_esp_tot'] = $this->Model_IFV->get_list_centro_especialidad_total($id_centro);

            $dato['i'] = 0;

            foreach ($dato['list_direccion'] as $char) {
                if ($char['cp'] == 1) {
                    $dato['i'] = $dato['i'] + 1;
                }
            }
            //$dato['cantidad_direccion'] = count($this->Model_IFV->get_list_direccion_centro($id_centro));

            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_centro($id_centro);
            $dato['list_producto'] = $this->Model_IFV->get_list_guardado_producto_especialidad($id_centro);
            $dato['list_departamento'] = $this->Admin_model->get_list_departamento();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/centro/vista_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Centro()
    {
        if ($this->session->userdata('usuario')) {

            $dato['id_centro'] = $this->input->post("id_centro");
            $dato['id_ultimo_historial'] = $this->input->post("id_ultimo_historial");
            $dato['estado'] = $this->input->post("estado");
            $dato['id_centro'] = $this->input->post("id_centro");
            $dato['referencia'] = $this->input->post("referenciae");
            $dato['nom_comercial'] = $this->input->post("nom_comerciale");
            $dato['empresa'] = $this->input->post("empresae");
            $dato['ruc'] = $this->input->post("ruce");
            $dato['web'] = $this->input->post("webe");
            $dato['observaciones'] = $this->input->post("observacionese");
            $dato['persona'] = $this->input->post("persona");
            $dato['celular'] = $this->input->post("celular");
            $dato['correo'] = $this->input->post("correo");

            $this->Model_IFV->update_centro($dato);

        } else {
            redirect('/login');
        }
    }

    public function Delete_Centro()
    {
        if ($this->session->userdata('usuario')) {
            $id_centro = $this->input->post("id_centro");

            $this->Model_IFV->delete_centro($id_centro);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Centro($parametro)
    {
        $dato['parametro'] = $parametro;
        $dato['list_centro'] = $this->Model_IFV->get_busqueda_centro($dato);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:AP2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:AP2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Centros');

        $sheet->setAutoFilter('A2:AP2');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(12);
        $sheet->getColumnDimension('C')->setWidth(12);
        $sheet->getColumnDimension('D')->setWidth(12);
        $sheet->getColumnDimension('E')->setWidth(18);
        $sheet->getColumnDimension('F')->setWidth(30);
        $sheet->getColumnDimension('G')->setWidth(8);
        $sheet->getColumnDimension('H')->setWidth(8);
        $sheet->getColumnDimension('I')->setWidth(8);
        $sheet->getColumnDimension('J')->setWidth(8);
        $sheet->getColumnDimension('K')->setWidth(8);
        $sheet->getColumnDimension('L')->setWidth(26);
        $sheet->getColumnDimension('M')->setWidth(13);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(13);
        $sheet->getColumnDimension('Q')->setWidth(13);
        $sheet->getColumnDimension('R')->setWidth(10);
        $sheet->getColumnDimension('S')->setWidth(10);
        $sheet->getColumnDimension('T')->setWidth(10);
        $sheet->getColumnDimension('U')->setWidth(10);
        $sheet->getColumnDimension('V')->setWidth(10);
        $sheet->getColumnDimension('W')->setWidth(10);
        $sheet->getColumnDimension('X')->setWidth(10);
        $sheet->getColumnDimension('Y')->setWidth(10);
        $sheet->getColumnDimension('Z')->setWidth(10);
        $sheet->getColumnDimension('AA')->setWidth(10);
        $sheet->getColumnDimension('AB')->setWidth(10);
        $sheet->getColumnDimension('AC')->setWidth(10);
        $sheet->getColumnDimension('AD')->setWidth(10);
        $sheet->getColumnDimension('AE')->setWidth(10);
        $sheet->getColumnDimension('AF')->setWidth(10);
        $sheet->getColumnDimension('AG')->setWidth(10);
        $sheet->getColumnDimension('AH')->setWidth(10);
        $sheet->getColumnDimension('AI')->setWidth(10);
        $sheet->getColumnDimension('AJ')->setWidth(10);
        $sheet->getColumnDimension('AK')->setWidth(10);
        $sheet->getColumnDimension('AL')->setWidth(10);
        $sheet->getColumnDimension('AM')->setWidth(10);
        $sheet->getColumnDimension('AN')->setWidth(15);
        $sheet->getColumnDimension('AO')->setWidth(15);
        $sheet->getColumnDimension('AP')->setWidth(15);
        $sheet->getColumnDimension('AQ')->setWidth(10);
        $sheet->getColumnDimension('AR')->setWidth(12);
        $sheet->getColumnDimension('AS')->setWidth(20);
        $sheet->getColumnDimension('AT')->setWidth(10);
        $sheet->getColumnDimension('AU')->setWidth(10);

        $sheet->getStyle('A1:AU2')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A2:Q2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $spreadsheet->getActiveSheet()->getStyle("R1:AM2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $spreadsheet->getActiveSheet()->getStyle("AM2:AU2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A2:Q2")->applyFromArray($styleThinBlackBorderOutline);
        $sheet->getStyle("Q1:AM2")->applyFromArray($styleThinBlackBorderOutline);
        $sheet->getStyle("AM2:AU2")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->mergeCells('A1:Q1');
        $sheet->mergeCells('R1:V1');
        $sheet->mergeCells('W1:AA1');
        $sheet->mergeCells('AB1:AE1');
        $sheet->mergeCells('AF1:AI1');
        $sheet->mergeCells('AJ1:AM1');
        $sheet->mergeCells('AN1:AU1');

        $sheet->setCellValue("R1", 'ET');
        $sheet->setCellValue("W1", 'FT');
        $sheet->setCellValue("AB1", 'AE');
        $sheet->setCellValue("AF1", 'CF');
        $sheet->setCellValue("AJ1", 'DS');

        $sheet->setCellValue("A2", 'Referencia');
        $sheet->setCellValue("B2", 'Inicio');
        $sheet->setCellValue("C2", 'Fin');
        $sheet->setCellValue("D2", 'Firma');
        $sheet->setCellValue("E2", 'Documento');
        $sheet->setCellValue("F2", 'Centro');
        $sheet->setCellValue("G2", 'ET');
        $sheet->setCellValue("H2", 'FT');
        $sheet->setCellValue("I2", 'AE');
        $sheet->setCellValue("J2", 'CF');
        $sheet->setCellValue("K2", 'DS');
        $sheet->setCellValue("L2", 'Dirección');
        $sheet->setCellValue("M2", 'Provincia');
        $sheet->setCellValue("N2", 'Distrito');
        $sheet->setCellValue("O2", 'Persona (P)');
        $sheet->setCellValue("P2", 'Celular (P)');
        $sheet->setCellValue("Q2", 'Correo (P)');
        $sheet->setCellValue("R2", 'Tiene');
        $sheet->setCellValue("S2", 'M1');
        $sheet->setCellValue("T2", 'M2');
        $sheet->setCellValue("U2", 'M3');
        $sheet->setCellValue("V2", 'M4');
        $sheet->setCellValue("W2", 'Tiene');
        $sheet->setCellValue("X2", 'M1');
        $sheet->setCellValue("Y2", 'M2');
        $sheet->setCellValue("Z2", 'M3');
        $sheet->setCellValue("AA2", 'M4');
        $sheet->setCellValue("AB2", 'Tiene');
        $sheet->setCellValue("AC2", 'M1');
        $sheet->setCellValue("AD2", 'M2');
        $sheet->setCellValue("AE2", 'M3');
        $sheet->setCellValue("AF2", 'Tiene');
        $sheet->setCellValue("AG2", 'M1');
        $sheet->setCellValue("AH2", 'M2');
        $sheet->setCellValue("AI2", 'M3');
        $sheet->setCellValue("AJ2", 'Tiene');
        $sheet->setCellValue("AK2", 'M1');
        $sheet->setCellValue("AL2", 'M2');
        $sheet->setCellValue("AM2", 'M3');
        $sheet->setCellValue("AN2", 'Alumnos Activos');
        $sheet->setCellValue("AO2", 'Alumnos Totales');
        $sheet->setCellValue("AP2", 'Disponibilidad');
        $sheet->setCellValue("AQ2", 'CP');
        $sheet->setCellValue("AR2", 'Acción');
        $sheet->setCellValue("AS2", 'Comentario');
        $sheet->setCellValue("AT2", 'Usuario');
        $sheet->setCellValue("AU2", 'Estado');

        $contador = 2;

        foreach ($dato['list_centro'] as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:AU{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("F{$contador}:I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("AT{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("AQ{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("AR{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:AU{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:AU{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['cod_centro']);
            if ($list['inicio'] != "00/00/0000" && $list['inicio'] != "" && $list['inicio'] != "01/01/0001") {
                $sheet->setCellValue("B{$contador}", Date::PHPToExcel($list['inicio']));
                $sheet->getStyle("B{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            } else {
                $sheet->setCellValue("B{$contador}", "");
            }
            if ($list['fin'] != "00/00/0000" && $list['fin'] != "" && $list['fin'] != "01/01/0001") {
                $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['fin']));
                $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            } else {
                $sheet->setCellValue("C{$contador}", "");
            }
            if ($list['fec_firma'] != "00/00/0000" && $list['fec_firma'] != "" && $list['fec_firma'] != "01/01/0001") {
                $sheet->setCellValue("D{$contador}", Date::PHPToExcel($list['fec_firma']));
                $sheet->getStyle("D{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            } else {
                $sheet->setCellValue("D{$contador}", "");
            }
            $sheet->setCellValue("E{$contador}", $list['v_documento']);
            $sheet->setCellValue("F{$contador}", $list['nom_comercial']);
            $sheet->setCellValue("G{$contador}", $list['especialida_et']);
            $sheet->setCellValue("H{$contador}", $list['especialida_ft']);
            $sheet->setCellValue("I{$contador}", $list['especialida_ae']);
            $sheet->setCellValue("J{$contador}", $list['especialida_cf']);
            $sheet->setCellValue("K{$contador}", $list['especialida_ds']);
            $sheet->setCellValue("L{$contador}", $list['direcciond']);
            $sheet->setCellValue("M{$contador}", $list['provinciad']);
            $sheet->setCellValue("N{$contador}", $list['distritod']);
            $sheet->setCellValue("O{$contador}", $list['persona']);
            $sheet->setCellValue("P{$contador}", $list['celular_pprin']);
            $sheet->setCellValue("Q{$contador}", $list['correo_pprin']);
            $sheet->setCellValue("R{$contador}", $list['especialida_et']);
            $sheet->setCellValue("W{$contador}", $list['especialida_ft']);
            $sheet->setCellValue("AB{$contador}", $list['especialida_ae']);
            $sheet->setCellValue("AF{$contador}", $list['especialida_cf']);
            $sheet->setCellValue("AJ{$contador}", $list['especialida_ds']);
            $sheet->setCellValue("AQ{$contador}", $list['CP']);
            $sheet->setCellValue("AN{$contador}", 0);
            $sheet->setCellValue("AO{$contador}", 0);
            $sheet->setCellValue("AR{$contador}", $list['uaccion']);
            $sheet->setCellValue("AS{$contador}", $list['ucomentario']);
            $sheet->setCellValue("AT{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("AU{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Centros de EFSRT (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-----------------------------------------------------ASIGNACIÓN DE CICLO--------------------------------------------
    public function Asignacion_Ciclo()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_asignacion_ciclo'] = $this->Model_IFV->get_list_asignacion_ciclo();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/asignacion_ciclo/index', $dato);
    }

    public function Modal_Asignacion_Ciclo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();

            $this->load->view('view_IFV/asignacion_ciclo/modal_registrar', $dato);
        } else {
            //$this->load->view('view_IFV/asistencia/login');
            redirect('/login');
        }
    }

    public function Insert_Asignacion_Ciclo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_carrera'] = $this->input->post("id_carrera");
            $dato['ciclo'] = $this->input->post("ciclo");

            $total = count($this->Model_IFV->valida_asignacion_ciclo($dato));

            if ($total != 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_asignacion_ciclo($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Asignacion_Ciclo($id_asignacion_ciclo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_estado'] = $this->Model_snappy->get_list_estado();
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();
            $dato['get_id'] = $this->Model_IFV->get_id_asignacion_ciclo($id_asignacion_ciclo);

            $this->load->view('view_IFV/asignacion_ciclo/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Asignacion_Ciclo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_asignacion_ciclo'] = $this->input->post("id_asignacion_ciclo");
            $dato['id_carrera'] = $this->input->post("id_carrera");
            $dato['ciclo'] = $this->input->post("ciclo");
            $dato['estado'] = $this->input->post("estado");

            $this->Model_IFV->update_asignacion_ciclo($dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Asignacion_Ciclo()
    {
        if ($this->session->userdata('usuario')) {
            $id_asignacion_ciclo = $this->input->post("id_asignacion_ciclo");

            $this->Model_IFV->delete_asignacion_ciclo($id_asignacion_ciclo);
        } else {
            redirect('/login');
        }
    }

    //-----------------------------------------------------ASIGNACIÓN DE MODULO--------------------------------------------
    public function Asignacion_Modulo()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_asignacion_modulo'] = $this->Model_IFV->get_list_asignacion_modulo();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/asignacion_modulo/index', $dato);
    }

    public function Modal_Asignacion_Modulo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();

            $this->load->view('view_IFV/asignacion_modulo/modal_registrar', $dato);
        } else {
            //$this->load->view('view_IFV/asistencia/login');
            redirect('/login');
        }
    }

    public function Insert_Asignacion_Modulo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_carrera'] = $this->input->post("id_carrera");
            $dato['modulo'] = $this->input->post("modulo");

            $total = count($this->Model_IFV->valida_asignacion_modulo($dato));

            if ($total != 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_asignacion_modulo($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Asignacion_Modulo($id_asignacion_modulo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_estado'] = $this->Model_snappy->get_list_estado();
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();
            $dato['get_id'] = $this->Model_IFV->get_id_asignacion_modulo($id_asignacion_modulo);

            $this->load->view('view_IFV/asignacion_modulo/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Asignacion_Modulo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_asignacion_modulo'] = $this->input->post("id_asignacion_modulo");
            $dato['id_carrera'] = $this->input->post("id_carrera");
            $dato['modulo'] = $this->input->post("modulo");
            $dato['estado'] = $this->input->post("estado");

            $this->Model_IFV->update_asignacion_modulo($dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Asignacion_Modulo()
    {
        if ($this->session->userdata('usuario')) {
            $id_asignacion_modulo = $this->input->post("id_asignacion_modulo");

            $this->Model_IFV->delete_asignacion_modulo($id_asignacion_modulo);
        } else {
            redirect('/login');
        }
    }


    public function Modal_Examen_Ifv()
    {
        if ($this->session->userdata('usuario')) {
            $this->load->view('view_IFV/examen_adm/modal_registrar');
        } else {
            redirect('/login');
        }
    }

    public function Insert_examen_ifv()
    {
        $dato['nom_examen'] = $this->input->post("nom_examen");
        $dato['fec_limite'] = $this->input->post("fec_limite") . " 20:00:00";
        $dato['fec_resultados'] = $this->input->post("fec_resultados");

        $this->Model_IFV->insert_examen_ifv($dato);
    }

    public function Modal_Update_Examen_ifv($id_examen)
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_estado'] = $this->Model_snappy->get_list_estado();
            $dato['get_id'] = $this->Model_IFV->get_id_examen_ifv($id_examen);
            $this->load->view('view_IFV/examen_adm/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Examen_Ifv()
    {
        $dato['id_examen'] = $this->input->post("id_examen");
        $dato['nom_examen'] = $this->input->post("nom_examen");
        $dato['fec_limite'] = $this->input->post("fec_limite") . " 20:00:00";
        $dato['fec_resultados'] = $this->input->post("fec_resultados");
        $dato['estado'] = $this->input->post("estado");
        if ($dato['estado'] == 2) {
            $cant = count($this->Model_IFV->get_examen_activo_update($dato));
            if ($cant > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_examen_ifv($dato);
            }
        } else {
            $this->Model_IFV->update_examen_ifv($dato);
        }
    }

    public function Duplicar_Examen()
    {
        if ($this->session->userdata('usuario')) {

            foreach ($_POST['id_examen'] as $list) {
                $dato['id_examen_1'] = $list;
                $id_examen = $list;

                $dato['get_id'] = $this->Model_IFV->get_id_examen_ifv($id_examen);

                $dato['nom_examen'] = $dato['get_id'][0]['nom_examen'] . " Duplicado";
                $dato['fec_limite'] = $dato['get_id'][0]['fec_limite'];
                $dato['fec_resultados'] = $dato['get_id'][0]['fec_resultados'];

                $this->Model_IFV->insert_examen_duplicado_ifv($dato);
                $dato['ultimo'] = $this->Model_IFV->ultimo_examen_ifv();
                $dato['id_examen_nuevo'] = $dato['ultimo'][0]['id_examen'];
                //var_dump($dato['id_examen_nuevo']);
                $this->Model_IFV->duplicar_examen_ifv($dato);
                $this->Model_IFV->copiar_preguntas_examen_ifv($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_DireccionCentro($id_centro_direccion, $id_centro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_centro_direccion'] = $id_centro_direccion;
            $dato['id_centro'] = $id_centro;
            $dato['get_id_u'] = $this->Model_IFV->get_id_centro($id_centro);
            $dato['get_id'] = $this->Model_IFV->get_id_centro_direccion($dato);
            $dato['id_departamento'] = $dato['get_id'][0]['departamento'];
            $dato['id_provincia'] = $dato['get_id'][0]['provincia'];
            $dato['list_departamento'] = $this->Admin_model->get_list_departamento();
            $dato['list_provincia'] = $this->Model_IFV->busca_provincia($dato);
            $dato['list_distrito'] = $this->Model_IFV->busca_distrito($dato);

            $this->load->view('view_IFV/centro/modal_editar_direccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_DireccionCentro()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_ultimo_historial'] = $this->input->post("id_ultimo_historial");
            $dato['id_centro_direccion'] = $this->input->post("id_centro_direccion");
            $dato['direccion'] = $this->input->post("direccion");
            $dato['departamento'] = $this->input->post("departamento");
            $dato['provincia'] = $this->input->post("provincia");
            $dato['distrito'] = $this->input->post("distrito");
            $dato['cp'] = $this->input->post("cp");
            $dato['contacto_dir'] = $this->input->post("contacto_dir");
            $dato['celular_dir'] = $this->input->post("celular_dir");
            $dato['tel_fijo'] = $this->input->post("tel_fijo");
            $dato['correo_dir'] = $this->input->post("correo_dir");
            $dato['id_centro'] = $this->input->post("id_centro");
            $id_centro = $this->input->post("id_centro");
            $this->Model_IFV->update_centro_direccion($dato);

            $dato['get_id'] = $this->Model_IFV->get_id_centro($id_centro);
            $en_bd = count($this->Model_IFV->get_list_direccion_centro_cp($id_centro));

            $dato['val_a'] = $dato['get_id'][0]['val_a'];

            $dato['anio1'] = date("Y", strtotime($dato['val_a']));
            $dato['mes1'] = date("m", strtotime($dato['val_a']));
            $dato['dia1'] = date("d", strtotime($dato['val_a']));
            $fecha_actual = date("Y/m/d");

            $dato['anio2'] = date("Y", strtotime($fecha_actual));
            $dato['mes2'] = date("m", strtotime($fecha_actual));
            $dato['dia2'] = date("d", strtotime($fecha_actual));

            $timestamp1 = mktime(0, 0, 0, $dato['mes1'], $dato['dia1'], $dato['anio1']);
            $timestamp2 = mktime(4, 12, 0, $dato['mes2'], $dato['dia2'], $dato['anio2']);

            $segundos_diferencia = $timestamp1 - $timestamp2;
            $dias_diferencia = $segundos_diferencia / (60 * 60 * 24);
            $dias_diferencia = abs($dias_diferencia);

            if ($en_bd == 0) {
                if ($dato['val_a'] != "") {
                    $dato['estado'] = 51;
                } else if ($dato['val_a'] == "") {
                    $dato['estado'] = 49;
                }
            } else {
                if ($dias_diferencia >= 0) {
                    $dato['estado'] = 48;
                } else if ($dias_diferencia < 0) {
                    $dato['estado'] = 50;
                }
            }
            $this->Model_IFV->update_estado_centro_xdireccion($dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_agregar_direccion_temporal()
    {
        if ($this->session->userdata('usuario')) {
            //$dato['id_centro']=$id_centro;
            $dato['list_departamento'] = $this->Admin_model->get_list_departamento();
            $this->load->view('view_IFV/centro/modal_preguardar_direccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_agregar_direccion($id_centro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_centro'] = $id_centro;
            $dato['get_id'] = $this->Model_IFV->get_id_centro($id_centro);
            $dato['list_departamento'] = $this->Admin_model->get_list_departamento();
            $this->load->view('view_IFV/centro/modal_agregar_direccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Agregar_Direccion_Centro()
    {
        if ($this->session->userdata('usuario')) {

            $dato['id_centro'] = $this->input->post("id_centro");
            $dato['id_ultimo_historial'] = $this->input->post("id_ultimo_historial");
            $id_centro = $this->input->post("id_centro");
            $dato['direccion'] = $this->input->post("direccion");
            $dato['departamento'] = $this->input->post("departamento");
            $dato['provincia'] = $this->input->post("provincia");
            $dato['distrito'] = $this->input->post("distrito");
            $dato['cp'] = $this->input->post("cp");
            $dato['contacto_dir'] = $this->input->post("contacto_dir");
            $dato['celular_dir'] = $this->input->post("celular_dir");
            $dato['tel_fijo'] = $this->input->post("tel_fijo");
            $dato['correo_dir'] = $this->input->post("correo_dir");
            $cant = count($this->Model_IFV->valida_insert_direccion_centro($dato));
            if ($cant > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_direccion_centro($dato);

                $dato['get_id'] = $this->Model_IFV->get_id_centro($id_centro);
                $en_bd = count($this->Model_IFV->get_list_direccion_centro_cp($id_centro));

                $dato['val_a'] = $dato['get_id'][0]['val_a'];

                $dato['anio1'] = date("Y", strtotime($dato['val_a']));
                $dato['mes1'] = date("m", strtotime($dato['val_a']));
                $dato['dia1'] = date("d", strtotime($dato['val_a']));
                $fecha_actual = date("Y/m/d");

                $dato['anio2'] = date("Y", strtotime($fecha_actual));
                $dato['mes2'] = date("m", strtotime($fecha_actual));
                $dato['dia2'] = date("d", strtotime($fecha_actual));

                $timestamp1 = mktime(0, 0, 0, $dato['mes1'], $dato['dia1'], $dato['anio1']);
                $timestamp2 = mktime(4, 12, 0, $dato['mes2'], $dato['dia2'], $dato['anio2']);

                $segundos_diferencia = $timestamp1 - $timestamp2;
                $dias_diferencia = $segundos_diferencia / (60 * 60 * 24);
                $dias_diferencia = abs($dias_diferencia);

                if ($en_bd == 0) {
                    if ($dato['val_a'] != "") {
                        $dato['estado'] = 51;
                    } else if ($dato['val_a'] == "") {
                        $dato['estado'] = 49;
                    }
                } else {
                    if ($dias_diferencia >= 0) {
                        $dato['estado'] = 48;
                    } else if ($dias_diferencia < 0) {
                        $dato['estado'] = 50;
                    }
                }
                $this->Model_IFV->update_estado_centro_xdireccion($dato);

            }

        } else {
            redirect('/login');
        }
    }

    public function Descargar_Imagen_Centro($id_centro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_centro_archivo($id_centro);
            $image = $dato['get_file'][0]['documento'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['documento']));
        } else {
            redirect('');
        }
    }

    public function Delete_Imagen_Centro()
    {
        $id_centro = $this->input->post('image_id');
        $dato['get_file'] = $this->Model_IFV->get_id_centro_archivo($id_centro);

        if (file_exists($dato['get_file'][0]['documento'])) {
            unlink($dato['get_file'][0]['documento']);
        }
        $this->Model_IFV->delete_centro_archivo($id_centro);
    }

    public function Modal_archivo_centro($id_centro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_centro'] = $id_centro;
            $this->load->view('view_IFV/centro/modal_archivo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_archivo_centro()
    {
        $dato['id_centro'] = $this->input->post("id_centro");
        $id_centro = $this->input->post("id_centro");
        $dato['archivo'] = $this->input->post("archivo");
        $dato['nombre'] = $this->input->post("nombre");
        $dato['get_id'] = $this->Model_IFV->get_id_centro($id_centro);
        $dato['referencia'] = $dato['get_id'][0]['referencia'];
        $contar = count($this->Model_IFV->valida_centro_archivo($dato));
        $contar2 = count($this->Model_IFV->valida_centro_archivo2($dato));

        if ($contar > 0) {
            echo "error";
        } elseif ($contar2 > 4) {
            echo "1";
        } else {
            $this->Model_IFV->insert_archivo_centro($dato);
        }
    }

    public function Descargar_Documento_Centro($id_historial)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_documento_historial_centro($id_historial);
            $image = $dato['get_file'][0]['archivo'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['archivo']));
        } else {
            redirect('');
        }
    }

    public function Delete_Documento_Centro()
    {
        $id_historial = $this->input->post('image_id');
        $dato['get_file'] = $this->Model_IFV->get_id_documento_historial_centro($id_historial);

        if (file_exists($dato['get_file'][0]['archivo'])) {
            unlink($dato['get_file'][0]['archivo']);
        }
        $this->Model_IFV->delete_centro_documento_historial($id_historial);
    }

    public function Modal_Accion($id_centro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_centro'] = $id_centro;
            $dato['list_accion'] = $this->Model_IFV->get_list_accion_centro();
            $dato['id_status_mae'] = 8;
            $dato['list_estado'] = $this->Model_snappy->get_list_estado_mae($dato);
            $this->load->view('view_IFV/centro/modal_accion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_historial_centro()
    {
        $dato['id_centro'] = $this->input->post("id_centro");
        $dato['fecha_accion'] = $this->input->post("fecha_accion");
        $dato['id_accion'] = $this->input->post("id_accion");
        $dato['id_status'] = $this->input->post("id_status");
        $dato['observacion'] = $this->input->post("observacion");
        $dato['comentario'] = $this->input->post("comentario");
        $cont1 = count($this->Model_IFV->valida_agregar_accion_centro($dato));
        $cont2 = count($this->Model_IFV->valida_agregar_accion_centro_2($dato));
        if ($cont1 > 0) {
            echo "error";
        } elseif ($cont2 > 0) {
            echo "error2";
        } else {
            $this->Model_IFV->insert_centro_historial($dato);
        }
    }

    public function Delete_historial_centro()
    {
        $id_centro_historial = $this->input->post("id_historial");
        $this->Model_IFV->delete_centro_historial($id_centro_historial);
    }

    public function Modal_Update_Historial_Centro($id_centro_historial, $id_centro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_centro_historial'] = $id_centro_historial;
            $dato['id_centro'] = $id_centro;
            $dato['get_id'] = $this->Model_IFV->get_id_historial_centro($id_centro_historial);
            $dato['list_accion'] = $this->Model_IFV->get_list_accion_centro();
            $dato['id_status_mae'] = 8;
            $dato['list_estado'] = $this->Model_snappy->get_list_estado_mae($dato);

            $this->load->view('view_IFV/centro/modal_update_historial', $dato);
        } else {
            //$this->load->view('view_IFV/asistencia/login');
            redirect('/login');
        }
    }

    public function Update_Historial_Centro()
    {
        if ($this->session->userdata('usuario')) {

            $dato['id_centro'] = $this->input->post("id_centro");
            $dato['id_centro_historial'] = $this->input->post("id_centro_historial");
            $dato['fecha_accion'] = $this->input->post("fecha_accion");
            $dato['comentario'] = $this->input->post("comentario");
            $dato['observacion'] = $this->input->post("observacion");
            $dato['id_accion'] = $this->input->post("id_accion");
            $dato['id_status'] = $this->input->post("id_status");

            $cont1 = count($this->Model_IFV->valida_agregar_accion_centro_e($dato));
            $cont2 = count($this->Model_IFV->valida_agregar_accion_centro_2e($dato));
            if ($cont1 > 0) {
                echo "error";
            } elseif ($cont2 > 0) {
                echo "error2";
            } else {
                $this->Model_IFV->update_centro_historial($dato);
            }

        } else {
            redirect('/login');
        }
    }

    //---------------------------------LISTA----------------------------
    public function Registro()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/registro/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Registro()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_registro'] = $this->Model_IFV->get_list_registro_fv();
            $this->load->view('view_IFV/registro/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Registro()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            $dato['list_mes'] = $this->Model_IFV->get_list_mes();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/registro/registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Cambiar_Estado()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id'] = $this->input->post("id");
            $dato['id_registro'] = $this->input->post("id_registro");
            if ($dato['id_registro'] != "") {
                $dato['get_id'] = $this->Model_IFV->get_list_registro_fv($dato['id_registro']);
            }
            $this->load->view('view_IFV/registro/boton', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Registro()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['ref_mes'] = $this->input->post("ref_mes");
            $dato['ref_anio'] = $this->input->post("ref_anio");
            $dato['ref_lugar'] = $this->input->post("ref_lugar");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");

            $dato['grupo'] = $this->input->post("grupo");
            $dato['fecha_envio'] = $this->input->post("fecha_envio");
            $dato['n_alumnos'] = $this->input->post("n_alumnos");
            $dato['producto'] = $this->input->post("producto");
            $dato['observaciones'] = $this->input->post("observaciones");
            $dato['primer_estado'] = $this->input->post("primer_estado");
            $dato['segundo_estado'] = $this->input->post("segundo_estado");

            //$dato['segundo_estado']= 1;

            /*if($_FILES["documento_enviado"]["name"]!=""){
                $dato['segundo_estado']= 2;
            }*/

            if ($_FILES["tabla_alumno_arpay"]["name"] != "" && $_FILES["registro_apuntes"]["name"] != "" && $_FILES["documento_enviado"]["name"] != "" && $_FILES["documento_recibido"]["name"] != "") {
                $dato['segundo_estado'] = 3;
            }

            if ($_FILES["tabla_alumno_arpay"]["name"] != "") {
                $config['upload_path'] = './registros_fv/';

                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                }
                $config["allowed_types"] = 'xls|xlsx|pdf|jpg|png|jpeg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["tabla_alumno_arpay"]["name"];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $nombre = 'tabla_alumno_arpay_' . date('d-m-Y') . '_' . rand(1, 999) . '.' . $ext;

                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["tabla_alumno_arpay"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["tabla_alumno_arpay"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["tabla_alumno_arpay"]["error"];
                $_FILES["file"]["size"] = $_FILES["tabla_alumno_arpay"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['tabla_alumno_arpay'] = "registros_fv/" . $nombre;
                }
            }

            if ($_FILES["registro_apuntes"]["name"] != "") {
                $config['upload_path'] = './registros_fv/';

                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                }
                $config["allowed_types"] = 'xls|xlsx|pdf|jpg|png|jpeg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["registro_apuntes"]["name"];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $nombre = 'registro_apuntes_' . date('d-m-Y') . '_' . rand(1, 999) . '.' . $ext;

                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["registro_apuntes"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["registro_apuntes"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["registro_apuntes"]["error"];
                $_FILES["file"]["size"] = $_FILES["registro_apuntes"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['registro_apuntes'] = "registros_fv/" . $nombre;
                }
            }

            if ($_FILES["documento_enviado"]["name"] != "") {
                $config['upload_path'] = './registros_fv/';

                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                }
                $config["allowed_types"] = 'xls|xlsx|pdf|jpg|png|jpeg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["documento_enviado"]["name"];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $nombre = 'documento_enviado_' . date('d-m-Y') . '_' . rand(1, 999) . '.' . $ext;

                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["documento_enviado"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["documento_enviado"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["documento_enviado"]["error"];
                $_FILES["file"]["size"] = $_FILES["documento_enviado"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['documento_enviado'] = "registros_fv/" . $nombre;
                }
            }

            if ($_FILES["documento_recibido"]["name"] != "") {
                $config['upload_path'] = './registros_fv/';

                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                }
                $config["allowed_types"] = 'xls|xlsx|pdf|jpg|png|jpeg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["documento_recibido"]["name"];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $nombre = 'documento_recibido_' . date('d-m-Y') . '_' . rand(1, 999) . '.' . $ext;

                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["documento_recibido"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["documento_recibido"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["documento_recibido"]["error"];
                $_FILES["file"]["size"] = $_FILES["documento_recibido"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['documento_recibido'] = "registros_fv/" . $nombre;
                }
            }

            $this->Model_IFV->insert_registro($dato);
        } else {
            redirect('/login');
        }
    }

    public function Editar_Registro($id_registro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_registro_fv($id_registro);
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            $dato['list_mes'] = $this->Model_IFV->get_list_mes();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/registro/editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Div_Editar_Registro($id_registro)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_registro_fv($id_registro);
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            $dato['list_mes'] = $this->Model_IFV->get_list_mes();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();

            $this->load->view('view_IFV/registro/div_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Descargar_Documento_Registro($id_registro, $documento)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_list_registro_fv($id_registro);
            if ($documento == 1) {
                $image = $dato['get_file'][0]['tabla_alumno_arpay'];
            } elseif ($documento == 2) {
                $image = $dato['get_file'][0]['registro_apuntes'];
            } elseif ($documento == 3) {
                $image = $dato['get_file'][0]['documento_enviado'];
            } else {
                $image = $dato['get_file'][0]['documento_recibido'];
            }
            var_dump($image);
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($image));
        } else {
            redirect('');
        }
    }

    public function Update_Registro()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_registro'] = $this->input->post("id_registro");
            $dato['tipo'] = $this->input->post("tipo");
            $dato['ref_mes'] = $this->input->post("ref_mes");
            $dato['ref_anio'] = $this->input->post("ref_anio");
            $dato['ref_lugar'] = $this->input->post("ref_lugar");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['grupo'] = $this->input->post("grupo");
            $dato['fecha_envio'] = $this->input->post("fecha_envio");
            $dato['n_alumnos'] = $this->input->post("n_alumnos");
            $dato['producto'] = $this->input->post("producto");
            $dato['observaciones'] = $this->input->post("observaciones");
            $dato['primer_estado'] = $this->input->post("primer_estado");
            $dato['segundo_estado'] = $this->input->post("segundo_estado");
            $dato['tabla_alumno_arpay'] = $this->input->post("tabla_alumno_arpay_actual");
            $dato['registro_apuntes'] = $this->input->post("registro_apuntes_actual");
            $dato['documento_enviado'] = $this->input->post("documento_enviado_actual");
            $dato['documento_recibido'] = $this->input->post("documento_recibido_actual");

            if ($_FILES["tabla_alumno_arpay"]["name"] != "") {
                if (file_exists($dato['tabla_alumno_arpay'])) {
                    unlink($dato['tabla_alumno_arpay']);
                }

                $config['upload_path'] = './registros_fv/';

                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                }
                $config["allowed_types"] = 'xls|xlsx|pdf|jpg|png|jpeg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["tabla_alumno_arpay"]["name"];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $nombre = 'tabla_alumno_arpay_' . date('d-m-Y') . '_' . rand(1, 999) . '.' . $ext;

                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["tabla_alumno_arpay"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["tabla_alumno_arpay"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["tabla_alumno_arpay"]["error"];
                $_FILES["file"]["size"] = $_FILES["tabla_alumno_arpay"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['tabla_alumno_arpay'] = "registros_fv/" . $nombre;
                }
            }

            if ($_FILES["registro_apuntes"]["name"] != "") {
                if (file_exists($dato['registro_apuntes'])) {
                    unlink($dato['registro_apuntes']);
                }

                $config['upload_path'] = './registros_fv/';

                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                }
                $config["allowed_types"] = 'xls|xlsx|pdf|jpg|png|jpeg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["registro_apuntes"]["name"];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $nombre = 'registro_apuntes_' . date('d-m-Y') . '_' . rand(1, 999) . '.' . $ext;

                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["registro_apuntes"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["registro_apuntes"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["registro_apuntes"]["error"];
                $_FILES["file"]["size"] = $_FILES["registro_apuntes"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['registro_apuntes'] = "registros_fv/" . $nombre;
                }
            }

            if ($_FILES["documento_enviado"]["name"] != "") {
                if (file_exists($dato['documento_enviado'])) {
                    unlink($dato['documento_enviado']);
                }

                $config['upload_path'] = './registros_fv/';

                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                }
                $config["allowed_types"] = 'xls|xlsx|pdf|jpg|png|jpeg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["documento_enviado"]["name"];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $nombre = 'documento_enviado_' . date('d-m-Y') . '_' . rand(1, 999) . '.' . $ext;

                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["documento_enviado"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["documento_enviado"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["documento_enviado"]["error"];
                $_FILES["file"]["size"] = $_FILES["documento_enviado"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['documento_enviado'] = "registros_fv/" . $nombre;
                }
            }

            if ($_FILES["documento_recibido"]["name"] != "") {
                if (file_exists($dato['documento_recibido'])) {
                    unlink($dato['documento_recibido']);
                }

                $config['upload_path'] = './registros_fv/';

                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                }
                $config["allowed_types"] = 'xls|xlsx|pdf|jpg|png|jpeg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["documento_recibido"]["name"];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $nombre = 'documento_recibido_' . date('d-m-Y') . '_' . rand(1, 999) . '.' . $ext;

                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["documento_recibido"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["documento_recibido"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["documento_recibido"]["error"];
                $_FILES["file"]["size"] = $_FILES["documento_recibido"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['documento_recibido'] = "registros_fv/" . $nombre;
                }
            }

            //$dato['segundo_estado']= 1;

            /*if($dato['documento_enviado']!=""){
                $dato['segundo_estado']= 2;
            }*/

            if ($dato['tabla_alumno_arpay'] != "" && $dato['registro_apuntes'] != "" && $dato['documento_enviado'] != "" && $dato['documento_recibido'] != "") {
                $dato['segundo_estado'] = 3;
            }

            $this->Model_IFV->update_registro($dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Registro()
    {
        if ($this->session->userdata('usuario')) {
            $id_registro = $this->input->post("id_registro");
            $this->Model_IFV->delete_registro($id_registro);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Registro()
    {
        $list_registro_fv = $this->Model_IFV->get_list_registro_fv();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:N1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:N1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Registros');

        $sheet->setAutoFilter('A1:N1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(35);
        $sheet->getColumnDimension('D')->setWidth(25);
        $sheet->getColumnDimension('E')->setWidth(18);
        $sheet->getColumnDimension('F')->setWidth(18);
        $sheet->getColumnDimension('G')->setWidth(35);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(35);
        $sheet->getColumnDimension('J')->setWidth(20);
        $sheet->getColumnDimension('K')->setWidth(20);
        $sheet->getColumnDimension('L')->setWidth(20);
        $sheet->getColumnDimension('M')->setWidth(20);
        $sheet->getColumnDimension('N')->setWidth(15);

        $sheet->getStyle('A1:N1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:N1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:N1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Tipo');
        $sheet->setCellValue("B1", 'Ref');
        $sheet->setCellValue("C1", 'Especialidad');
        $sheet->setCellValue("D1", 'Grupo');
        $sheet->setCellValue("E1", 'Fecha Envio');
        $sheet->setCellValue("F1", 'Nr. Alumnos');
        $sheet->setCellValue("G1", 'Producto');
        $sheet->setCellValue("H1", 'Estado');
        $sheet->setCellValue("I1", 'Observaciones');
        $sheet->setCellValue("J1", 'Tabla Alumnos Arpay');
        $sheet->setCellValue("K1", 'Registro (apuntes)');
        $sheet->setCellValue("L1", 'Documento Enviado');
        $sheet->setCellValue("M1", 'Documento Recibido');
        $sheet->setCellValue("N1", 'Estado');

        $contador = 1;

        foreach ($list_registro_fv as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:N{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:N{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:N{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_tipo']);
            $sheet->setCellValue("B{$contador}", $list['referencia']);
            $sheet->setCellValue("C{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("D{$contador}", $list['grupo']);

            if ($list['fec_envio'] != "") {
                $sheet->setCellValue("E{$contador}", Date::PHPToExcel($list['fec_envio']));
                $sheet->getStyle("E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("E{$contador}", "");
            }

            $sheet->setCellValue("F{$contador}", $list['n_alumnos']);
            $sheet->setCellValue("G{$contador}", $list['producto']);
            $sheet->setCellValue("H{$contador}", $list['primer_estado']);
            $sheet->setCellValue("I{$contador}", $list['observaciones']);
            $sheet->setCellValue("J{$contador}", $list['t_archivo']);
            $sheet->setCellValue("K{$contador}", $list['r_archivo']);
            $sheet->setCellValue("L{$contador}", $list['de_archivo']);
            $sheet->setCellValue("M{$contador}", $list['dr_archivo']);
            $sheet->setCellValue("N{$contador}", $list['segundo_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Registros (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //----------------------------------------------------------ESPECIALIDAD-------------------------------------
    public function Especialidad()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_especialidad'] = $this->Model_IFV->list_especialidad();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/especialidad/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Especialidad()
    {
        if ($this->session->userdata('usuario')) {
            $this->load->view('view_IFV/especialidad/modal_registrar');
        } else {
            redirect('/login');
        }
    }

    public function Insert_Especialidad()
    {
        $dato['licenciamiento'] = $this->input->post("licenciamiento_i");
        $dato['abreviatura'] = $this->input->post("abreviatura_i");
        $dato['nom_especialidad'] = $this->input->post("nom_especialidad_i");
        $dato['nmodulo'] = $this->input->post("nmodulo_i");

        $valida = $this->Model_IFV->valida_insert_especialidad($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_especialidad($dato);
        }
    }

    public function Modal_Update_Especialidad($id_especialidad)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->list_especialidad($id_especialidad);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/especialidad/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Especialidad_Mod()
    {
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['licenciamiento'] = $this->input->post("licenciamiento_u");
        $dato['abreviatura'] = $this->input->post("abreviatura_u");
        $dato['nom_especialidad'] = $this->input->post("nom_especialidad_u");
        $dato['nmodulo'] = $this->input->post("nmodulo_u");
        $dato['estado'] = $this->input->post("estado_u");

        $valida = $this->Model_IFV->valida_update_especialidad($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_especialidad($dato);
        }
    }

    public function Delete_Especialidad()
    {
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $this->Model_IFV->delete_especialidad($dato);
    }

    public function Excel_Especialidad()
    {
        $list_especialidad = $this->Model_IFV->list_especialidad();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:E1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:E1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Especialidad');

        $sheet->setAutoFilter('A1:E1');

        $sheet->getColumnDimension('A')->setWidth(20);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(50);
        $sheet->getColumnDimension('D')->setWidth(18);
        $sheet->getColumnDimension('E')->setWidth(15);

        $sheet->getStyle('A1:E1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:E1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:E1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Licenciamiento');
        $sheet->setCellValue("B1", 'Código');
        $sheet->setCellValue("C1", 'Nombre');
        $sheet->setCellValue("D1", 'N° Módulos');
        $sheet->setCellValue("E1", 'Estado');

        $contador = 1;

        foreach ($list_especialidad as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:E{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_licenciamiento']);
            $sheet->setCellValue("B{$contador}", $list['abreviatura']);
            $sheet->setCellValue("C{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("D{$contador}", $list['nmodulo']);
            $sheet->setCellValue("E{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Especialidad (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Detalle_Especialidad($id_especialidad)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->list_especialidad($id_especialidad);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/especialidad/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Area()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['list_area'] = $this->Model_IFV->get_list_area($dato['id_especialidad']);
            $this->load->view('view_IFV/especialidad/lista_area', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Area($id_especialidad)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $id_especialidad;
            $this->load->view('view_IFV/especialidad/modal_registrar_area', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Area()
    {
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['codigo'] = $this->input->post("codigo_i");
        $dato['nombre'] = $this->input->post("nombre_i");
        $dato['orden'] = $this->input->post("orden_i");

        $valida = $this->Model_IFV->valida_insert_area($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_area($dato);
        }
    }

    public function Modal_Update_Area($id_area)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_area($id_area);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/especialidad/modal_editar_area', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Area()
    {
        $dato['id_area'] = $this->input->post("id_area");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['codigo'] = $this->input->post("codigo_u");
        $dato['nombre'] = $this->input->post("nombre_u");
        $dato['orden'] = $this->input->post("orden_u");
        $dato['estado'] = $this->input->post("estado_u");

        $valida = $this->Model_IFV->valida_update_area($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_area($dato);
        }
    }

    public function Delete_Area()
    {
        $dato['id_area'] = $this->input->post("id_area");
        $this->Model_IFV->delete_area($dato);
    }

    public function Excel_Area_Especialidad($id_especialidad)
    {
        $list_area = $this->Model_IFV->get_list_area($id_especialidad);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:D1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:D1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Áreas');

        $sheet->setAutoFilter('A1:D1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(40);
        $sheet->getColumnDimension('C')->setWidth(12);
        $sheet->getColumnDimension('D')->setWidth(15);

        $sheet->getStyle('A1:D1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:D1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:D1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Área');
        $sheet->setCellValue("C1", 'Orden');
        $sheet->setCellValue("D1", 'Estado');

        $contador = 1;

        foreach ($list_area as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:D{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['codigo']);
            $sheet->setCellValue("B{$contador}", $list['nombre']);
            $sheet->setCellValue("C{$contador}", $list['orden']);
            $sheet->setCellValue("D{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Áreas (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Modulo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['list_modulo'] = $this->Model_IFV->get_list_modulo($dato['id_especialidad']);
            $this->load->view('view_IFV/especialidad/lista_modulo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Modulo($id_especialidad)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $id_especialidad;
            $this->load->view('view_IFV/especialidad/modal_registrar_modulo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Modulo()
    {
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['modulo'] = $this->input->post("modulo_i");

        $total = count($this->Model_IFV->valida_insert_modulo($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_modulo($dato);
        }
    }

    public function Modal_Update_Modulo($id_modulo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_modulo($id_modulo);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/especialidad/modal_editar_modulo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Modulo()
    {
        $dato['id_modulo'] = $this->input->post("id_modulo");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['modulo'] = $this->input->post("modulo_u");
        $dato['estado'] = $this->input->post("estado_u");

        $total = count($this->Model_IFV->valida_update_modulo($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_modulo($dato);
        }
    }

    public function Delete_Modulo()
    {
        $dato['id_modulo'] = $this->input->post("id_modulo");
        $this->Model_IFV->delete_modulo($dato);
    }

    public function Excel_Modulo_Especialidad($id_especialidad)
    {
        $list_modulo = $this->Model_IFV->get_list_modulo($id_especialidad);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:B1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:B1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Módulos');

        $sheet->setAutoFilter('A1:B1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);

        $sheet->getStyle('A1:B1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:B1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:B1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Módulo');
        $sheet->setCellValue("B1", 'Estado');

        $contador = 1;

        foreach ($list_modulo as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['modulo']);
            $sheet->setCellValue("B{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Módulos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Ciclo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['list_ciclo'] = $this->Model_IFV->get_list_ciclo($dato['id_especialidad']);
            $this->load->view('view_IFV/especialidad/lista_ciclo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Ciclo($id_especialidad)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $id_especialidad;
            $dato['list_modulo'] = $this->Model_IFV->get_list_combo_modulo($id_especialidad);
            $this->load->view('view_IFV/especialidad/modal_registrar_ciclo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Ciclo()
    {
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['id_modulo'] = $this->input->post("id_modulo_i");
        $dato['ciclo'] = $this->input->post("ciclo_i");

        $total = count($this->Model_IFV->valida_insert_ciclo($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_ciclo($dato);
        }
    }

    public function Modal_Update_Ciclo($id_ciclo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_ciclo($id_ciclo);
            $dato['list_modulo'] = $this->Model_IFV->get_list_combo_modulo($dato['get_id'][0]['id_especialidad']);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/especialidad/modal_editar_ciclo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Ciclo()
    {
        $dato['id_ciclo'] = $this->input->post("id_ciclo");
        $dato['id_modulo'] = $this->input->post("id_modulo_u");
        $dato['ciclo'] = $this->input->post("ciclo_u");
        $dato['estado'] = $this->input->post("estado_u");

        $total = count($this->Model_IFV->valida_update_ciclo($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_ciclo($dato);
        }
    }

    public function Delete_Ciclo()
    {
        $dato['id_ciclo'] = $this->input->post("id_ciclo");
        $this->Model_IFV->delete_ciclo($dato);
    }

    public function Excel_Ciclo_Especialidad($id_especialidad)
    {
        $list_ciclo = $this->Model_IFV->get_list_ciclo($id_especialidad);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:C1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:C1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Ciclos');

        $sheet->setAutoFilter('A1:C1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);

        $sheet->getStyle('A1:C1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:C1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:C1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Módulo');
        $sheet->setCellValue("B1", 'Ciclo');
        $sheet->setCellValue("C1", 'Estado');

        $contador = 1;

        foreach ($list_ciclo as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['modulo']);
            $sheet->setCellValue("B{$contador}", $list['ciclo']);
            $sheet->setCellValue("C{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Ciclos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Turno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['list_turno'] = $this->Model_IFV->get_list_turno($dato['id_especialidad']);
            $this->load->view('view_IFV/especialidad/lista_turno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Turno($id_especialidad)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $id_especialidad;
            $dato['list_hora'] = $this->Model_IFV->get_list_hora_combo($id_especialidad);
            $this->load->view('view_IFV/especialidad/modal_registrar_turno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Turno()
    {
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['id_hora'] = $this->input->post("id_hora_i");

        $get_id = $this->Model_IFV->get_list_hora($dato['id_hora']);
        $dato['nom_turno'] = $get_id[0]['nom_turno'];

        $total = count($this->Model_IFV->valida_insert_turno($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_turno($dato);
        }
    }

    public function Modal_Update_Turno($id_turno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_turno($id_turno);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/especialidad/modal_editar_turno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Turno()
    {
        $dato['id_turno'] = $this->input->post("id_turno");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['nom_turno'] = $this->input->post("nom_turno_u");
        $dato['estado'] = $this->input->post("estado_u");

        $total = count($this->Model_IFV->valida_update_turno($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_turno($dato);
        }
    }

    public function Delete_Turno()
    {
        $dato['id_turno'] = $this->input->post("id_turno");
        $this->Model_IFV->delete_turno($dato);
    }

    public function Excel_Turno_Especialidad($id_especialidad)
    {
        $list_turno = $this->Model_IFV->get_list_turno($id_especialidad);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:E1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:E1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Turno');

        $sheet->setAutoFilter('A1:E1');

        $sheet->getColumnDimension('A')->setWidth(40);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);

        $sheet->getStyle('A1:E1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:E1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:E1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Nombre');
        $sheet->setCellValue("B1", 'Desde');
        $sheet->setCellValue("C1", 'Hasta');
        $sheet->setCellValue("D1", 'Tolerancia');
        $sheet->setCellValue("E1", 'Estado');

        $contador = 1;

        foreach ($list_turno as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:E{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_turno']);
            $sheet->setCellValue("B{$contador}", $list['desde']);
            $sheet->setCellValue("C{$contador}", $list['hasta']);
            $sheet->setCellValue("D{$contador}", $list['tolerancia']);
            $sheet->setCellValue("E{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Turno (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Unidad_Didactica()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['list_unidad_didactica'] = $this->Model_IFV->get_list_unidad_didactica($dato['id_especialidad']);
            $this->load->view('view_IFV/especialidad/lista_unidad_didactica', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Unidad_Didactica($id_especialidad)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $id_especialidad;
            $dato['list_modulo'] = $this->Model_IFV->get_list_combo_modulo($id_especialidad);
            $dato['list_competencia'] = $this->Model_IFV->get_list_competencia();
            $dato['list_precedencia'] = $this->Model_IFV->get_list_unidad_didactica_combo($id_especialidad);
            $dato['list_reemplazo'] = $this->Model_IFV->get_list_unidad_didactica_inactivo($id_especialidad);
            $this->load->view('view_IFV/especialidad/modal_registrar_unidad_didactica', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Unidad_Didactica()
    {
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['id_modulo'] = $this->input->post("id_modulo_i");
        $dato['id_competencia'] = $this->input->post("id_competencia_i");
        $dato['cod_unidad_didactica'] = $this->input->post("cod_unidad_didactica_i");
        $dato['nom_unidad_didactica'] = $this->input->post("nom_unidad_didactica_i");
        $dato['creditos'] = $this->input->post("creditos_i");
        $dato['puntaje_minimo'] = $this->input->post("puntaje_minimo_i");
        $dato['ciclo_academico'] = $this->input->post("ciclo_academico_i");
        $dato['id_precedencia'] = $this->input->post("id_precedencia_i");
        $dato['id_reemplazo'] = $this->input->post("id_reemplazo_i");
        $dato['id_profesor'] = $this->input->post("id_profesor_i");

        $total = count($this->Model_IFV->valida_insert_unidad_didactica($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_unidad_didactica($dato);
        }
    }

    public function Modal_Update_Unidad_Didactica($id_unidad_didactica)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_unidad_didactica($id_unidad_didactica);
            $dato['list_modulo'] = $this->Model_IFV->get_list_combo_modulo($dato['get_id'][0]['id_especialidad']);
            $dato['list_competencia'] = $this->Model_IFV->get_list_competencia();
            $dato['list_precedencia'] = $this->Model_IFV->get_list_unidad_didactica_combo($dato['get_id'][0]['id_especialidad']);
            $dato['list_reemplazo'] = $this->Model_IFV->get_list_unidad_didactica_inactivo($dato['get_id'][0]['id_especialidad']);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/especialidad/modal_editar_unidad_didactica', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Unidad_Didactica()
    {
        $dato['id_unidad_didactica'] = $this->input->post("id_unidad_didactica");
        $dato['id_modulo'] = $this->input->post("id_modulo_u");
        $dato['id_competencia'] = $this->input->post("id_competencia_u");
        $dato['cod_unidad_didactica'] = $this->input->post("cod_unidad_didactica_u");
        $dato['nom_unidad_didactica'] = $this->input->post("nom_unidad_didactica_u");
        $dato['creditos'] = $this->input->post("creditos_u");
        $dato['puntaje_minimo'] = $this->input->post("puntaje_minimo_u");
        $dato['ciclo_academico'] = $this->input->post("ciclo_academico_u");
        $dato['id_precedencia'] = $this->input->post("id_precedencia_u");
        $dato['id_reemplazo'] = $this->input->post("id_reemplazo_u");
        $dato['id_profesor'] = $this->input->post("id_profesor_u");
        $dato['estado'] = $this->input->post("estado_u");

        $total = count($this->Model_IFV->valida_update_unidad_didactica($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_unidad_didactica($dato);
        }
    }

    public function Delete_Unidad_Didactica()
    {
        $dato['id_unidad_didactica'] = $this->input->post("id_unidad_didactica");
        $this->Model_IFV->delete_unidad_didactica($dato);
    }

    public function Excel_Unidad_Didactica_Especialidad($id_especialidad)
    {
        $list_unidad_didactica = $this->Model_IFV->get_list_unidad_didactica($id_especialidad);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:H1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:H1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Unidades Didácticas (Lista)');

        $sheet->setAutoFilter('A1:H1');

        $sheet->getColumnDimension('A')->setWidth(18);
        $sheet->getColumnDimension('B')->setWidth(18);
        $sheet->getColumnDimension('C')->setWidth(18);
        $sheet->getColumnDimension('D')->setWidth(60);
        $sheet->getColumnDimension('E')->setWidth(20);
        $sheet->getColumnDimension('F')->setWidth(20);
        $sheet->getColumnDimension('G')->setWidth(20);
        $sheet->getColumnDimension('H')->setWidth(15);

        $sheet->getStyle('A1:H1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:H1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:H1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Módulo');
        $sheet->setCellValue("B1", 'Competencia');
        $sheet->setCellValue("C1", 'Código');
        $sheet->setCellValue("D1", 'Nombre');
        $sheet->setCellValue("E1", 'Créditos');
        $sheet->setCellValue("F1", 'Puntaje Mínimo');
        $sheet->setCellValue("G1", 'Ciclo Académico');
        $sheet->setCellValue("H1", 'Estado');

        $contador = 1;

        foreach ($list_unidad_didactica as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:H{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['modulo']);
            $sheet->setCellValue("B{$contador}", $list['nom_competencia']);
            $sheet->setCellValue("C{$contador}", $list['cod_unidad_didactica']);
            $sheet->setCellValue("D{$contador}", $list['nom_unidad_didactica']);
            $sheet->setCellValue("E{$contador}", $list['creditos']);
            $sheet->setCellValue("F{$contador}", $list['puntaje_minimo']);
            $sheet->setCellValue("G{$contador}", $list['ciclo_academico']);
            $sheet->setCellValue("H{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Unidades Didácticas (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Horas_EFSRT()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['list_horas_efsrt'] = $this->Model_IFV->get_list_horas_efsrt($dato['id_especialidad']);
            $this->load->view('view_IFV/especialidad/efsrt/list_horas_efsrt', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Horas_EFSRT($id_especialidad)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $id_especialidad;
            $dato['list_modulo'] = $this->Model_IFV->get_list_combo_modulo($id_especialidad);
            $this->load->view('view_IFV/especialidad/efsrt/modal_registrar_horas', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Horas_EFSRT()
    {
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['id_modulo'] = $this->input->post("id_modulo_i");
        $dato['horas'] = $this->input->post("horas_i");

        $total = count($this->Model_IFV->valida_insert_horas($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_horas($dato);
        }
    }

    public function Modal_Update_Horas_EFSRT($id)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_horas($id);
            $dato['list_modulo'] = $this->Model_IFV->get_list_combo_modulo($dato['get_id'][0]['id_especialidad']);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/especialidad/efsrt/modal_editar_horas', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Horas_EFSRT()
    {
        $dato['id_horas'] = $this->input->post("id_horas");
        $dato['id_modulo'] = $this->input->post("id_modulo_u");
        $dato['horas'] = $this->input->post("horas_u");
        $dato['estado'] = $this->input->post("estado_u");

        $total = count($this->Model_IFV->valida_update_horas($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_horas($dato);
        }
    }

    public function Delete_Horas_EFSRT()
    {
        $dato['id_horas'] = $this->input->post("id_horas");
        $this->Model_IFV->delete_horas($dato);
    }

    public function Excel_Horas_EFSRT($id_especialidad)
    {
        $list_horas = $this->Model_IFV->get_list_horas_efsrt($id_especialidad);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:C1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:C1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Ciclos');

        $sheet->setAutoFilter('A1:C1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);

        $sheet->getStyle('A1:C1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:C1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:C1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Módulo');
        $sheet->setCellValue("B1", 'Horas');
        $sheet->setCellValue("C1", 'Estado');

        $contador = 1;

        foreach ($list_horas as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['modulo']);
            $sheet->setCellValue("B{$contador}", $list['horas']);
            $sheet->setCellValue("C{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'EFSRT Lista (Horas)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //----------------------------------------------------------------------
    public function Descargar_Archivo($id_comuimg)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_comuimg($id_comuimg);
            $image = $dato['get_file'][0]['img_comuimg'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['img_comuimg']));
        } else {
            redirect('');
        }
    }

    public function Descargar_ArchivoOC($id_comuimg)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_obscimg($id_comuimg);
            $image = $dato['get_file'][0]['observacion_archivo'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['observacion_archivo']));
        } else {
            redirect('');
        }
    }

    public function Descargar_ArchivoOA($id_comuimg)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_obsaimg($id_comuimg);
            $image = $dato['get_file'][0]['observacion_archivo'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['observacion_archivo']));
        } else {
            redirect('');
        }
    }

    public function Recomendar()
    {
        $dato['list_base_datos'] = $this->Admin_model->get_list_base_datos();
        $dato['list_base_datos_num'] = $this->Admin_model->get_list_base_datos_num_todo();
        $dato['list_usuario'] = $this->Model_General->get_list_usuario();
        $dato['list_estado_cargo'] = $this->Model_General->get_list_estado_cargo();

        $dato['list_empresam'] = $this->Model_General->list_empresa();
        $this->Model_snappy->limpiar_temporal_cargo_archivos();

        //AVISO NO BORRAR
        $dato['cant_avisos'] = count($this->Model_snappy->get_list_aviso());
        $dato['list_aviso'] = $this->Model_snappy->get_list_aviso();
        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


        $this->load->view('view_IFV/recomendar', $dato);
    }

    public function Delete_Archivo()
    {
        $id_comuimg = $this->input->post('image_id');
        $dato['get_file'] = $this->Model_IFV->get_id_comuimg($id_comuimg);

        if (file_exists($dato['get_file'][0]['img_comuimg'])) {
            unlink($dato['get_file'][0]['img_comuimg']);
        }
        $this->Model_IFV->delete_archivo_comunicacion($id_comuimg);
    }

    public function PDF_Reglamento()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }
        $dato['list_reglamento'] = $this->Model_IFV->list_reglamento();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


        $this->load->view('view_IFV/comunicacion/reglamento/index', $dato);
    }

    public function Validar()
    {
        $dato['otro_1'] = $this->input->post("otro_1");
        //var_dump($dato['otro_1']);

        $total = count($this->Model_snappy->consulta_dni($dato));
        if ($total > 0) {
            echo "existe";
        } else {
            echo "no-existe";
        }
    }

    public function enviar_mensaje()
    {
        $celular = $this->input->post("celu_re");
        //$dato['otro_1']= $this->input->post("otro_1");

        include('application/views/administrador/mensaje/httpPHPAltiria.php');
        $altiriaSMS = new AltiriaSMS();

        $altiriaSMS->setDebug(true);
        $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
        $altiriaSMS->setPassword('gllg2021');

        //$sDestination = '51970125563';
        $sDestination = '51' . $celular;
        $sMessage = 'Te invitamos a matricualarte';
        $altiriaSMS->sendSMS($sDestination, $sMessage);
        echo "existe";
        $this->load->view('view_IFV/comunicacion/reglamento/index', $dato);
    }

    public function Modal_Reglamento()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }
        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        $this->load->view('view_IFV/comunicacion/reglamento/modal_registrar', $dato);
    }

    public function Insertar_Reglamento()
    {

        $dato['referencia'] = $this->input->post("refe_comuimg");
        $dato['inicio'] = $this->input->post("inicio_comuimg");
        $dato['fin'] = $this->input->post("fin_comuimg");

        $dato['path'] = $_FILES['img_comuimg']['name'];


        $fecha = date('Y-m-d');
        $path = $_FILES['img_comuimg']['name'];

        $ext = pathinfo($path, PATHINFO_EXTENSION);

        $mi_archivo = 'img_comuimg';
        //$config['upload_path'] = './repaso/';/// ruta del fileserver para almacenar el documento
        $config['upload_path'] = './reglamento/';
        $config['file_name'] = "reglamento" . $fecha . "_" . rand(1, 200) . "." . $ext;

        if (!file_exists($config['upload_path'])) {
            mkdir($config['upload_path'], 0777, true);
            chmod($config['upload_path'], 0777);
            chmod('./reglamento/', 0777);

        }

        $ruta = 'reglamento/' . $config['file_name'];

        $dato['ruta'] = 'reglamento/' . $config['file_name'];

        $config['allowed_types'] = "PDF|pdf";
        $config['max_size'] = "0";
        $config['max_width'] = "0";
        $config['max_height'] = "0";
        $this->load->library('upload', $config);
        if (!$this->upload->do_upload($mi_archivo)) {
            $data['uploadError'] = $this->upload->display_errors();
        }
        $data['uploadSuccess'] = $this->upload->data();


        $this->Model_IFV->insertar_reglamento($dato);
    }

    public function InsertarPDF_Reglamento()
    {
        array_map('unlink', glob('./reglamento/reglamento.pdf'));

        $this->Model_IFV->cargarpdf_reglamento();
    }

    public function Modal_Editar_Reglamento($id_comuimg)
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }
        $dato['get_id'] = $this->Model_IFV->list_reglamento($id_comuimg);
        $dato['list_statusva'] = $this->Model_IFV->list_statusva();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        $this->load->view('view_IFV/comunicacion/reglamento/modal_editar', $dato);
    }

    public function Update_Reglamento()
    {
        $dato['referencia'] = $this->input->post("refe_comuimg");
        $dato['inicio'] = $this->input->post("inicio_comuimg");
        $dato['fin'] = $this->input->post("fin_comuimg");
        $dato['estado'] = $this->input->post("estado");
        $dato['id_comuimg'] = $this->input->post("id_comuimg");


        $nombre_archivo = $this->Model_IFV->update_reglamento($dato);

        // if($dato['estado']==1){
        //     $dato2['img_comuimg2'] = $this->Model_IFV->get_registro($dato['id_comuimg']);
        //     $ruta1 = $dato2['img_comuimg2'][0]["img_comuimg"];
        //     $ruta2 = "./reglamento/".$nombre_archivo;
        //     array_map('unlink', glob('./reglamento/'.$nombre_archivo));

        //      copy($ruta1,$ruta2);

        // }else if($dato['estado']==3 || $dato['estado']==2){
        //     $dato2['img_comuimg2'] = $this->Model_IFV->get_registro_activo_reglamento();
        //     $ruta1 = $dato2['img_comuimg2'][0]["img_comuimg"];
        //     $ruta2 = "./reglamento/".$nombre_archivo;
        //     array_map('unlink', glob('./reglamento/'.$nombre_archivo));

        //     // copy($ruta1,$ruta2);

        // }

        // print_r($ruta1);
        // print_r($ruta2);

    }

    public function Excel_Reglamento_Interno()
    {
        $list_comu_img = $this->Model_IFV->list_reglamento();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:F1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:F1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Reglemaneto Interno IFV');

        $sheet->setAutoFilter('A1:F1');

        $sheet->getColumnDimension('A')->setWidth(40);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(40);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);

        $sheet->getStyle('A1:F1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:F1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:F1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Referencia');
        $sheet->setCellValue("B1", 'Activo de');
        $sheet->setCellValue("C1", 'Hasta');
        $sheet->setCellValue("D1", 'Creado por');
        $sheet->setCellValue("E1", 'Fecha');
        $sheet->setCellValue("F1", 'Estado');

        $contador = 1;

        foreach ($list_comu_img as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:F{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:F{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['refe_comuimg']);

            $sheet->setCellValue("B{$contador}", Date::PHPToExcel($list['inicio_comuimg']));
            $sheet->getStyle("B{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);

            $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['fin_comuimg']));
            $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);

            $sheet->setCellValue("D{$contador}", $list['creado_por']);

            $sheet->setCellValue("E{$contador}", Date::PHPToExcel($list['fec_reg']));
            $sheet->getStyle("E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);

            $sheet->setCellValue("F{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Reglamento Interno IFV (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------GRUPO CALENDARIZACIÓN----------------------------
    public function Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_grupo'] = $this->Model_IFV->get_list_grupo_c_total();
            $dato['list_matriculados'] = $this->Model_IFV->get_list_matriculados_c_total();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);


            $this->load->view('view_IFV/grupo_c/index', $dato);
        } else {
            redirect('');
        }
    }

    public function Lista_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['list_grupo'] = $this->Model_IFV->get_list_grupo_c($dato['tipo']);
            $dato['estados'] = [
                'Sin Iniciar' => '#0070c0',
                'Suspendido' => 'red',
                'Finalizado' => 'orange',
                'Sigue Activo' => '#92d050'
            ];
            $this->load->view('view_IFV/grupo_c/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Registrar_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_especialidad'] = $this->Model_IFV->list_especialidad();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            // ------AGREGADO RECIENTEMENTE ------
            $dato['list_semanas'] = $this->Model_General->get_list_semanas_modulo(0, 0);

            $this->load->view('view_IFV/grupo_c/registrar', $dato);
        } else {
            redirect('');
        }
    }

    public function Grupo_Modulo()
    {
        if ($this->session->userdata('usuario')) {
            $id_especialidad = $this->input->post("id_especialidad");
            $dato['list_modulo'] = $this->Model_IFV->get_list_combo_modulo($id_especialidad);
            $this->load->view('view_IFV/grupo_c/modulo', $dato);
        } else {
            redirect('');
        }
    }

    public function Parte_Media()
    {
        if ($this->session->userdata('usuario')) {
            $grupo = $this->input->post("grupo");
            $id_especialidad = $this->input->post("id_especialidad");
            $id_modulo = $this->input->post("id_modulo");
            $dato['get_id'] = $this->Model_IFV->traer_detalle_grupo_c($grupo, $id_especialidad, $id_modulo);
            $this->load->view('view_IFV/grupo_c/parte_media', $dato);
        } else {
            redirect('');
        }
    }

    public function Grupo_Ciclo()
    {
        if ($this->session->userdata('usuario')) {
            $id_modulo = $this->input->post("id_modulo");
            $dato['list_ciclo'] = $this->Model_IFV->get_list_combo_ciclo($id_modulo);
            $this->load->view('view_IFV/grupo_c/ciclo', $dato);
        } else {
            redirect('');
        }
    }

    public function Grupo_Turno()
    {
        if ($this->session->userdata('usuario')) {
            $id_especialidad = $this->input->post("id_especialidad");
            $dato['list_turno'] = $this->Model_IFV->get_list_combo_turno($id_especialidad);
            $this->load->view('view_IFV/grupo_c/turno', $dato);
        } else {
            redirect('');
        }
    }

    public function Grupo_Salon()
    {
        if ($this->session->userdata('usuario')) {
            $id_especialidad = $this->input->post("id_especialidad");
            $dato['list_salon'] = $this->Model_IFV->get_list_combo_salon($id_especialidad);
            $this->load->view('view_IFV/grupo_c/salon', $dato);
        } else {
            redirect('');
        }
    }

    public function Insert_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $array_modulo = explode("-", $this->input->post("id_modulo"));
            $array_ciclo = explode("-", $this->input->post("id_ciclo"));
            $dato['cod_grupo'] = $this->input->post("cod_grupo");
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $array_modulo[0];
            $dato['id_ciclo'] = $array_ciclo[0];
            $dato['anio'] = $this->input->post("anio");
            $dato['semana_inicio'] = $this->input->post("semana_inicio");
            $dato['inicio_clase'] = $this->input->post("inicio_clase");
            $dato['fin_clase'] = $this->input->post("fin_clase");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['id_seccion'] = $this->input->post("id_seccion");
            $dato['id_salon'] = $this->input->post("id_salon");
            $dato['inicio_campania'] = $this->input->post("inicio_campania");
            $dato['primer_examen'] = $this->input->post("primer_examen");
            $dato['segundo_examen'] = $this->input->post("segundo_examen");
            $dato['tercer_examen'] = $this->input->post("tercer_examen");
            $dato['cuarto_examen'] = $this->input->post("cuarto_examen");
            $dato['quinto_examen'] = $this->input->post("quinto_examen");
            $dato['matricula_regular_ini'] = $this->input->post("matricula_regular_ini");
            $dato['matricula_regular_fin'] = $this->input->post("matricula_regular_fin");
            $dato['matricula_extemporanea_ini'] = $this->input->post("matricula_extemporanea_ini");
            $dato['matricula_extemporanea_fin'] = $this->input->post("matricula_extemporanea_fin");
            $dato['horario_pdf'] = "";

            $valida = $this->Model_IFV->valida_insert_grupo_c($dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                $valida2 = $this->Model_IFV->valida_insert_grupo_c_2($dato);

                if (count($valida2) > 0) {
                    echo "error";
                } else {
                    $this->Model_IFV->insert_grupo_c($dato);

                    $get_id = $this->Model_IFV->ultimo_id_grupo();
                    $dato['id_grupo'] = $get_id[0]['id_grupo'];
                    $this->Model_IFV->insert_documento_grupo_c_inicial($dato);

                    $this->Model_IFV->delete_detalle_grupo_c($dato);

                    $i = 1;
                    while ($i <= 20) {
                        $dato['s' . $i] = $this->input->post("s" . $i);
                        $i++;
                    }
                    $dato['mas1'] = $this->input->post("mas1");
                    $dato['c_matriculados_1'] = $this->input->post("c_matriculados_1");
                    $dato['c_proyeccion'] = $this->input->post("c_proyeccion");
                    $dato['c_postulados'] = $this->input->post("c_postulados");
                    $dato['c_rechazados'] = $this->input->post("c_rechazados");
                    $dato['c_admitidos'] = $this->input->post("c_admitidos");
                    $dato['c_matriculados_2'] = $this->input->post("c_matriculados_2");

                    $this->Model_IFV->insert_detalle_grupo_c($dato);

                    if ($get_id[0]['id_turno'] > 0) {
                        $horario = $this->Model_IFV->get_id_turno($get_id[0]['id_turno']);
                        $dato['desde'] = $horario[0]['desde'];
                        $dato['hasta'] = $horario[0]['hasta'];
                        $dato['tolerancia'] = $horario[0]['tolerancia'];

                        $j = 0;
                        $fecha_inicio = $get_id[0]['inicio_clase'];
                        $semana = 0;
                        while ($j <= $get_id[0]['dias']) {
                            if ($j % 7 == 0) {
                                $semana++;
                            }
                            $dato['fecha'] = date("Y-m-d", strtotime($fecha_inicio . "+ " . $j . " days"));
                            $dato['semana'] = $semana;
                            $dato['estado_h'] = 1;

                            if (date('l', strtotime($dato['fecha'])) == 'Saturday' || date('l', strtotime($dato['fecha'])) == 'Sunday') {
                                $dato['estado_h'] = 6;
                            }

                            $valida = $this->Model_IFV->valida_festivo_grupo_c_horario($dato['fecha']);
                            if (count($valida) > 0) {
                                $dato['estado_h'] = 4;
                            }

                            $this->Model_IFV->insert_grupo_c_horario($dato);
                            $j++;
                        }
                    }
                }
            }
        } else {
            redirect('');
        }
    }

    public function Detalle_Grupo_C($id_grupo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_grupo_c($id_grupo);
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_observacion();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/grupo_c/detalle', $dato);
        } else {
            redirect('');
        }
    }

    public function Insert_Horario_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");

            $valida = $this->Model_IFV->valida_insert_grupo_c_horario($dato['id_grupo']);

            if (count($valida) > 0) {
                echo "error";
            } else {
                $get_id = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
                $dato['id_turno'] = $get_id[0]['id_turno'];

                $horario = $this->Model_IFV->get_id_turno($dato['id_turno']);
                $dato['desde'] = $horario[0]['desde'];
                $dato['hasta'] = $horario[0]['hasta'];
                $dato['tolerancia'] = $horario[0]['tolerancia'];

                $j = 0;
                $fecha_inicio = $get_id[0]['inicio_clase'];
                $semana = 0;
                while ($j <= $get_id[0]['dias']) {
                    if ($j % 7 == 0) {
                        $semana++;
                    }
                    $dato['fecha'] = date("Y-m-d", strtotime($fecha_inicio . "+ " . $j . " days"));
                    $dato['semana'] = $semana;
                    $dato['estado_h'] = 1;

                    if (date('l', strtotime($dato['fecha'])) == 'Saturday' || date('l', strtotime($dato['fecha'])) == 'Sunday') {
                        $dato['estado_h'] = 6;
                    }

                    $valida = $this->Model_IFV->valida_festivo_grupo_c_horario($dato['fecha']);
                    if (count($valida) > 0) {
                        $dato['estado_h'] = 4;
                    }

                    $this->Model_IFV->insert_grupo_c_horario($dato);
                    $j++;
                }
            }
        } else {
            redirect('');
        }
    }

    public function Valida_Asociar_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $get_horario = $this->Model_IFV->get_list_horario_grupo($dato['id_grupo']);
            if (count($get_horario) == 0) {
                echo "error";
            }
        } else {
            redirect('/login');
        }
    }

    public function Vista_Asociar_Alumno($id_grupo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_grupo_c($id_grupo);
            $dato['get_horario'] = $this->Model_IFV->get_list_horario_grupo($id_grupo);
            $dato['list_alumno'] = $this->Model_IFV->get_list_asociar_alumno();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/grupo_c/asociar_alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function List_Vista_Asociar_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_alumno'] = $this->Model_IFV->get_list_asociar_alumno();
            $this->load->view('view_IFV/grupo_c/lista_alumno_vasociar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Asociar_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $cadena = substr($this->input->post("cadena"), 0, -1);
            $cantidad = $this->input->post("cantidad");
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['grupo'] = $this->input->post("grupo");
            $dato['modulo'] = $this->input->post("modulo");
            $dato['seccion'] = $this->input->post("seccion");
            $dato['inicio_clase'] = $this->input->post("inicio_clase");
            $dato['fin_clase'] = $this->input->post("fin_clase");
            $dato['desde'] = $this->input->post("desde");
            $dato['hasta'] = $this->input->post("hasta");
            $dato['tolerancia'] = $this->input->post("tolerancia");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['inicio_marcaciones'] = $this->input->post("inicio_marcaciones");
            $f_ini = strtotime($dato['inicio_clase']);
            $f_fin = strtotime($dato['fin_clase']);
            $hoy = strtotime(date('Y-m-d'));
            $fec_inicio_marcaciones = strtotime($dato['inicio_marcaciones']);
            if ($cantidad > 0 && $hoy <= $f_fin) {
                $array = explode(",", $cadena);
                $i = 0;
                while ($i < count($array)) {
                    $dato['id_alumno'] = $array[$i];
                    $get_id = $this->Model_IFV->get_list_asociar_alumno($dato['id_alumno']);
                    if (count($get_id) > 0) {
                        $valida = $this->Model_IFV->valida_insert_asociar_alumno($dato['id_alumno']);
                        $valida_marca = $this->Model_IFV->valida_dias_marcaciones_alumno($dato['id_alumno']);
                        if (count($valida) == 0 && $valida_marca[0]['cantidad'] == 0) {
                            $dato['apellido_paterno'] = $get_id[0]['Apellido_Paterno'];
                            $dato['apellido_materno'] = $get_id[0]['Apellido_Materno'];
                            $dato['nombres'] = $get_id[0]['Nombre'];
                            $dato['dni'] = $get_id[0]['Dni'];
                            $dato['codigo'] = $get_id[0]['Codigo'];
                            $dato['matricula'] = $get_id[0]['Matricula'];
                            $dato['alumno'] = $get_id[0]['Alumno'];
                            $dato['fecha_cumpleanos'] = $get_id[0]['Fecha_Cumpleanos'];

                            $this->Model_IFV->insert_asociar_alumno_cabecera($dato);
                            $fecha_inicio = $dato['inicio_clase'];
                            $fecha_fin = $dato['fin_clase'];

                            $get_marcacion = $this->Model_IFV->valida_todos_dias_marcaciones_alumno($dato['id_alumno']);

                            if (count($get_marcacion) > 0) {
                                $fecha_inicio = strtotime('+1 day', strtotime($get_marcacion[0]['fecha']));
                            } else {
                                $fecha_inicio = strtotime($fecha_inicio);
                            }

                            $fecha_fin = strtotime($fecha_fin);

                            while ($fecha_inicio <= $fecha_fin) {
                                $dato['estado_asistencia'] = '';
                                $dato['laborable'] = '';
                                $dato['estado_ingreso'] = 0;
                                if ($fecha_inicio < $fec_inicio_marcaciones) {
                                    $dato['estado_asistencia'] = 'No Ingresa';
                                    $dato['laborable'] = 'Falta';
                                    $dato['estado_ingreso'] = 2;
                                }
                                $dato['fecha'] = date('Y-m-d', $fecha_inicio);
                                $dato['flag_domingo'] = 0;
                                $dato['flag_sabado'] = 0;
                                $dato['flag_festivo'] = 0;
                                if (date('N', strtotime($dato['fecha'])) == 7) {
                                    $dato['flag_domingo'] = 1;
                                }
                                if (date('N', strtotime($dato['fecha'])) == 6) {
                                    $dato['flag_sabado'] = 1;
                                }
                                $festivo = $this->Model_IFV->valida_fecha_festivo_alumno_ifv($dato);
                                if (count($festivo) > 0) {
                                    $dato['flag_festivo'] = 1;
                                }

                                $this->Model_IFV->insert_asociar_alumno_marcaciones($dato);
                                $fecha_inicio = strtotime('+1 day', $fecha_inicio);
                            }
                            /*$fecha_actual = strtotime(date('Y-m-d'));
                            if($fecha_actual<$fecha_inicio){

                                while ($fecha_inicio <= $fecha_fin) {
                                    $dato['estado_asistencia']='';
                                    $dato['laborable']='';
                                    $dato['estado_ingreso']='';
                                    if($fecha_inicio<$fec_inicio_marcaciones){
                                        $dato['estado_asistencia']='No Ingresa';
                                        $dato['laborable']='Falta';
                                        $dato['estado_ingreso']='2';
                                    }
                                    $dato['fecha']=date('Y-m-d', $fecha_inicio);
                                    $dato['flag_domingo']=0;
                                    $dato['flag_sabado']=0;
                                    $dato['flag_festivo']=0;
                                    if(date('N', strtotime($dato['fecha']))==7){
                                        $dato['flag_domingo']=1;
                                    }
                                    if(date('N', strtotime($dato['fecha']))==6){
                                        $dato['flag_sabado']=1;
                                    }
                                    $festivo=$this->Model_IFV->valida_fecha_festivo_alumno_ifv($dato);
                                    if(count($festivo)>0){
                                        $dato['flag_festivo']=1;
                                    }

                                    $this->Model_IFV->insert_asociar_alumno_marcaciones($dato);
                                    $fecha_inicio = strtotime('+1 day', $fecha_inicio);
                                }
                            }elseif($fecha_actual>=$fecha_inicio){
                                while ($fecha_actual <= $fecha_fin) {
                                    if ($fecha_actual >= $fecha_inicio) {
                                        $dato['fecha']=date('Y-m-d', $fecha_actual);
                                        $dato['flag_domingo']=0;
                                        $dato['flag_sabado']=0;
                                        $dato['flag_festivo']=0;
                                        if(date('N', strtotime($dato['fecha']))==7){
                                            $dato['flag_domingo']=1;
                                        }
                                        if(date('N', strtotime($dato['fecha']))==6){
                                            $dato['flag_sabado']=1;
                                        }
                                        $festivo=$this->Model_IFV->valida_fecha_festivo_alumno_ifv($dato);
                                        if(count($festivo)>0){
                                            $dato['flag_festivo']=1;
                                        }
                                        $this->Model_IFV->insert_asociar_alumno_marcaciones($dato);
                                    }
                                    $fecha_actual = strtotime('+1 day', $fecha_actual);
                                }
                            }*/
                        }
                    }
                    $i++;
                }
            }
        } else {
            redirect('/login');
        }
    }

    public function Lista_Alumno_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $get_id = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
            //$dato['list_alumno'] = $this->Model_IFV->get_list_alumno_grupo_c($get_id[0]['grupo'],$get_id[0]['nom_especialidad'],$get_id[0]['id_seccion']);
            $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_grupo_c($dato['id_grupo'], $get_id[0]['nom_especialidad']);
            $this->load->view('view_IFV/grupo_c/lista_alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Trasladar_Grupo_C($id)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id'] = $id;
            $dato['list_grupo'] = $this->Model_IFV->get_list_grupo_traslado();
            $this->load->view('view_IFV/grupo_c/modal_trasladar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Trasladar_Grupo_C()
    {
        $dato['id'] = $this->input->post("id_t");

        $dato['get_alumno_grupo'] = $this->Model_IFV->get_id_grupo_alumno($dato['id']);
        $dato['id_alumno'] = $dato['get_alumno_grupo'][0]['id_alumno'];
        $dato['id_grupo'] = $dato['get_alumno_grupo'][0]['id_grupo'];
        $this->Model_IFV->delete_dias_marcaciones_alumno_demas($dato);
        $dato['get_horario'] = $this->Model_IFV->get_list_horario_grupo($dato['id_grupo']);
        $dato['desde'] = $dato['get_horario'][0]['desde_horario'];
        $dato['hasta'] = $dato['get_horario'][0]['hasta_horario'];
        $dato['tolerancia'] = $dato['get_horario'][0]['tolerancia'];
        $dato['id_turno'] = $dato['get_horario'][0]['id_turno'];

        $dato['id_grupo'] = $this->input->post("id_grupo_t");
        $dato['get_g'] = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
        $dato['especialidad'] = $dato['get_g'][0]['nom_especialidad'];
        $dato['grupo'] = $dato['get_g'][0]['grupo'];
        $dato['modulo'] = $dato['get_g'][0]['modulo'];
        $dato['seccion'] = $dato['get_g'][0]['id_seccion'];
        $dato['inicio_clase'] = $dato['get_g'][0]['inicio_clase'];
        $dato['fin_clase'] = $dato['get_g'][0]['fin_clase'];

        $get_id = $this->Model_IFV->get_list_asociar_alumno($dato['id_alumno']);
        $this->Model_IFV->update_asociar_alumno($dato);
        if (count($get_id) > 0) {
            $dato['apellido_paterno'] = $get_id[0]['Apellido_Paterno'];
            $dato['apellido_materno'] = $get_id[0]['Apellido_Materno'];
            $dato['nombres'] = $get_id[0]['Nombre'];
            $dato['dni'] = $get_id[0]['Dni'];
            $dato['codigo'] = $get_id[0]['Codigo'];
            $dato['matricula'] = $get_id[0]['Matricula'];
            $dato['alumno'] = $get_id[0]['Alumno'];


            $fecha_inicio = $dato['inicio_clase'];
            $fecha_fin = $dato['fin_clase'];

            $fecha_actual = strtotime(date('Y-m-d'));

            $fecha_inicio = strtotime($fecha_inicio);
            $fecha_fin = strtotime($fecha_fin);

            if ($fecha_actual < $fecha_inicio) {
                while ($fecha_actual <= $fecha_fin) {
                    $dato['estado_asistencia'] = '';
                    $dato['laborable'] = '';
                    $dato['estado_ingreso'] = 0;

                    $dato['fecha'] = date('Y-m-d', $fecha_actual);
                    $dato['flag_domingo'] = 0;
                    $dato['flag_sabado'] = 0;
                    $dato['flag_festivo'] = 0;
                    if (date('N', strtotime($dato['fecha'])) == 7) {
                        $dato['flag_domingo'] = 1;
                    }
                    if (date('N', strtotime($dato['fecha'])) == 6) {
                        $dato['flag_sabado'] = 1;
                    }
                    $festivo = $this->Model_IFV->valida_fecha_festivo_alumno_ifv($dato);
                    if (count($festivo) > 0) {
                        $dato['flag_festivo'] = 1;
                    }
                    $this->Model_IFV->insert_asociar_alumno_marcaciones($dato);
                    $fecha_actual = strtotime('+1 day', $fecha_actual);
                }
            } elseif ($fecha_actual >= $fecha_inicio) {
                while ($fecha_actual <= $fecha_fin) {
                    if ($fecha_actual >= $fecha_inicio) {
                        $dato['estado_asistencia'] = '';
                        $dato['laborable'] = '';
                        $dato['estado_ingreso'] = 0;
                        $dato['fecha'] = date('Y-m-d', $fecha_actual);
                        $dato['flag_domingo'] = 0;
                        $dato['flag_sabado'] = 0;
                        $dato['flag_festivo'] = 0;
                        if (date('N', strtotime($dato['fecha'])) == 7) {
                            $dato['flag_domingo'] = 1;
                        }
                        if (date('N', strtotime($dato['fecha'])) == 6) {
                            $dato['flag_sabado'] = 1;
                        }
                        $festivo = $this->Model_IFV->valida_fecha_festivo_alumno_ifv($dato);
                        if (count($festivo) > 0) {
                            $dato['flag_festivo'] = 1;
                        }
                        $this->Model_IFV->insert_asociar_alumno_marcaciones($dato);
                    }
                    $fecha_actual = strtotime('+1 day', $fecha_actual);
                }
            }
        }

    }

    public function Delete_Asociar_Grupo()
    {
        $dato['id'] = $this->input->post("id");
        $dato['get_alumno_grupo'] = $this->Model_IFV->get_id_grupo_alumno($dato['id']);
        $dato['id_alumno'] = $dato['get_alumno_grupo'][0]['id_alumno'];
        $dato['id_grupo'] = $dato['get_alumno_grupo'][0]['id_grupo'];
        $this->Model_IFV->delete_dias_marcaciones_alumno_demas($dato);
        $this->Model_IFV->delete_asociar_grupo($dato);
    }

    public function Lista_Documento_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['list_documento'] = $this->Model_IFV->get_list_documento_grupo_c($dato['id_grupo']);
            $this->load->view('view_IFV/grupo_c/lista_documento', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Documento_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $this->load->view('view_IFV/grupo_c/modal_registrar_documento');
        } else {
            redirect('/login');
        }
    }

    public function Insert_Documento_Grupo_C()
    {
        $dato['id_grupo'] = $this->input->post("id_grupo");
        $dato['nom_documento'] = $this->input->post("nom_documento_c");
        $dato['tipo_registro'] = $this->input->post("tipo_registro");

        if ($dato['tipo_registro'] == 2) {
            $this->Model_IFV->insert_documento_grupo_c($dato);
        } else {
            $list_grupo = $this->Model_IFV->get_list_grupo_c_ids();

            foreach ($list_grupo as $list) {
                $dato['id_grupo'] = $list['id_grupo'];
                $this->Model_IFV->insert_documento_grupo_c($dato);
            }
        }
    }

    public function Modal_Update_Documento_Grupo_C($id_documento)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_documento_grupo($id_documento);
            $this->load->view('view_IFV/grupo_c/modal_editar_documento', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Documento_Grupo_C()
    {
        $dato['id_documento'] = $this->input->post("id_documento");
        $dato['archivo'] = $this->input->post("archivo_actual");

        if ($_FILES["archivo_u"]["name"] != "") {
            if (file_exists($dato['archivo'])) {
                unlink($dato['archivo']);
            }
            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["archivo_u"]["name"]);
            //$dato['nom_documento'] = str_replace(':','_',$dato['nom_documento']);
            $config['upload_path'] = './documento_grupo/' . $dato['id_documento'];
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./documento_grupo/' . $dato['id_documento'], 0777);
                chmod('./documento_grupo/' . $dato['id_documento'], 0777);
            }
            $config["allowed_types"] = 'png|pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $path = $_FILES["archivo_u"]["name"];
            $ext = pathinfo($path, PATHINFO_EXTENSION);
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["archivo_u"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["archivo_u"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["archivo_u"]["error"];
            $_FILES["file"]["size"] = $_FILES["archivo_u"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['archivo'] = "documento_grupo/" . $dato['id_documento'] . "/" . $dato['nom_documento'];
            }
        }
        $this->Model_IFV->update_documento_grupo_c($dato);
    }

    public function Descargar_Documento_Grupo_C($id_documento)
    {
        if ($this->session->userdata('usuario')) {
            $dato['doc'] = $this->Model_IFV->get_id_documento_grupo($id_documento);
            $imagen = $dato['doc'][0]['archivo'];
            force_download($imagen, NULL);
        } else {
            redirect('');
        }
    }

    public function Delete_Documento_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_documento'] = $this->input->post("id_documento");
            $dato['doc'] = $this->Model_IFV->get_id_documento_grupo($dato['id_documento']);
            unlink($dato['doc'][0]['archivo']);
            $this->Model_IFV->delete_documento_grupo_c($dato);
        } else {
            redirect('/login');
        }
    }

    public function Datos_Horario_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['get_id'] = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
            $this->load->view('view_IFV/grupo_c/datos_horario', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Horario_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['list_horario'] = $this->Model_IFV->get_list_horario_grupo($dato['id_grupo']);
            $this->load->view('view_IFV/grupo_c/lista_horario', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Horario_Grupo_C($id_horario)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_horario_grupo($id_horario);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado_horario();
            $this->load->view('view_IFV/grupo_c/modal_editar_horario', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Horario_Grupo_C()
    {
        $dato['id_horario'] = $this->input->post("id_horario");
        $dato['estado_h'] = $this->input->post("estado_h");
        $dato['horas'] = $this->input->post("horas");
        $this->Model_IFV->update_horario_grupo_c($dato);
    }

    public function Lista_Asistencia_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $get_id = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
            $dato['list_asistencia'] = $this->Model_IFV->get_list_asistencia_grupo_c($get_id[0]['grupo'], $get_id[0]['nom_especialidad'], $get_id[0]['id_seccion'], $get_id[0]['inicio_clase'], $get_id[0]['fin_clase']);
            $this->load->view('view_IFV/grupo_c/lista_asistencia', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Retirado_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $get_id = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
            $dato['list_alumno'] = $this->Model_IFV->get_list_retirado_grupo_c($dato['id_grupo'], $get_id[0]['nom_especialidad']);
            $this->load->view('view_IFV/grupo_c/lista_retirado', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Unidad_Didactica_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $get_id = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
            $dato['list_unidad_didactica'] = $this->Model_IFV->get_list_unidad_didactica_grupo_c($get_id[0]['id_especialidad']);
            $this->load->view('view_IFV/grupo_c/lista_unidad_didactica', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Observacion_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['list_observacion'] = $this->Model_IFV->get_list_observacion_grupo_c($dato['id_grupo']);
            $this->load->view('view_IFV/grupo_c/lista_observacion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Observacion_Grupo_C()
    {
        $dato['id_grupo'] = $this->input->post("id_grupo");
        $dato['id_tipo'] = $this->input->post("id_tipo");
        $dato['fecha'] = $this->input->post("fecha");
        $dato['usuario'] = $this->input->post("usuario");
        $dato['observacion'] = $this->input->post("observacion");
        $this->Model_IFV->insert_observacion_grupo_c($dato);
    }

    public function Delete_Observacion_Grupo_C()
    {
        $dato['id_observacion'] = $this->input->post("id_observacion");
        $this->Model_IFV->delete_observacion_grupo_c($dato);
    }

    public function Editar_Grupo_C($id_grupo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_grupo_c($id_grupo);
            $dato['list_especialidad'] = $this->Model_IFV->list_especialidad();
            $dato['list_modulo'] = $this->Model_IFV->get_list_combo_modulo($dato['get_id'][0]['id_especialidad']);
            $dato['list_ciclo'] = $this->Model_IFV->get_list_combo_ciclo($dato['get_id'][0]['id_modulo']);
            $dato['list_turno'] = $this->Model_IFV->get_list_combo_turno($dato['get_id'][0]['id_especialidad']);
            $dato['list_salon'] = $this->Model_IFV->get_list_combo_salon($dato['get_id'][0]['id_especialidad']);
            $dato['list_profesor'] = $this->Model_IFV->get_list_combo_profesor();
            $dato['list_grupo_manual'] = $this->Model_IFV->get_list_grupo_manual();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            // ------AGREGADO RECIENTEMENTE ------
            $dato['list_semanas'] = $this->Model_General->get_list_semanas_modulo(0, 0);

            $this->load->view('view_IFV/grupo_c/editar', $dato);
        } else {
            redirect('');
        }
    }

    public function Update_Grupo_C()
    {
        $array_modulo = explode("-", $this->input->post("id_modulo"));
        $array_ciclo = explode("-", $this->input->post("id_ciclo"));
        $dato['id_grupo'] = $this->input->post("id_grupo");
        $dato['get_id'] = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
        $dato['estado_grupo'] = $this->input->post("estado_grupo");
        $dato['cod_grupo'] = $this->input->post("cod_grupo");
        $dato['grupo'] = $this->input->post("grupo");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['id_modulo'] = $array_modulo[0];
        $dato['id_ciclo'] = $array_ciclo[0];
        $dato['anio'] = $this->input->post("anio");
        $dato['semana_inicio'] = $this->input->post("semana_inicio");
        $dato['inicio_clase'] = $this->input->post("inicio_clase");
        $dato['fin_clase'] = $this->input->post("fin_clase");
        $dato['id_turno'] = $this->input->post("id_turno");
        $dato['id_seccion'] = $this->input->post("id_seccion");
        $dato['id_salon'] = $this->input->post("id_salon");
        $dato['salir_matriculados'] = $this->input->post("salir_matriculados");
        $dato['horario_pdf'] = $this->input->post("actual_horario_pdf");
        $horario = $this->Model_IFV->get_id_turno($dato['id_turno']);
        $valida = $this->Model_IFV->valida_update_grupo_c($dato);
        $dato['desde'] = $horario[0]['desde'];
        $dato['hasta'] = $horario[0]['hasta'];
        $dato['tolerancia'] = $horario[0]['tolerancia'];
        if (count($valida) > 0) {
            echo "error";
        } else {
            $valida2 = $this->Model_IFV->valida_update_grupo_c_2($dato);

            if (count($valida2) > 0) {
                echo "error";
            } else {
                if ($dato['estado_grupo'] == 1) {
                    $get_id = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
                    $valida_estado = $this->Model_IFV->valida_update_estado_grupo_c($get_id[0]['grupo'], $get_id[0]['nom_especialidad'], $get_id[0]['id_seccion']);

                    if ($valida_estado > 0) {
                        $this->Model_IFV->update_grupo_c($dato);

                        $get_id = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
                        if ($get_id[0]['id_turno'] > 0) {
                            $this->Model_IFV->delete_grupo_horario($dato);

                            $j = 0;
                            $fecha_inicio = $get_id[0]['inicio_clase'];
                            $semana = 0;
                            while ($j <= $get_id[0]['dias']) {
                                if ($j % 7 == 0) {
                                    $semana++;
                                }
                                $dato['fecha'] = date("Y-m-d", strtotime($fecha_inicio . "+ " . $j . " days"));
                                $dato['semana'] = $semana;
                                $dato['estado_h'] = 1;

                                if (date('l', strtotime($dato['fecha'])) == 'Saturday' || date('l', strtotime($dato['fecha'])) == 'Sunday') {
                                    $dato['estado_h'] = 6;
                                }

                                $valida = $this->Model_IFV->valida_festivo_grupo_c_horario($dato['fecha']);
                                if (count($valida) > 0) {
                                    $dato['estado_h'] = 4;
                                }

                                $this->Model_IFV->insert_grupo_c_horario($dato);
                                $j++;
                            }
                        }
                    } else {
                        echo "no_matriculado";
                    }
                } else {
                    $this->Model_IFV->update_grupo_c($dato);

                    $get_id = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
                    if ($get_id[0]['id_turno'] > 0) {
                        $this->Model_IFV->delete_grupo_horario($dato);

                        $j = 0;
                        $fecha_inicio = $get_id[0]['inicio_clase'];
                        $semana = 0;
                        while ($j <= $get_id[0]['dias']) {
                            if ($j % 7 == 0) {
                                $semana++;
                            }
                            $dato['fecha'] = date("Y-m-d", strtotime($fecha_inicio . "+ " . $j . " days"));
                            $dato['semana'] = $semana;
                            $dato['estado_h'] = 1;

                            if (date('l', strtotime($dato['fecha'])) == 'Saturday' || date('l', strtotime($dato['fecha'])) == 'Sunday') {
                                $dato['estado_h'] = 6;
                            }

                            $valida = $this->Model_IFV->valida_festivo_grupo_c_horario($dato['fecha']);
                            if (count($valida) > 0) {
                                $dato['estado_h'] = 4;
                            }

                            $this->Model_IFV->insert_grupo_c_horario($dato);
                            $j++;
                        }
                    }
                }
            }
        }
    }

    public function Update_Grupo_Comercial()
    {
        $dato['grupo'] = $this->input->post("grupo");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");

        $array_modulo = explode("-", $this->input->post("id_modulo"));

        $dato['id_modulo'] = $array_modulo[0];

        $this->Model_IFV->delete_detalle_grupo_c($dato);

        $i = 1;
        while ($i <= 20) {
            $dato['s' . $i] = $this->input->post("s" . $i);
            $i++;
        }

        $dato['grupo'] = $this->input->post("grupo");
        $dato['mas1'] = $this->input->post("mas1");
        $dato['c_matriculados_1'] = $this->input->post("c_matriculados_1");
        $dato['c_proyeccion'] = $this->input->post("c_proyeccion");
        $dato['c_postulados'] = $this->input->post("c_postulados");
        $dato['c_rechazados'] = $this->input->post("c_rechazados");
        $dato['c_admitidos'] = $this->input->post("c_admitidos");
        $dato['c_matriculados_2'] = $this->input->post("c_matriculados_2");

        $this->Model_IFV->insert_detalle_grupo_c($dato);
    }

    public function Update_Grupo_Horario()
    {
        $dato['id_grupo'] = $this->input->post("id_grupo");
        $dato['id_horario'] = $this->input->post("id_horario");
        $this->Model_IFV->update_grupo_horario($dato);
    }

    public function Update_Grupo_Profesor()
    {
        $dato['id_grupo'] = $this->input->post("id_grupo");
        $dato['id_profesor'] = $this->input->post("id_profesor");
        $this->Model_IFV->update_grupo_profesor($dato);
    }

    public function Delete_Grupo_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $this->Model_IFV->delete_grupo_c($dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Grupo_C($tipo)
    {
        $list_grupo = $this->Model_IFV->get_list_grupo_c($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:AF1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:AF1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Grupos (Lista)');

        $sheet->setAutoFilter('A1:AF1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(40);
        $sheet->getColumnDimension('E')->setWidth(14);
        $sheet->getColumnDimension('F')->setWidth(18);
        $sheet->getColumnDimension('G')->setWidth(12);
        $sheet->getColumnDimension('H')->setWidth(18);
        $sheet->getColumnDimension('I')->setWidth(18);
        $sheet->getColumnDimension('J')->setWidth(30);
        $sheet->getColumnDimension('K')->setWidth(25);
        $sheet->getColumnDimension('L')->setWidth(18);
        $sheet->getColumnDimension('M')->setWidth(18);
        $sheet->getColumnDimension('N')->setWidth(18);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(20);
        $sheet->getColumnDimension('Q')->setWidth(18);
        $sheet->getColumnDimension('R')->setWidth(20);
        $sheet->getColumnDimension('S')->setWidth(20);
        $sheet->getColumnDimension('T')->setWidth(22);
        $sheet->getColumnDimension('U')->setWidth(20);
        $sheet->getColumnDimension('V')->setWidth(20);
        $sheet->getColumnDimension('W')->setWidth(20);
        $sheet->getColumnDimension('X')->setWidth(28);
        $sheet->getColumnDimension('Y')->setWidth(25);
        $sheet->getColumnDimension('Z')->setWidth(34);
        $sheet->getColumnDimension('AA')->setWidth(32);
        $sheet->getColumnDimension('AB')->setWidth(18);
        $sheet->getColumnDimension('AC')->setWidth(15);
        $sheet->getColumnDimension('AD')->setWidth(18);
        $sheet->getColumnDimension('AE')->setWidth(15);
        $sheet->getColumnDimension('AF')->setWidth(15);

        $sheet->getStyle('A1:AF1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:AF1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:AF1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Grupo');
        $sheet->setCellValue("C1", 'Cod. Esp.');
        $sheet->setCellValue("D1", 'Especialidad');
        $sheet->setCellValue("E1", 'Modulo');
        $sheet->setCellValue("F1", 'Turno');
        $sheet->setCellValue("G1", 'Ciclo');
        $sheet->setCellValue("H1", 'Sección');
        $sheet->setCellValue("I1", 'Salón');
        $sheet->setCellValue("J1", 'Cantidad de alumnos');
        $sheet->setCellValue("K1", 'Semana');
        $sheet->setCellValue("L1", 'Inicio Clases');
        $sheet->setCellValue("M1", 'Fin Clases');
        $sheet->setCellValue("N1", 'Matriculados');
        $sheet->setCellValue("O1", 'Disponible');
        $sheet->setCellValue("P1", 'Promovidos');
        $sheet->setCellValue("Q1", 'Retirados');
        $sheet->setCellValue("R1", 'Inicio Campaña');
        $sheet->setCellValue("S1", 'Primer Examen');
        $sheet->setCellValue("T1", 'Segundo Examen');
        $sheet->setCellValue("U1", 'Tercer Examen');
        $sheet->setCellValue("V1", 'Cuarto Examen');
        $sheet->setCellValue("W1", 'Quinto Examen');
        $sheet->setCellValue("X1", 'Matricula Regular Inicio');
        $sheet->setCellValue("Y1", 'Matricula Regular Fin');
        $sheet->setCellValue("Z1", 'Matricula Extemporanea Inicio');
        $sheet->setCellValue("AA1", 'Matricula Extemporanea Fin');
        $sheet->setCellValue("AB1", 'Documentos');
        $sheet->setCellValue("AC1", 'Matricula');
        $sheet->setCellValue("AD1", '% Matricula');
        $sheet->setCellValue("AE1", '% Cuota');
        $sheet->setCellValue("AF1", 'Estado');

        $contador = 1;

        foreach ($list_grupo as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:AE{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:AE{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:AE{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['cod_grupo']);
            $sheet->setCellValue("B{$contador}", $list['grupo']);
            $sheet->setCellValue("C{$contador}", $list['abreviatura']);
            $sheet->setCellValue("D{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("E{$contador}", $list['modulo']);
            $sheet->setCellValue("F{$contador}", $list['nom_turno']);
            $sheet->setCellValue("G{$contador}", $list['ciclo']);
            $sheet->setCellValue("H{$contador}", $list['id_seccion']);
            $sheet->setCellValue("I{$contador}", $list['nom_salon']);
            $sheet->setCellValue("J{$contador}", ($list['matriculados'] + $list['promovidos']));
            $sheet->setCellValue("K{$contador}", ("Sem " . $list['semana']));

            if ($list['inicio_clase'] != "" && $list['inicio_clase'] != "0000-00-00") {
                $sheet->setCellValue("L{$contador}", Date::PHPToExcel($list['inicio_clase']));
                $sheet->getStyle("L{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("L{$contador}", "");
            }

            if ($list['fin_clase'] != "" && $list['fin_clase'] != "0000-00-00") {
                $sheet->setCellValue("M{$contador}", Date::PHPToExcel($list['fin_clase']));
                $sheet->getStyle("M{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("M{$contador}", "");
            }

            $sheet->setCellValue("N{$contador}", $list['matriculados']);
            $sheet->setCellValue("O{$contador}", $list['disponible']);
            $sheet->setCellValue("P{$contador}", $list['promovidos']);
            $sheet->setCellValue("Q{$contador}", $list['retirados']);

            if ($list['inicio_campania'] != "" && $list['inicio_campania'] != "0000-00-00") {
                $sheet->setCellValue("R{$contador}", Date::PHPToExcel($list['inicio_campania']));
                $sheet->getStyle("R{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("R{$contador}", "");
            }

            if ($list['primer_examen'] != "" && $list['primer_examen'] != "0000-00-00") {
                $sheet->setCellValue("S{$contador}", Date::PHPToExcel($list['primer_examen']));
                $sheet->getStyle("S{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("S{$contador}", "");
            }

            if ($list['segundo_examen'] != "" && $list['segundo_examen'] != "0000-00-00") {
                $sheet->setCellValue("T{$contador}", Date::PHPToExcel($list['segundo_examen']));
                $sheet->getStyle("T{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("T{$contador}", "");
            }

            if ($list['tercer_examen'] != "" && $list['tercer_examen'] != "0000-00-00") {
                $sheet->setCellValue("U{$contador}", Date::PHPToExcel($list['tercer_examen']));
                $sheet->getStyle("U{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("U{$contador}", "");
            }

            if ($list['cuarto_examen'] != "" && $list['cuarto_examen'] != "0000-00-00") {
                $sheet->setCellValue("V{$contador}", Date::PHPToExcel($list['cuarto_examen']));
                $sheet->getStyle("V{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("V{$contador}", "");
            }

            if ($list['quinto_examen'] != "" && $list['quinto_examen'] != "0000-00-00") {
                $sheet->setCellValue("W{$contador}", Date::PHPToExcel($list['quinto_examen']));
                $sheet->getStyle("W{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("W{$contador}", "");
            }

            if ($list['matricula_regular_ini'] != "" && $list['matricula_regular_ini'] != "0000-00-00") {
                $sheet->setCellValue("X{$contador}", Date::PHPToExcel($list['matricula_regular_ini']));
                $sheet->getStyle("X{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("X{$contador}", "");
            }

            if ($list['matricula_regular_fin'] != "" && $list['matricula_regular_fin'] != "0000-00-00") {
                $sheet->setCellValue("Y{$contador}", Date::PHPToExcel($list['matricula_regular_fin']));
                $sheet->getStyle("Y{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("Y{$contador}", "");
            }

            if ($list['matricula_extemporanea_ini'] != "" && $list['matricula_extemporanea_ini'] != "0000-00-00") {
                $sheet->setCellValue("Z{$contador}", Date::PHPToExcel($list['matricula_extemporanea_ini']));
                $sheet->getStyle("Z{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("Z{$contador}", "");
            }

            if ($list['matricula_extemporanea_fin'] != "" && $list['matricula_extemporanea_fin'] != "0000-00-00") {
                $sheet->setCellValue("AA{$contador}", Date::PHPToExcel($list['matricula_extemporanea_fin']));
                $sheet->getStyle("AA{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("AA{$contador}", "");
            }
            $sheet->setCellValue("AB{$contador}", $list['docs']);
            $sheet->setCellValue("AC{$contador}", $list['s_matriculados']);
            if ($list['matriculados'] == 0) {
                $sheet->setCellValue("AD{$contador}", "0.00");
            } else {
                $sheet->setCellValue("AD{$contador}", number_format((($list['pago_matricula'] * 100) / $list['matriculados']), 2));
            }
            if ($list['matriculados'] == 0) {
                $sheet->setCellValue("AE{$contador}", "0.00");
            } else {
                $sheet->setCellValue("AE{$contador}", number_format((($list['pago_cuota'] * 100) / $list['matriculados']), 2));
            }
            $sheet->setCellValue("AF{$contador}", $list['nom_estado_grupo']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Grupos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Excel_Alumno_Grupo_C($id_grupo)
    {
        $get_id = $this->Model_IFV->get_id_grupo_c($id_grupo);
        //$list_alumno = $this->Model_IFV->get_list_alumno_grupo_c($get_id[0]['grupo'],$get_id[0]['nom_especialidad'],$get_id[0]['id_seccion']);
        $list_alumno = $this->Model_IFV->get_list_alumno_grupo_c($get_id[0]['id_grupo'], $get_id[0]['nom_especialidad']);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:Q1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:Q1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Alumnos (Lista)');

        $sheet->setAutoFilter('A1:Q1');

        $sheet->getColumnDimension('A')->setWidth(10);
        $sheet->getColumnDimension('B')->setWidth(10);
        $sheet->getColumnDimension('C')->setWidth(10);
        $sheet->getColumnDimension('D')->setWidth(20);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(10);
        $sheet->getColumnDimension('G')->setWidth(10);
        $sheet->getColumnDimension('H')->setWidth(10);
        $sheet->getColumnDimension('I')->setWidth(10);
        $sheet->getColumnDimension('J')->setWidth(18);
        $sheet->getColumnDimension('K')->setWidth(18);
        $sheet->getColumnDimension('L')->setWidth(20);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(18);
        $sheet->getColumnDimension('Q')->setWidth(15);
        /*$sheet->getColumnDimension('R')->setWidth(15);
        $sheet->getColumnDimension('S')->setWidth(15);
        $sheet->getColumnDimension('T')->setWidth(15);
        $sheet->getColumnDimension('U')->setWidth(15);
        $sheet->getColumnDimension('V')->setWidth(15);
        $sheet->getColumnDimension('W')->setWidth(15);*/

        $sheet->getStyle('A1:Q1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:Q1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:Q1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Grupo');
        $sheet->setCellValue("C1", 'Cod. Esp.');
        $sheet->setCellValue("D1", 'Especialidad');
        $sheet->setCellValue("E1", 'Módulo');
        $sheet->setCellValue("F1", 'Turno');
        $sheet->setCellValue("G1", 'Ciclo');
        $sheet->setCellValue("H1", 'Sección');
        $sheet->setCellValue("I1", 'Matriculados');
        $sheet->setCellValue("J1", 'Apellido Paterno');
        $sheet->setCellValue("K1", 'Apellido Materno');
        $sheet->setCellValue("L1", 'Nombre(s)');
        $sheet->setCellValue("M1", 'DNI');
        $sheet->setCellValue("N1", 'Código');
        $sheet->setCellValue("O1", 'Matricula');
        $sheet->setCellValue("P1", 'Alumno');
        $sheet->setCellValue("Q1", 'Documentos');
        /*$sheet->setCellValue("R1", 'Referencia');
        $sheet->setCellValue("S1", 'Grupo');
        $sheet->setCellValue("T1", 'Sección');
        $sheet->setCellValue("U1", 'Turno');
        $sheet->setCellValue("V1", 'Módulo');
        $sheet->setCellValue("W1", 'Ciclo');*/

        $contador = 1;

        foreach ($list_alumno as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:Q{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("J{$contador}:L{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:Q{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:Q{$contador}")->applyFromArray($styleThinBlackBorderOutline);


            $sheet->setCellValue("A{$contador}", $list['cod_grupo']);
            $sheet->setCellValue("B{$contador}", $list['grupo']);
            $sheet->setCellValue("C{$contador}", $list['abreviatura']);
            $sheet->setCellValue("D{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("E{$contador}", $list['modulo']);
            $sheet->setCellValue("F{$contador}", $list['nom_turno']);
            $sheet->setCellValue("G{$contador}", $list['ciclo']);
            $sheet->setCellValue("H{$contador}", $list['id_seccion']);
            $sheet->setCellValue("I{$contador}", $list['matriculado']);
            $sheet->setCellValue("J{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("K{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("L{$contador}", $list['Nombre']);
            $sheet->setCellValue("M{$contador}", $list['Dni']);
            $sheet->setCellValue("N{$contador}", $list['Codigo']);
            $sheet->setCellValue("O{$contador}", $list['Matricula']);
            $sheet->setCellValue("P{$contador}", $list['Alumno']);
            $sheet->setCellValue("Q{$contador}", $list['documentos_subidos'] . "/" . $list['documentos_obligatorios']);
            /*$sheet->setCellValue("R{$contador}", $list['referencia']);
            $sheet->setCellValue("S{$contador}", $list['grupo_r']);
            $sheet->setCellValue("T{$contador}", $list['seccion_r']);
            $sheet->setCellValue("U{$contador}", $list['turno_r']);
            $sheet->setCellValue("V{$contador}", $list['modulo_r']);
            $sheet->setCellValue("W{$contador}", $list['ciclo_r']);*/
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Alumnos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Excel_Documento_Grupo_C($id_grupo)
    {
        $list_documento = $this->Model_IFV->get_list_documento_grupo_c($id_grupo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:E1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:E1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Documentos (Lista)');

        $sheet->setAutoFilter('A1:E1');

        $sheet->getColumnDimension('A')->setWidth(40);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(60);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);

        $sheet->getStyle('A1:E1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:E1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:E1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Documento');
        $sheet->setCellValue("B1", 'Estado');
        $sheet->setCellValue("C1", 'Nombre Documento');
        $sheet->setCellValue("D1", 'Fecha');
        $sheet->setCellValue("E1", 'Usuario');

        $contador = 1;

        foreach ($list_documento as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:E{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_documento']);
            $sheet->setCellValue("B{$contador}", $list['nom_estado']);
            $sheet->setCellValue("C{$contador}", $list['nom_archivo']);
            if ($list['fecha'] != "") {
                $sheet->setCellValue("D{$contador}", Date::PHPToExcel($list['fecha']));
                $sheet->getStyle("D{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("D{$contador}", "");
            }
            $sheet->setCellValue("E{$contador}", $list['usuario']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Documentos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Excel_Horario_Grupo_C($id_grupo)
    {
        $list_horario = $this->Model_IFV->get_list_horario_grupo($id_grupo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:I1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:I1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Horario (Lista)');

        $sheet->setAutoFilter('A1:I1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);

        $sheet->getStyle('A1:I1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:I1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:I1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Semana');
        $sheet->setCellValue("B1", 'Fecha');
        $sheet->setCellValue("C1", 'Fecha');
        $sheet->setCellValue("D1", 'Horario');
        $sheet->setCellValue("E1", 'Día');
        $sheet->setCellValue("F1", 'De');
        $sheet->setCellValue("G1", 'A');
        $sheet->setCellValue("H1", 'Estado');
        $sheet->setCellValue("I1", 'Hora');

        $contador = 1;

        foreach ($list_horario as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:I{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:I{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['semana']);
            $sheet->setCellValue("B{$contador}", $list['fecha_corta']);
            $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("D{$contador}", $list['nom_turno']);
            $sheet->setCellValue("E{$contador}", $list['dia']);
            $sheet->setCellValue("F{$contador}", $list['desde']);
            $sheet->setCellValue("G{$contador}", $list['hasta']);
            $sheet->setCellValue("H{$contador}", $list['nom_estado']);
            $sheet->setCellValue("I{$contador}", $list['horas']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Horario (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Excel_Asistencia_Grupo_C($id_grupo)
    {
        $get_id = $this->Model_IFV->get_id_grupo_c($id_grupo);
        $list_alumno = $this->Model_IFV->get_list_asistencia_grupo_c($get_id[0]['grupo'], $get_id[0]['nom_especialidad'], $get_id[0]['id_seccion'], $get_id[0]['inicio_clase'], $get_id[0]['fin_clase']);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Asistencia (Lista)');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(25);
        $sheet->getColumnDimension('E')->setWidth(25);
        $sheet->getColumnDimension('F')->setWidth(25);
        $sheet->getColumnDimension('G')->setWidth(25);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Fecha');
        $sheet->setCellValue("B1", 'Hora');
        $sheet->setCellValue("C1", 'Obs');
        $sheet->setCellValue("D1", 'Tipo');
        $sheet->setCellValue("E1", 'Estado');
        $sheet->setCellValue("F1", 'Autorización');
        $sheet->setCellValue("G1", 'Registro');

        $contador = 1;

        foreach ($list_alumno as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("D{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", Date::PHPToExcel($list['fecha_ingreso']));
            $sheet->getStyle("A{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("B{$contador}", $list['hora_ingreso']);
            $sheet->setCellValue("C{$contador}", $list['obs']);
            $sheet->setCellValue("D{$contador}", $list['tipo_desc']);
            $sheet->setCellValue("E{$contador}", $list['nom_estado_reporte']);
            $sheet->setCellValue("F{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("G{$contador}", $list['estado_ing']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Asistencia (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Excel_Retirado_Grupo_C($id_grupo)
    {
        $get_id = $this->Model_IFV->get_id_grupo_c($id_grupo);
        $list_alumno = $this->Model_IFV->get_list_retirado_grupo_c($get_id[0]['grupo'], $get_id[0]['nom_especialidad'], $get_id[0]['id_seccion']);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Retirados (Lista)');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'DNI');
        $sheet->setCellValue("E1", 'Código');
        $sheet->setCellValue("F1", 'Matricula');
        $sheet->setCellValue("G1", 'Alumno');

        $contador = 1;

        foreach ($list_alumno as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("C{$contador}", $list['Nombre']);
            $sheet->setCellValue("D{$contador}", $list['Dni']);
            $sheet->setCellValue("E{$contador}", $list['Codigo']);
            $sheet->setCellValue("F{$contador}", $list['Matricula']);
            $sheet->setCellValue("G{$contador}", $list['Alumno']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Retirados (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Excel_Unidad_Didactica_Grupo_C($id_grupo)
    {
        $get_id = $this->Model_IFV->get_id_grupo_c($id_grupo);
        $list_unidad_didactica = $this->Model_IFV->get_list_unidad_didactica_grupo_c($get_id[0]['id_especialidad']);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Unidades Didácticas (Lista)');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(18);
        $sheet->getColumnDimension('B')->setWidth(18);
        $sheet->getColumnDimension('C')->setWidth(18);
        $sheet->getColumnDimension('D')->setWidth(60);
        $sheet->getColumnDimension('E')->setWidth(20);
        $sheet->getColumnDimension('F')->setWidth(20);
        $sheet->getColumnDimension('G')->setWidth(20);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Módulo');
        $sheet->setCellValue("B1", 'Competencia');
        $sheet->setCellValue("C1", 'Código');
        $sheet->setCellValue("D1", 'Nombre');
        $sheet->setCellValue("E1", 'Créditos');
        $sheet->setCellValue("F1", 'Puntaje Mínimo');
        $sheet->setCellValue("G1", 'Ciclo Académico');

        $contador = 1;

        foreach ($list_unidad_didactica as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['modulo']);
            $sheet->setCellValue("B{$contador}", $list['nom_competencia']);
            $sheet->setCellValue("C{$contador}", $list['cod_unidad_didactica']);
            $sheet->setCellValue("D{$contador}", $list['nom_unidad_didactica']);
            $sheet->setCellValue("E{$contador}", $list['creditos']);
            $sheet->setCellValue("F{$contador}", $list['puntaje_minimo']);
            $sheet->setCellValue("G{$contador}", $list['ciclo_academico']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Unidades Didácticas (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Excel_Observacion_Grupo_C($id_grupo)
    {
        $list_observacion = $this->Model_IFV->get_list_observacion_grupo_c($id_grupo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:D1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:D1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Observaciones (Lista)');

        $sheet->setAutoFilter('A1:D1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(60);

        $sheet->getStyle('A1:D1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:D1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:D1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Tipo');
        $sheet->setCellValue("B1", 'Fecha');
        $sheet->setCellValue("C1", 'Usuario');
        $sheet->setCellValue("D1", 'Comentario');

        $contador = 1;

        foreach ($list_observacion as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("C{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:D{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_tipo']);
            $sheet->setCellValue("B{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("B{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("C{$contador}", $list['usuario']);
            $sheet->setCellValue("D{$contador}", $list['observacion']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Observaciones (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------INFORME CALENDARIZACIÓN----------------------------
    public function Informe_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            //$dato['list_informe'] = $this->Model_IFV->get_list_informe_c();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/informe_c/index', $dato);
        } else {
            redirect('');
        }
    }

    public function Lista_Informe_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['anio'] = $this->input->post("anio");
            $dato['list_informe'] = $this->Model_IFV->get_list_informe_c($dato['anio']);
            $this->load->view('view_IFV/informe_c/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Cuadro_Informe_C()
    {
        if ($this->session->userdata('usuario')) {
            $anio = substr($this->input->post("anio"), -2);
            $dato['list_cuadro'] = $this->Model_IFV->get_list_cuadro_c($anio);
            $this->load->view('view_IFV/informe_c/cuadro', $dato);
        } else {
            redirect('');
        }
    }

    //---------------------------------MATRICULADOS----------------------------
    public function Matriculados_C()
    {
        if ($this->session->userdata('usuario')) {
            //$dato['list_grupo'] = $this->Model_IFV->get_list_grupo_c_total();
            //$dato['list_matriculados'] = $this->Model_IFV->get_list_matriculados_c_total();
            //$dato['cantidadnulos1'] = $this->Model_IFV->get_list_matriculadosnulosst(2);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/matriculados_c/index', $dato);
        } else {
            redirect('');
        }
    }

    public function Lista_Matriculados_C()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            //echo $dato['tipo'];
            $dato['list_matriculado'] = $this->Model_IFV->get_list_matriculados($dato['tipo']);
            $dato['list_recomendado'] = $this->Model_IFV->get_dni_alumno_recomendados();

            if ($dato['tipo'] == 3) {
                $this->load->view('view_IFV/matriculados_c/lista_retirados', $dato);
            } else {
                $this->load->view('view_IFV/matriculados_c/lista', $dato);
            }
        } else {
            redirect('');
        }
    }

    public function Actualizar_Lista_Matriculados_C()
    {
        $this->Model_IFV->truncate_matriculados();

        $list_matriculados = $this->Model_IFV->get_list_matriculados_arpay();

        foreach ($list_nuevos_ll as $list) {
            $dato['Id'] = $list['Id'];
            $dato['IdentityCardNumber'] = $list['IdentityCardNumber'];
            $dato['Email'] = $list['Email'];
            $dato['FatherSurname'] = $list['FatherSurname'];
            $dato['MotherSurname'] = $list['MotherSurname'];
            $dato['FirstName'] = $list['FirstName'];
            $dato['InternalStudentId'] = $list['InternalStudentId'];
            $dato['CareerGroupText'] = $list['CareerGroupText'];
            $dato['CareerName'] = $list['CareerName'];
            $dato['CareerShifts'] = $list['CareerShifts'];
            $dato['Module'] = $list['Module'];
            $dato['Seccion'] = $list['Seccion'];
            $dato['MatriculationStatus'] = $list['MatriculationStatus'];
            $dato['StudentStatus'] = $list['StudentStatus'];
            $dato['Fecha_Cumpleanos'] = $list['Fecha_Cumpleanos'];
            $dato['MobilePhone'] = $list['MobilePhone'];
            $dato['Pago_Pendiente'] = $list['Pago_Pendiente'];
            $dato['Documento_Pendiente'] = $list['Documento_Pendiente'];
            $dato['Observation'] = $list['Observation'];
            $dato['Motivo_Arpay'] = $list['Motivo_Arpay'];
            $dato['Observaciones_Arpay'] = $list['Observaciones_Arpay'];
            $dato['Fecha_Fin_Arpay'] = $list['Fecha_Fin_Arpay'];
            $dato['Fotocheck'] = $list['Fotocheck'];
            $dato['Documento_Foto'] = $list['Documento_Foto'];
            $dato['Usuario_Foto'] = $list['Usuario_Foto'];
            $dato['Fecha_Foto'] = $list['Fecha_Foto'];
            $dato['Documento_Dni'] = $list['Documento_Dni'];
            $dato['Usuario_Dni'] = $list['Usuario_Dni'];
            $dato['Fecha_Dni'] = $list['Fecha_Dni'];

            $this->Model_IFV->insert_todos_l20_matriculados($dato);
        }

        $list_colaboradores = $this->Model_IFV->get_list_colaboradores_arpay();

        foreach ($list_colaboradores as $list) {
            $dato['EmployeeId'] = $list['EmployeeId'];
            $dato['IdentityCardNumber'] = $list['IdentityCardNumber'];
            $dato['Email'] = $list['Email'];
            $dato['FatherSurname'] = $list['FatherSurname'];
            $dato['MotherSurname'] = $list['MotherSurname'];
            $dato['FirstName'] = $list['FirstName'];
            $dato['Codigo'] = $list['InternalEmployeeId'] . "'C";
            $dato['Fecha_Cumpleanos'] = $list['Fecha_Cumpleanos'];
            $dato['MobilePhone'] = $list['MobilePhone'];
            $dato['Cargo'] = $list['Cargo'];
            $dato['Email_Corporativo'] = $list['Email_Corporativo'];

            $this->Model_IFV->insert_todos_l20_colaboradores($dato);
        }
    }

    public function Modal_Update_Obs_Retiro($id_alumno_retirado)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_alumno_retirado($id_alumno_retirado);
            $this->load->view('view_IFV/matriculados_c/modal_obs_retiro', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Obs_Motivo_Retiro()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno_retirado'] = $this->input->post("id_alumno_retirado");
            $dato['obs_retiro'] = $this->input->post("obs_retiro");
            $this->Model_IFV->update_obs_motivo_retiro($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Matriculados_C($tipo)
    {
        $list_matriculado = $this->Model_IFV->get_list_matriculados_excel($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("B2:AE1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("B2:AE2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Matriculados L20');

        $sheet->setAutoFilter('B2:AE2');

        $sheet->getColumnDimension('B')->setWidth(22);
        $sheet->getColumnDimension('C')->setWidth(22);
        $sheet->getColumnDimension('D')->setWidth(30);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(40);
        $sheet->getColumnDimension('H')->setWidth(40);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(40);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(18);
        $sheet->getColumnDimension('S')->setWidth(15);
        $sheet->getColumnDimension('T')->setWidth(15);
        $sheet->getColumnDimension('U')->setWidth(15);
        $sheet->getColumnDimension('V')->setWidth(18);
        $sheet->getColumnDimension('W')->setWidth(15);
        $sheet->getColumnDimension('X')->setWidth(15);
        $sheet->getColumnDimension('Y')->setWidth(15);
        $sheet->getColumnDimension('Z')->setWidth(15);
        $sheet->getColumnDimension('AA')->setWidth(15);
        $sheet->getColumnDimension('AB')->setWidth(15);
        $sheet->getColumnDimension('AC')->setWidth(50);
        $sheet->getColumnDimension('AD')->setWidth(50);
        $sheet->getColumnDimension('AE')->setWidth(50);


        $sheet->getStyle('B2:AE2')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("B2:AE2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("B2:AE2")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("B2", 'Apellido Paterno');
        $sheet->setCellValue("C2", 'Apellido Materno');
        $sheet->setCellValue("D2", 'Nombre(s)');
        $sheet->setCellValue("E2", 'DNI');
        $sheet->setCellValue("F2", 'Celular');
        $sheet->setCellValue("G2", 'Correo');
        $sheet->setCellValue("H2", 'Correo Inst.');
        $sheet->setCellValue("I2", 'Código');
        $sheet->setCellValue("J2", 'Grupo');
        $sheet->setCellValue("K2", 'Especialidad');
        $sheet->setCellValue("L2", 'Turno');
        $sheet->setCellValue("M2", 'Módulo');
        $sheet->setCellValue("N2", 'Ciclo');
        $sheet->setCellValue("O2", 'Sección');
        $sheet->setCellValue("P2", 'Matrícula');
        $sheet->setCellValue("Q2", 'Alumno');
        $sheet->setCellValue("R2", 'Foto');
        $sheet->setCellValue("S2", 'Doc');
        $sheet->setCellValue("T2", 'Fcheck');
        $sheet->setCellValue("U2", 'Matricula 1');
        $sheet->setCellValue("V2", 'Fecha');
        $sheet->setCellValue("W2", 'Cuota 1');
        $sheet->setCellValue("X2", 'Fecha');
        $sheet->setCellValue("Y2", 'Matricula 2');
        $sheet->setCellValue("Z2", 'Fecha');
        $sheet->setCellValue("AA2", 'Cuota 6');
        $sheet->setCellValue("AB2", 'Fecha');
        $sheet->setCellValue("AC2", 'Pagos');
        $sheet->setCellValue("AD2", 'Link Foto');
        $sheet->setCellValue("AE2", 'Observación');

        $sheet->freezePane('A3');

        $contador = 2;

        foreach ($list_matriculado as $list) {
            $contador++;

            //$datos = $this->Model_IFV->get_datos_arpay_matriculados($list['Id']);

            $sheet->getStyle("B{$contador}:AB{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("S{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("U{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("W{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("Y{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("AC{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("B{$contador}:AE{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("B{$contador}:AE{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("AE{$contador}")->getFont()->getColor()->setRGB('1E88E5');
            $sheet->getStyle("AE{$contador}")->getFont()->setUnderline(true);
            $sheet->getStyle("S{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);
            $sheet->getStyle("U{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);
            $sheet->getStyle("W{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);
            $sheet->getStyle("Y{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("B{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("C{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("D{$contador}", $list['Nombre']);
            $sheet->setCellValue("E{$contador}", $list['Dni']);
            $sheet->setCellValue("F{$contador}", $list['Celular']);
            $sheet->setCellValue("G{$contador}", $list['Email']);
            $sheet->setCellValue("H{$contador}", $list['Correo_Institucional']);
            $sheet->setCellValue("I{$contador}", $list['Codigo']);
            $sheet->setCellValue("J{$contador}", $list['Grupo']);
            $sheet->setCellValue("K{$contador}", $list['Especialidad']);
            $sheet->setCellValue("L{$contador}", $list['Turno']);
            $sheet->setCellValue("M{$contador}", $list['Modulo']);
            $sheet->setCellValue("N{$contador}", $list['Ciclo']);
            $sheet->setCellValue("O{$contador}", $list['Seccion']);
            $sheet->setCellValue("P{$contador}", $list['Matricula']);
            $sheet->setCellValue("Q{$contador}", $list['Alumno']);
            $sheet->setCellValue("S{$contador}", "");//$list['foto']
            //$sheet->setCellValue("P{$contador}", $list['doc_recep']."/".$list['doc_obli']);//
            $sheet->setCellValue("T{$contador}", $list['v_fotocheck']);//
            /*$sheet->setCellValue("R{$contador}", $datos[0]['Monto_Matricula_1']);
            if($list['Fecha_Matricula_1']!=""){
                $sheet->setCellValue("S{$contador}", Date::PHPToExcel($list['Fecha_Matricula_1']));
                $sheet->getStyle("S{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }else{
                $sheet->setCellValue("S{$contador}", "");
            }
            $sheet->setCellValue("T{$contador}", $datos[0]['Monto_Cuota_1']);
            if($list['Fecha_Cuota_1']!=""){
                $sheet->setCellValue("U{$contador}", Date::PHPToExcel($list['Fecha_Cuota_1']));
                $sheet->getStyle("U{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }else{
                $sheet->setCellValue("U{$contador}", "");
            }
            $sheet->setCellValue("V{$contador}", $datos[0]['Monto_Matricula_2']);
            if($list['Fecha_Matricula_2']!=""){
                $sheet->setCellValue("W{$contador}", Date::PHPToExcel($list['Fecha_Matricula_2']));
                $sheet->getStyle("W{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }else{
                $sheet->setCellValue("W{$contador}", "");
            }
            $sheet->setCellValue("X{$contador}", $datos[0]['Monto_Cuota_6']);
            if($list['Fecha_Cuota_6']!=""){
                $sheet->setCellValue("Y{$contador}", Date::PHPToExcel($list['Fecha_Cuota_6']));
                $sheet->getStyle("Y{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }else{
                $sheet->setCellValue("Y{$contador}", "");
            }*/
            $sheet->setCellValue("AC{$contador}", $list['nom_pago_pendiente']);
            /*if($list['link_foto']!=""){
                $sheet->setCellValue("AA{$contador}", base_url().$list['link_foto']);
                $sheet->getCell("AA{$contador}")->getHyperlink()->setURL(base_url().$list['link_foto']);
            }else{*/
            $sheet->setCellValue("ACD{$contador}", "");
            //}
            $sheet->setCellValue("AE{$contador}", $list['comentariog']);//
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Matriculados L20';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Detalle_Matriculados_C($id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_matriculados($id_alumno);
            $dato['get_foto'] = $this->Model_IFV->get_list_foto_matriculados($id_alumno);
            $dato['list_modulo'] = $this->Model_IFV->get_ingresos_modulo($id_alumno);
            $dato['list_tutor'] = $this->Model_IFV->get_list_tutor(null, $id_alumno);
            $dato['id_empresa'] = 6;

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/matriculados_c/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Detalle_Alumno($id_alumno)
    {
        if (!$this->session->userdata('usuario')) {
            redirect('/login');
        }

        $alumnoInfo = [
            'id_alumno' => $id_alumno,
        ];

        $valida_sexo = $this->Model_IFV->valida_sexo($alumnoInfo['id_alumno']);
        $valida_colegio = $this->Model_IFV->valida_colegio_prov_empresa($alumnoInfo['id_alumno']);
        $valida_correo_inst = $this->Model_IFV->valida_correo_inst_empresa($alumnoInfo['id_alumno']);

        $dato = [
            'id_alumno' => $alumnoInfo['id_alumno'],
            'update_sexo' => (count($valida_sexo) > 0) ? 1 : 0,
            'update_colegio' => (count($valida_colegio) > 0) ? 1 : 0,
            'update_correo_inst' => (count($valida_correo_inst) > 0) ? 1 : 0,
            'list_colegio_prov' => $this->Model_IFV->get_list_colegio_prov(null, "activo"),
        ];

        if ($dato['update_sexo'] === 1) {
            $dato['get_id'] = $valida_sexo;
        }
        if ($dato['update_colegio'] === 1) {
            $dato['colegio_prov_empresa'] = $valida_colegio;
        }
        if ($dato['update_correo_inst'] === 1) {
            $dato['correo_inst'] = $valida_correo_inst;
        }

        $this->load->view('view_IFV/matriculados_c/modal_detalle', $dato);
    }


    public function Update_Detalle_Alumno()
    {
        $dato['id_alumno'] = $this->input->post("id_alumno");

        $dato['id_sexo'] = $this->input->post("id_sexo");
        $dato['sexo'] = $this->input->post("sexo_u");

        $dato['id_colegio_prov_empresa'] = $this->input->post("id_colegio_prov_empresa");
        $dato['id_colegio_prov'] = $this->input->post("id_colegio_prov_u");

        $dato['id_correo_inst_empresa'] = $this->input->post("id_correo_inst_empresa");
        $correo_plano = $this->input->post("correo_inst_u");
        if (trim($correo_plano) == "") {
            $dato['correo_inst'] = "";
        } else {
            $dato['correo_inst'] = $correo_plano . "@ifv.edu.pe";
        }

        if ($dato['id_sexo'] > 0) {
            $this->Model_IFV->update_sexo($dato);
        } else {
            $this->Model_IFV->insert_sexo($dato);
        }

        if ($dato['id_colegio_prov_empresa'] > 0) {
            ;
            $this->Model_IFV->update_colegio_prov_empresa($dato);
        } else {
            $this->Model_IFV->insert_colegio_prov_empresa($dato);
        }

        if ($dato['id_correo_inst_empresa'] > 0) {
            ;
            $this->Model_IFV->update_correo_inst_empresa($dato);
        } else {
            $this->Model_IFV->insert_correo_inst_empresa($dato);
        }
    }

    public function Descargar_Foto_Matriculados_C($id_detalle)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_detalle_alumno_empresa($id_detalle);
            $image = $dato['get_file'][0]['archivo'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['archivo']));
        } else {
            redirect('');
        }
    }

    public function Modal_Tutor()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_parentesco'] = $this->Model_IFV->get_list_parentesco();
            $this->load->view('view_IFV/matriculados_c/modal_tutor', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Tutor()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['id_parentesco'] = $this->input->post("id_parentesco_i");
            $dato['apellido_paterno'] = $this->input->post("apellido_paterno_i");
            $dato['apellido_materno'] = $this->input->post("apellido_materno_i");
            $dato['nombre'] = $this->input->post("nombre_i");
            $dato['celular'] = $this->input->post("celular_i");
            $dato['email'] = $this->input->post("email_i");
            $dato['no_mailing'] = $this->input->post("no_mailing_i");

            $this->Model_IFV->insert_tutor($dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Tutor($id_tutor)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_tutor($id_tutor);
            $dato['list_parentesco'] = $this->Model_IFV->get_list_parentesco();
            $this->load->view('view_IFV/matriculados_c/modal_update_tutor', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Tutor()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_tutor'] = $this->input->post("id_tutor");
            $dato['id_parentesco'] = $this->input->post("id_parentesco_u");
            $dato['apellido_paterno'] = $this->input->post("apellido_paterno_u");
            $dato['apellido_materno'] = $this->input->post("apellido_materno_u");
            $dato['nombre'] = $this->input->post("nombre_u");
            $dato['celular'] = $this->input->post("celular_u");
            $dato['email'] = $this->input->post("email_u");
            $dato['no_mailing'] = $this->input->post("no_mailing_u");

            $this->Model_IFV->update_tutor($dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Tutor()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_tutor'] = $this->input->post("id_tutor");
            $this->Model_IFV->delete_tutor($dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Ingreso_Matriculados()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['modulo'] = $this->input->post("modulo");
            $dato['list_registro_ingreso'] = $this->Model_IFV->get_list_registro_ingreso_matriculados_modulo($dato);
            // $dato['list_registro_ingreso'] = $this->Model_IFV->get_list_registro_ingreso_matriculados($dato['id_alumno']);

            $this->load->view('view_IFV/matriculados_c/lista_ingreso', $dato);
        } else {
            redirect('/login');
        }
    }

    public function V_Retirar($id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_matriculados($id_alumno);
            $dato['list_motivo'] = $this->Model_IFV->get_list_motivo();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/matriculados_c/vretirar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function V_Editar_Retirar($id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_matriculados($id_alumno);
            $dato['get_retirado'] = $this->Model_IFV->valida_alumno_retirado($id_alumno);
            $dato['list_motivo'] = $this->Model_IFV->get_list_motivo();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/matriculados_c/retirar_alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Retiro_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['get_alumno'] = $this->Model_IFV->get_id_matriculados($dato['id_alumno']);
            $dato['fecha_nasiste'] = $this->input->post("fecha_nasiste");
            $dato['id_motivo'] = $this->input->post("id_motivo");
            $dato['otro_motivo'] = $this->input->post("otro_motivo");
            $dato['fut'] = $this->input->post("fut");
            $dato['fecha_fut'] = $this->input->post("fecha_fut");
            $dato['tkt_boleta'] = $this->input->post("tkt_boleta");
            $dato['pago_pendiente'] = $this->input->post("pago_pendiente");
            $dato['monto'] = $this->input->post("monto");
            $dato['contacto'] = $this->input->post("contacto");
            $dato['fecha_contacto'] = $this->input->post("fecha_contacto");
            $dato['hora_contacto'] = $this->input->post("hora_contacto");
            $dato['resumen'] = $this->input->post("resumen");
            $dato['p_reincorporacion'] = $this->input->post("p_reincorporacion");
            $dato['get_motivo'] = $this->Model_IFV->get_list_motivo($dato['id_motivo']);
            $this->Model_IFV->insert_retiro_alumno($dato);
            $dato['version'] = 1;
            $mail = new PHPMailer(true);

            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'eventos@gllg.edu.pe';                     // usuario de acceso
                $mail->Password = 'GLLG2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('no-reply@gllg.edu.pe', 'Aprobación de cambio en matricula - IFV'); //desde donde se envia

                $mail->addAddress('rosanna.apolaya@gllg.edu.pe');

                $mail->isHTML(true);                                  // Set email format to HTML
                $mail->Subject = "Validación de Retiro de Alumno";
                $dato['btn'] = 1;
                $html = $this->load->view('view_IFV/matriculados_c/email', $dato, true);
                $mail->Body = $html;

                $mail->CharSet = 'UTF-8';
                $mail->send();
            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }

            $mail = new PHPMailer(true);
            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'eventos@gllg.edu.pe';                     // usuario de acceso
                $mail->Password = 'GLLG2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('no-reply@gllg.edu.pe', 'Aprobación de cambio en matricula - IFV'); //desde donde se envia

                $mail->addAddress('secretaria.academica@ifv.edu.pe');

                $mail->isHTML(true);                                  // Set email format to HTML
                $mail->Subject = "Validación de Retiro de Alumno";
                $dato['btn'] = 1;
                $html = $this->load->view('view_IFV/matriculados_c/email', $dato, true);
                $mail->Body = $html;

                $mail->CharSet = 'UTF-8';
                $mail->send();
            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }

            $mail = new PHPMailer(true);
            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'eventos@gllg.edu.pe';                     // usuario de acceso
                $mail->Password = 'GLLG2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('no-reply@gllg.edu.pe', 'Aprobación de cambio en matricula - IFV'); //desde donde se envia

                $mail->addAddress('dtecnologia@gllg.edu.pe');

                $mail->isHTML(true);                                  // Set email format to HTML
                $mail->Subject = "Validación de Retiro de Alumno";
                $dato['btn'] = 0;
                $html = $this->load->view('view_IFV/matriculados_c/email', $dato, true);
                $mail->Body = $html;

                $mail->CharSet = 'UTF-8';
                $mail->send();
            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
            $mail = new PHPMailer(true);
            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'eventos@gllg.edu.pe';                     // usuario de acceso
                $mail->Password = 'GLLG2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('no-reply@gllg.edu.pe', 'Aprobación de cambio en matricula - IFV'); //desde donde se envia

                $mail->addAddress('dennis.sarmiento@ifv.edu.pe');

                $mail->isHTML(true);                                  // Set email format to HTML
                $mail->Subject = "Validación de Retiro de Alumno";
                $dato['btn'] = 0;
                $html = $this->load->view('view_IFV/matriculados_c/email', $dato, true);
                $mail->Body = $html;

                $mail->CharSet = 'UTF-8';
                $mail->send();
            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
            $mail = new PHPMailer(true);
            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'eventos@gllg.edu.pe';                     // usuario de acceso
                $mail->Password = 'GLLG2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('no-reply@gllg.edu.pe', 'Aprobación de cambio en matricula - IFV'); //desde donde se envia

                $mail->addAddress('bienestarestudiantil@ifv.edu.pe');

                $mail->isHTML(true);                                  // Set email format to HTML
                $mail->Subject = "Validación de Retiro de Alumno";
                $dato['btn'] = 0;
                $html = $this->load->view('view_IFV/matriculados_c/email', $dato, true);
                $mail->Body = $html;

                $mail->CharSet = 'UTF-8';
                $mail->send();
            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
        } else {
            redirect('/login');
        }
    }

    public function Update_Retiro_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['fecha_nasiste'] = $this->input->post("fecha_nasiste");
            $dato['id_motivo'] = $this->input->post("id_motivo");
            $dato['otro_motivo'] = $this->input->post("otro_motivo");
            $dato['fut'] = $this->input->post("fut");
            $dato['tkt_boleta'] = $this->input->post("tkt_boleta");
            $dato['fecha_fut'] = $this->input->post("fecha_fut");
            $dato['pago_pendiente'] = $this->input->post("pago_pendiente");
            $dato['monto'] = $this->input->post("monto");
            $dato['contacto'] = $this->input->post("contacto");
            $dato['fecha_contacto'] = $this->input->post("fecha_contacto");
            $dato['hora_contacto'] = $this->input->post("hora_contacto");
            $dato['resumen'] = $this->input->post("resumen");
            $dato['p_reincorporacion'] = $this->input->post("p_reincorporacion");
            $dato['obs_retiro'] = $this->input->post("obs_retiro");

            $cant = count($this->Model_IFV->valida_alumno_retirado($dato['id_alumno']));

            if ($cant > 0) {
                $this->Model_IFV->update_retiro_alumno($dato);
            } else {
                $this->Model_IFV->insert_retiro_alumno($dato);

                $get_id = $this->Model_IFV->get_id_matriculados($dato['id_alumno']);

                $mail = new PHPMailer(true);

                try {
                    $mail->SMTPDebug = 0;                      // Enable verbose debug output
                    $mail->isSMTP();                                            // Send using SMTP
                    $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                    $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                    $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                    $mail->Password = 'ifvc2022';                                // SMTP password
                    $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                    $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                    $mail->setFrom('noreplay@ifv.edu.pe', 'Correo de Retiro'); //desde donde se envia

                    $mail->addAddress($get_id[0]['Email']);

                    $mail->isHTML(true);                                  // Set email format to HTML

                    $mail->Subject = 'Correo de Retiro';

                    $mail->Body = '<FONT SIZE=4>
                                    ¡Hola!<br>
                                    Hemos revisado que tu matricula se encuentra en estado “Retirado”.<br>
                                    Para nosotros todos nuestros alumnos son importantes y deseamos conocer el motivo por la cual te retiras.<br>
                                    Alguien de nuestro equipo se comunicara contigo lo antes posible.<br><br>
                                    Mientras tanto tiene en atención que si tienes alguna deuda con nosotros esta deuda aumentara con las moras correspondientes.<br>
                                    De acuerdo con nuestro reglamento interno tienes que presentar un FUT de retiro. Solo así tu cuenta queda suspensa y no origina mas moras diarias.<br><br>
                                    Por favor agiliza este proceso. Acuérdate que en un futuro si deseas volver o algún documento de nuestra parte tiene 
                                    que cancelar toda tu deuda.
                                    </FONT SIZE>';

                    $mail->CharSet = 'UTF-8';
                    $mail->send();

                } catch (Exception $e) {
                    echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                }

                include('application/views/administrador/mensaje/httpPHPAltiria.php');

                $altiriaSMS = new AltiriaSMS();

                $altiriaSMS->setDebug(true);
                $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
                $altiriaSMS->setPassword('gllg2021');

                $sDestination = '51' . $get_id[0]['Celular'];
                $sMessage = '¡Hola! 
                            Revisamos que el estado de tu matricula es “Retirado”
                            Por favor revisa el correo enviado y presenta tu FUT.
                            No sigas creando moras.';
                $altiriaSMS->sendSMS($sDestination, $sMessage);
            }
        } else {
            redirect('/login');
        }
    }

    public function Aprobar_Retiro($id_alumno, $aprobacion)
    {
        if ($this->session->userdata('usuario')) {
            $dato['aprobacion'] = $aprobacion;
            $dato['id_alumno'] = $id_alumno;
            $dato['validacion'] = $this->Model_IFV->valida_alumno_retirado($id_alumno);

            if (count($dato['validacion']) > 0) {
                if ($dato['validacion'][0]['aprobado'] == 0) {
                    $this->Model_IFV->update_estado_alumno_retirado($dato);
                }
            }

            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/matriculados_c/aprobar_retiro', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Documento_Duplicado($id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_matriculados($id_alumno);
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();

            $this->load->view('view_IFV/matriculados_c/modal_registrar_duplicado', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Documento_Duplicado()
    {
        $dato['id_alumno'] = $this->input->post("id_alumno");
        $dato['cod_documento'] = $this->input->post("cod_documento_i");
        $dato['cod_documento'] = $this->input->post("cod_documento_i");
        $dato['id_especialidad'] = $this->input->post("id_especialidad_i");
        $dato['nom_documento'] = $this->input->post("nom_documento_i");
        $dato['descripcion_documento'] = $this->input->post("descripcion_documento_i");
        $dato['obligatorio'] = $this->input->post("obligatorio_i");
        $dato['digital'] = $this->input->post("digital_i");

        $total = count($this->Model_IFV->valida_insert_documento($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_documento_duplicado($dato);
        }
    }

    public function Lista_Documento_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            /*$dato['id_alumno'] = $this->input->post("id_alumno");
            $get_id = $this->Model_IFV->get_id_matriculados($dato['id_alumno']);

            $fec_de = new DateTime($get_id[0]['Fecha_Cumpleanos']);
            $fec_hasta = new DateTime(date('Y-m-d'));
            $diff = $fec_de->diff($fec_hasta);
            $dato['has']=count($this->Model_IFV->get_has_year($dato['id_alumno'],$diff->y));
            $dato['list_documento']=$this->Model_IFV->get_list_documento_alumno($dato['id_alumno'],$diff->y);
            $dato['arpay']=$this->Model_IFV->get_list_documento_alumno_arpay($dato['id_alumno']);*/

            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['list_documento'] = $this->Model_IFV->get_list_documento_alumno($dato['id_alumno']);

            $this->load->view('view_IFV/matriculados_c/lista_documentos', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Documento_Alumno($id_documento, $id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_documento'] = $this->Model_IFV->get_list_documento($id_documento);
            $dato['id_documento'] = $id_documento;
            $dato['id_alumno'] = $id_alumno;
            $this->load->view('view_IFV/matriculados_c/modal_registrar_documento', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Documento_Alumno()
    {
        $dato['id_documento'] = $this->input->post("id_documento");
        $dato['id_alumno'] = $this->input->post("id_alumno");
        $dato['archivo'] = "";

        if ($_FILES["archivo_i"]["name"] != "") {
            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["archivo_i"]["name"]);
            $config['upload_path'] = './documento_alumno_fv/' . $dato['id_documento'] . '/' . $dato['id_alumno'];
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./documento_alumno_fv/', 0777);
                chmod('./documento_alumno_fv/' . $dato['id_documento'] . '/', 0777);
                chmod('./documento_alumno_fv/' . $dato['id_documento'] . '/' . $dato['id_alumno'], 0777);
            }
            $config["allowed_types"] = 'jpeg|png|jpg|pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $path = $_FILES["archivo_i"]["name"];
            $ext = pathinfo($path, PATHINFO_EXTENSION);
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["archivo_i"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["archivo_i"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["archivo_i"]["error"];
            $_FILES["file"]["size"] = $_FILES["archivo_i"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['archivo'] = "documento_alumno_fv/" . $dato['id_documento'] . "/" . $dato['id_alumno'] . "/" . $dato['nom_documento'];
            }
        }
        $this->Model_IFV->insert_documento_alumno($dato);
    }

    public function Modal_Update_Documento_Alumno($id_detalle)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_detalle'] = $this->Model_IFV->get_id_detalle_alumno_empresa($id_detalle);
            $dato['get_documento'] = $this->Model_IFV->get_list_documento($dato['get_detalle'][0]['id_documento']);
            $this->load->view('view_IFV/matriculados_c/modal_editar_documento', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Documento_Alumno()
    {
        $dato['id_detalle'] = $this->input->post("id_detalle");
        $get_id = $this->Model_IFV->get_id_detalle_alumno_empresa($dato['id_detalle']);
        $dato['id_alumno'] = $get_id[0]['id_alumno'];
        $dato['archivo'] = $this->input->post("archivo_actual");
        //$dato['year'] = $this->input->post("year_u");

        $id_documento = $get_id[0]['id_documento'];

        if ($_FILES["archivo_u"]["name"] != "") {
            if (file_exists($dato['archivo'])) {
                unlink($dato['archivo']);
            }
            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["archivo_u"]["name"]);
            $config['upload_path'] = './documento_alumno_fv/' . $id_documento . '/' . $dato['id_alumno'];
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./documento_alumno_fv/' . $id_documento, 0777);
                chmod('./documento_alumno_fv/' . $id_documento . '/', 0777);
                chmod('./documento_alumno_fv/' . $id_documento . '/' . $dato['id_alumno'], 0777);
            }
            $config["allowed_types"] = 'jpeg|png|jpg|pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $path = $_FILES["archivo_u"]["name"];
            $ext = pathinfo($path, PATHINFO_EXTENSION);
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["archivo_u"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["archivo_u"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["archivo_u"]["error"];
            $_FILES["file"]["size"] = $_FILES["archivo_u"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['archivo'] = "documento_alumno_fv/" . $id_documento . "/" . $dato['id_alumno'] . "/" . $dato['nom_documento'];
            }
        }
        $this->Model_IFV->update_documento_alumno($dato);
    }

    public function Descargar_Documento_Alumno($id_detalle)
    {
        if ($this->session->userdata('usuario')) {
            $dato['doc'] = $this->Model_IFV->get_id_detalle_alumno_empresa($id_detalle);
            $imagen = $dato['doc'][0]['archivo'];
            force_download($imagen, NULL);
        } else {
            redirect('');
        }
    }

    public function Delete_Documento_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_detalle'] = $this->input->post("id_detalle");
            $dato['doc'] = $this->Model_IFV->get_id_detalle_alumno_empresa($dato['id_detalle']);
            unlink($dato['doc'][0]['archivo']);
            $this->Model_IFV->delete_documento_alumno($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Documento_Alumno($id_alumno)
    {
        $list_documento = $this->Model_IFV->get_list_documento_alumno($id_alumno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Documentos');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(20);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(60);
        $sheet->getColumnDimension('E')->setWidth(60);
        $sheet->getColumnDimension('F')->setWidth(18);
        $sheet->getColumnDimension('G')->setWidth(18);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Obligatorio');
        $sheet->setCellValue("B1", 'Año');
        $sheet->setCellValue("C1", 'Código');
        $sheet->setCellValue("D1", 'Nombre');
        $sheet->setCellValue("E1", 'Nombre Documento');
        $sheet->setCellValue("F1", 'Subido Por');
        $sheet->setCellValue("G1", 'Fecha Carga');

        $contador = 1;

        foreach ($list_documento as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("D{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['v_obligatorio']);
            $sheet->setCellValue("B{$contador}", $list['anio']);
            $sheet->setCellValue("C{$contador}", $list['cod_documento']);
            $sheet->setCellValue("D{$contador}", $list['nom_documento']);
            $sheet->setCellValue("E{$contador}", $list['nom_archivo']);
            $sheet->setCellValue("F{$contador}", $list['usuario_subido']);
            if ($list['fec_subido'] != "") {
                $sheet->setCellValue("G{$contador}", Date::PHPToExcel($list['fec_subido']));
                $sheet->getStyle("G{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("G{$contador}", "");
            }
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Documentos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Pago_Arpay_Matriculados()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['estado'] = $this->input->post("estado");
            $dato['list_pago_arpay'] = $this->Model_IFV->get_list_pago_arpay_matriculados($dato['id_alumno']);
            $this->load->view('view_IFV/matriculados_c/lista_pagos_arpay', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Pago_Arpay_Matriculados($id_alumno, $estado)
    {
        $list_pago_arpay = $this->Model_IFV->get_list_pago_arpay_matriculados($id_alumno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:H1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:H1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Pago Alumno');

        $sheet->setAutoFilter('A1:H1');

        $sheet->getColumnDimension('A')->setWidth(40);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(40);
        $sheet->getColumnDimension('D')->setWidth(20);
        $sheet->getColumnDimension('E')->setWidth(20);
        $sheet->getColumnDimension('F')->setWidth(20);
        $sheet->getColumnDimension('G')->setWidth(20);
        $sheet->getColumnDimension('H')->setWidth(20);

        $sheet->getStyle('A1:H1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:H1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:H1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Producto');
        $sheet->setCellValue("B1", 'Estado');
        $sheet->setCellValue("C1", 'Descripción');
        $sheet->setCellValue("D1", 'Fecha VP');
        $sheet->setCellValue("E1", 'Monto');
        $sheet->setCellValue("F1", 'Descuento');
        $sheet->setCellValue("G1", 'Penalidad');
        $sheet->setCellValue("H1", 'SubTotal');

        $contador = 1;

        foreach ($list_pago_arpay as $list) {
            if ($estado == 1) {
                $contador++;

                $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("E{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                $sheet->getStyle("A{$contador}:H{$contador}")->applyFromArray($styleThinBlackBorderOutline);
                $sheet->getStyle("E{$contador}:H{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

                $sheet->setCellValue("A{$contador}", $list['Producto']);
                $sheet->setCellValue("B{$contador}", $list['Estado']);
                $sheet->setCellValue("C{$contador}", $list['Descripcion']);
                if ($list['Fecha_VP'] != "") {
                    $sheet->setCellValue("D{$contador}", Date::PHPToExcel($list['Fecha_VP']));
                    $sheet->getStyle("D{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                } else {
                    $sheet->setCellValue("D{$contador}", "");
                }
                $sheet->setCellValue("E{$contador}", $list['Monto']);
                $sheet->setCellValue("F{$contador}", $list['Descuento']);
                $sheet->setCellValue("G{$contador}", $list['Penalidad']);
                $sheet->setCellValue("H{$contador}", $list['SubTotal']);
            } else {
                if ($list['Estado'] == "Pendiente") {
                    $contador++;

                    $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                    $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                    $sheet->getStyle("C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                    $sheet->getStyle("E{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                    $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                    $sheet->getStyle("A{$contador}:H{$contador}")->applyFromArray($styleThinBlackBorderOutline);
                    $sheet->getStyle("E{$contador}:H{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

                    $sheet->setCellValue("A{$contador}", $list['Producto']);
                    $sheet->setCellValue("B{$contador}", $list['Estado']);
                    $sheet->setCellValue("C{$contador}", $list['Descripcion']);
                    if ($list['Fecha_VP'] != "") {
                        $sheet->setCellValue("D{$contador}", Date::PHPToExcel($list['Fecha_VP']));
                        $sheet->getStyle("D{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                    } else {
                        $sheet->setCellValue("D{$contador}", "");
                    }
                    $sheet->setCellValue("E{$contador}", $list['Monto']);
                    $sheet->setCellValue("F{$contador}", $list['Descuento']);
                    $sheet->setCellValue("G{$contador}", $list['Penalidad']);
                    $sheet->setCellValue("H{$contador}", $list['SubTotal']);
                }
            }
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Pago Alumno (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Pago_Snappy_Matriculados()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['estado'] = $this->input->post("estado");
            $dato['list_pago_snappy'] = $this->Model_IFV->get_list_pago_snappy_matriculados($dato['id_alumno'], $dato['estado']);
            $this->load->view('view_IFV/matriculados_c/lista_pagos_snappy', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Pago_Snappy()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_producto'] = $this->Model_IFV->get_list_producto_pago_automatizado();
            $this->load->view('view_IFV/matriculados_c/modal_pago_snappy', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Pago_Snappy()
    {
        $dato['id_alumno'] = $this->input->post("id_alumno");
        $dato['id_producto'] = $this->input->post("id_producto_p");

        $cantidad_recibo = $this->Model_IFV->cantidad_recibo();
        $totalRows_t = count($cantidad_recibo);
        $aniof = substr(date('Y'), 2, 2);

        if ($totalRows_t < 9) {
            $codigo = $aniof . "R-FV10000" . ($totalRows_t + 1);
        }
        if ($totalRows_t > 8 && $totalRows_t < 99) {
            $codigo = $aniof . "R-FV1000" . ($totalRows_t + 1);
        }
        if ($totalRows_t > 98 && $totalRows_t < 999) {
            $codigo = $aniof . "R-FV100" . ($totalRows_t + 1);
        }
        if ($totalRows_t > 998 && $totalRows_t < 9999) {
            $codigo = $aniof . "R-FV10" . ($totalRows_t + 1);
        }
        if ($totalRows_t > 9998 && $totalRows_t < 99999) {
            $codigo = $aniof . "R-FV1" . ($totalRows_t + 1);
        }
        $dato['cod_venta'] = $codigo;

        $this->Model_IFV->insert_pago_snappy($dato);
        $ultimo = $this->Model_IFV->ultimo_id_venta();
        $dato['id_venta'] = $ultimo[0]['id_venta'];
        $get_producto = $this->Model_IFV->get_list_producto_venta($dato['id_producto']);
        $dato['cod_producto'] = $get_producto[0]['cod_producto'];
        $dato['precio'] = $get_producto[0]['monto'];
        $dato['descuento'] = $get_producto[0]['descuento'];
        $this->Model_IFV->insert_detalle_pago_snappy($dato);
    }

    public function Modal_Update_Pago_Snappy($id_venta)
    {
        if ($this->session->userdata('usuario')) {
            $list_detalle = $this->Model_IFV->get_list_detalle_producto_pago_automatizado($id_venta);
            $subtotal = 0;
            if (count($list_detalle) > 0) {
                foreach ($list_detalle as $list) {
                    $subtotal = $subtotal + ($list['cantidad'] * ($list['precio'] - $list['descuento']));
                }
            }
            $dato['subtotal'] = $subtotal;
            $dato['id_venta'] = $id_venta;
            $this->load->view('view_IFV/matriculados_c/modal_editar_pago_snappy', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Pago_Snappy()
    {
        $dato['id_venta'] = $this->input->post("id_venta");
        $dato['id_tipo_pago'] = $this->input->post("id_tipo_pago_p");
        $dato['monto_entregado'] = $this->input->post("monto_entregado_p");

        if ($dato['monto_entregado'] == "") {
            $dato['monto_entregado'] = 0;
        }

        $list_detalle = $this->Model_IFV->get_list_detalle_producto_pago_automatizado($dato['id_venta']);

        $subtotal = 0;
        foreach ($list_detalle as $list) {
            $subtotal = $subtotal + ($list['cantidad'] * ($list['precio'] - $list['descuento']));
        }

        $dato['cambio'] = $dato['monto_entregado'] - $subtotal;

        $valida_cierre_caja = $this->Model_IFV->valida_cierre_caja();

        if (count($valida_cierre_caja) == 0) {
            $this->Model_IFV->update_pago_snappy($dato);
            echo "correcto*" . $dato['id_venta'];
        } else {
            echo "cierre_caja*0";
        }
    }

    public function Excel_Pago_Snappy_Matriculados($id_alumno, $estado)
    {
        $list_pago_snappy = $this->Model_IFV->get_list_pago_snappy_matriculados($id_alumno, $estado);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:E1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:E1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Pago Snappy');

        $sheet->setAutoFilter('A1:E1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(120);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);

        $sheet->getStyle('A1:E1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:E1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:E1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Producto(s)');
        $sheet->setCellValue("C1", 'Monto');
        $sheet->setCellValue("D1", 'Fecha');
        $sheet->setCellValue("E1", 'Estado');

        $contador = 1;

        foreach ($list_pago_snappy as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:E{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", $list['cod_venta']);
            $sheet->setCellValue("B{$contador}", $list['productos']);
            $sheet->setCellValue("C{$contador}", $list['monto_entregado']);
            $sheet->setCellValue("D{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("D{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("E{$contador}", $list['fecha']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Pago Snappy (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Sms_Matriculados()
    {
        if ($this->session->userdata('usuario')) {
            $id_alumno = $this->input->post("id_alumno");
            $get_id = $this->Model_IFV->get_id_matriculados($id_alumno);
            $dato['list_sms'] = $this->Model_IFV->get_list_sms_matriculados($get_id[0]['Celular']);
            $this->load->view('view_IFV/matriculados_c/lista_sms', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Sms_Alumno($id_alumno)
    {
        $get_id = $this->Model_IFV->get_id_matriculados($id_alumno);
        $list_sms = $this->Model_IFV->get_list_sms_matriculados($get_id[0]['Celular']);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:C1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:C1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('SMS Alumno');

        $sheet->setAutoFilter('A1:C1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(200);

        $sheet->getStyle('A1:C1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:C1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:C1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Fecha');
        $sheet->setCellValue("B1", 'Usuario');
        $sheet->setCellValue("C1", 'Mensaje');

        $contador = 1;

        foreach ($list_sms as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['fecha']);
            $sheet->setCellValue("B{$contador}", $list['usuario']);
            $sheet->setCellValue("C{$contador}", $list['mensaje']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'SMS Alumno (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Observacion_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['list_observacion'] = $this->Model_IFV->get_list_observacion_alumno($dato['id_alumno']);
            $this->load->view('view_IFV/matriculados_c/lista_observacion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Observacion_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['get_id'] = $this->Model_IFV->get_id_matriculados($dato['id_alumno']);
            $dato['list_tipo_obs'] = $this->Model_IFV->get_list_tipo_obs(1);
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_observacion();
            $this->load->view('view_IFV/matriculados_c/registrar_observacion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Observacion_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['id_tipo'] = $this->input->post("id_tipo_o");
            $id_tipo = $this->input->post("id_tipo_o");
            $dato['fecha'] = $this->input->post("fecha_o");
            $dato['usuario'] = $this->input->post("usuario_o");
            $dato['observacion'] = $this->input->post("observacion_o");
            $dato['comentariog'] = $this->input->post("comentariog_o");

            if ($_FILES["observacion_archivo"]["name"] != "") {

                $dato['path'] = $_FILES['observacion_archivo']['name'];
                $fecha = date('Y-m-d');
                $path = $_FILES['observacion_archivo']['name'];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $mi_archivo = 'observacion_archivo';

                $dato['nom_documento'] = "obs_historial" . $dato['id_alumno'] . $fecha . "_" . rand(1, 200) . "." . $ext;
                $config['upload_path'] = './alumno/ifv/observacion/' . $dato['id_alumno'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./alumno/ifv/observacion/', 0777);
                    chmod('./alumno/ifv/observacion/' . $dato['id_alumno'], 0777);
                }
                $config["allowed_types"] = 'pdf|PDF|jpg|JPG|jpeg|JPEG|mp4|png|PNG';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["observacion_archivo"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["observacion_archivo"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["observacion_archivo"]["error"];
                $_FILES["file"]["size"] = $_FILES["observacion_archivo"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['observacion_archivo'] = "alumno/ifv/observacion/" . $dato['id_alumno'] . "/" . $dato['nom_documento'];
                }
            } else {
                $dato['observacion_archivo'] = "";
            }

            if ($id_tipo != 0) {

                $valida = $this->Model_IFV->valida_insert_observacion_alumno($dato);

                if (count($valida) > 0) {
                    echo "error";
                } else {
                    $this->Model_IFV->insert_observacion_alumno($dato);
                }
            }

            $this->Model_IFV->update_comentario_alumno($dato);

        } else {
            redirect('/login');
        }
    }

    public function Editar_Observacion_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_observacion'] = $this->input->post("id_observacion");
            $dato['get_id'] = $this->Model_IFV->get_list_observacion_alumno(null, $dato['id_observacion']);
            $dato['list_tipo_obs'] = $this->Model_IFV->get_list_tipo_obs(1);
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_observacion();
            $this->load->view('view_IFV/matriculados_c/editar_observacion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Observacion_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_observacion'] = $this->input->post("id_observacion");
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['id_tipo'] = $this->input->post("id_tipo_o");
            $dato['fecha'] = $this->input->post("fecha_o");
            $dato['usuario'] = $this->input->post("usuario_o");
            $dato['observacion'] = $this->input->post("observacion_o");

            $valida = $this->Model_IFV->valida_update_observacion_alumno($dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_observacion_alumno($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_Observacion_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_observacion'] = $this->input->post("id_observacion");

            $dato['get_id'] = $this->Model_IFV->get_id_obsaimg($dato['id_observacion']);

            if (file_exists($dato['get_id'][0]['observacion_archivo'])) {
                unlink($dato['get_id'][0]['observacion_archivo']);
            }

            $this->Model_IFV->delete_observacion_alumno($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Observacion_Alumno($id_alumno)
    {
        $list_observacion = $this->Model_IFV->get_list_observacion_alumno($id_alumno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:D1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:D1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Observaciones');

        $sheet->setAutoFilter('A1:D1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(80);

        $sheet->getStyle('A1:D1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:D1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:D1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Fecha');
        $sheet->setCellValue("B1", 'Tipo');
        $sheet->setCellValue("C1", 'Usuario');
        $sheet->setCellValue("D1", 'Comentario');

        $contador = 1;

        foreach ($list_observacion as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:D{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("A{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("B{$contador}", $list['nom_tipo']);
            $sheet->setCellValue("C{$contador}", $list['usuario']);
            $sheet->setCellValue("D{$contador}", $list['observacion']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Observaciones (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-------------------------------------------------REGISTRO INGRESO----------------------------------
    public function Registro_Ingreso()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_semanas'] = $this->Model_IFV->get_list_semanas();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/registro_ingreso/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Asistencia_Registro_Ingreso()
    {
        if ($this->session->userdata('usuario')) {
            /*$fec_in = $this->input->post("fec_in");
            $fec_fi = $this->input->post("fec_fi");*/
            $semana = $this->input->post("semana");
            $fecha = $this->Model_IFV->get_list_semanas($semana);
            $fec_in = $fecha[0]['fec_inicio'];
            $fec_fi = $fecha[0]['fec_fin'];
            $tipo = $this->input->post("tipo");
            $dato['fec_in'] = $fecha[0]['fec_inicio'];
            $dato['fec_fi'] = $fecha[0]['fec_fin'];
            $dato['list_registro_ingreso'] = $this->Model_IFV->get_list_registro_ingreso_p_ne($fec_in, $fec_fi, $tipo);

            $this->load->view('view_IFV/registro_ingreso/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registro_Ingreso_x_alumno($cod_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_semanas'] = $this->Model_IFV->get_list_semanas();
            $dato['cod_alumno'] = $cod_alumno;
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/registro_ingreso/detalle_alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Asistencia_Registro_Ingreso_x_alumno()
    {
        if ($this->session->userdata('usuario')) {
            /*$fec_in = $this->input->post("fec_in");
            $fec_fi = $this->input->post("fec_fi");*/
            $semana = $this->input->post("semana");
            $fecha = $this->Model_IFV->get_list_semanas($semana);
            $fec_in = $fecha[0]['fec_inicio'];
            $fec_fi = $fecha[0]['fec_fin'];
            $codigo = $this->input->post("codigo");
            /*$tipo = $this->input->post("tipo");*/

            $dato['list_registro_ingreso_x_alumno'] = $this->Model_IFV->get_list_registro_ingreso_p($fec_in, $fec_fi, $codigo);

            $this->load->view('view_IFV/registro_ingreso/lista_detalle_alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Historial_Registro_Ingreso($id_registro_ingreso)
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_historico_ingreso'] = $this->Model_IFV->get_list_historial_registro_ingreso($id_registro_ingreso);
            $this->load->view('view_IFV/registro_ingreso/modal_historial', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Registro_Ingreso_Lista()
    {
        $dato['id_registro_ingreso'] = $this->input->post("id_registro_ingreso");
        $this->Model_IFV->delete_registro_ingreso_lista($dato);
    }

    public function Excel_Registro_Ingreso($semana, $tipo)
    {
        $semana = $this->input->post("semana");
        $fecha = $this->Model_IFV->get_list_semanas($semana);
        $fec_in = $fecha[0]['fec_inicio'];
        $fec_fi = $fecha[0]['fec_fin'];
        //$fec_in = substr($fec_in,0,4)."-".substr($fec_in,4,2)."-".substr($fec_in,-2);
        //$fec_fi = substr($fec_fi,0,4)."-".substr($fec_fi,4,2)."-".substr($fec_fi,-2);

        //$list_registro_ingreso = $this->Model_IFV->excel_registro_ingreso($fec_in,$fec_fi,$tipo);
        $list_registro_ingreso = $this->Model_IFV->get_list_registro_ingreso_p($fec_in, $fec_fi, $tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:T1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:T1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Registro Ingreso');

        $sheet->setAutoFilter('A1:T1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(25);
        $sheet->getColumnDimension('E')->setWidth(25);
        $sheet->getColumnDimension('F')->setWidth(25);
        $sheet->getColumnDimension('G')->setWidth(18);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(20);
        $sheet->getColumnDimension('K')->setWidth(18);
        $sheet->getColumnDimension('L')->setWidth(18);
        $sheet->getColumnDimension('M')->setWidth(18);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(18);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(18);
        $sheet->getColumnDimension('R')->setWidth(15);

        $sheet->getStyle('A1:T1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:K1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');
        $spreadsheet->getActiveSheet()->getStyle("M1:S1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:T1")->applyFromArray($styleThinBlackBorderOutline);

        //$sheet->setCellValue("A1", 'Fecha');
        //$sheet->setCellValue("B1", 'Hora');
        ////
        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Grupo');
        $sheet->setCellValue("F1", 'Especialidad');
        //$sheet->setCellValue("G1", 'Turno');
        $sheet->setCellValue("G1", 'Módulo');
        $sheet->setCellValue("H1", 'Ciclo');
        $sheet->setCellValue("I1", 'Sección');
        $sheet->setCellValue("J1", 'Matrícula');
        $sheet->setCellValue("K1", 'Alumno');

        $sheet->setCellValue("M1", 'Fecha');
        $sheet->setCellValue("N1", 'Hora');
        $sheet->setCellValue("O1", 'Obs');
        $sheet->setCellValue("P1", 'Tipo');
        $sheet->setCellValue("Q1", 'Estado');
        $sheet->setCellValue("R1", 'Autorización');
        $sheet->setCellValue("S1", 'Registro');

        $contador = 1;

        foreach ($list_registro_ingreso as $list) {
            $contador++;

            //$sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            //$sheet->getStyle("D{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            //$sheet->getStyle("K{$contador}:N{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            //$sheet->getStyle("Q{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            //$sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:S{$contador}")->applyFromArray($styleThinBlackBorderOutline);


            //
            //
            $sheet->setCellValue("A{$contador}", $list['apater']);
            $sheet->setCellValue("B{$contador}", $list['amater']);
            $sheet->setCellValue("C{$contador}", $list['nombre']);
            $sheet->setCellValue("D{$contador}", $list['codigo']);
            $sheet->setCellValue("E{$contador}", $list['grupo']);
            $sheet->setCellValue("F{$contador}", $list['especialidad']);

            $sheet->setCellValue("G{$contador}", $list['modulo']);
            $sheet->setCellValue("I{$contador}", $list['seccion']);
            $sheet->setCellValue("M{$contador}", Date::PHPToExcel($list['fecha_ingreso']));
            $sheet->getStyle("M{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("N{$contador}", $list['hora_ingreso']);
            $sheet->setCellValue("O{$contador}", $list['obs']);
            $sheet->setCellValue("Q{$contador}", $list['estado_asistencia']);
            $sheet->setCellValue("S{$contador}", $list['laborable']);
            //$sheet->setCellValue("L{$contador}", $list['nom_estado_reporte']);
            //$sheet->setCellValue("M{$contador}", $list['usuario_codigo']);
            //$sheet->setCellValue("N{$contador}", $list['estado_ing']);
            //$sheet->setCellValue("O{$contador}", $list['nom_tipo_acceso']);
            //$sheet->setCellValue("P{$contador}", $list['reg_automatico']);
            //$sheet->setCellValue("Q{$contador}", $list['usuario_registro']);
            //$sheet->setCellValue("R{$contador}", $list['hora_salida']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Registro Ingreso (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------FOTOCHECK ALUMNOS-------------------------------------------
    public function Fotocheck_Alumnos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['pendientes'] = count($this->Model_IFV->get_pendiente_fotocheck());
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);
            $dato['cantidad_fotochecks'] = count($this->Model_IFV->get_list_fotocheck(1));

            $this->load->view('view_IFV/fotocheck_alumno/index', $dato);
        } else {
            redirect('');
        }
    }

    public function Lista_Fotocheck_Alumnos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['list_fotocheck'] = $this->Model_IFV->get_list_fotocheck($dato['tipo']);
            $this->load->view('view_IFV/fotocheck_alumno/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Modal_Envio()
    {
        if ($this->session->userdata('usuario')) {
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            //$dato['get_id'] = $this->Model_IFV->get_list_todos_alumno(1);
            $dato['get_id_user'] = $this->Model_IFV->get_id_user();
            $dato['list_cargo_sesion'] = $this->Model_IFV->get_cargo_x_id($id_usuario);
            $this->load->view('view_IFV/fotocheck_alumno/modal_envio', $dato);
        } else {
            redirect('');
        }
    }

    public function Traer_Cargo_De()
    {
        if ($this->session->userdata('usuario')) {
            $id_usuario_de = $this->input->post("usuario_encomienda");
            $dato['list_cargo'] = $this->Model_IFV->get_cargo_x_id($id_usuario_de);
            $dato['id_cargo'] = "cargo_envio_f";
            $this->load->view('view_IFV/fotocheck_alumno/cargo', $dato);
        } else {
            redirect('');
        }
    }

    public function Modal_Foto($id_fotocheck)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_fotocheck($id_fotocheck);
            $this->load->view('view_IFV/fotocheck_alumno/modal_foto', $dato);
        } else {
            redirect('');
        }
    }

    public function Descargar_Foto_Fotocheck($id_fotocheck, $code)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_fotocheck'] = $this->Model_IFV->get_id_fotocheck($id_fotocheck);
            if ($code == 1) {
                $imagen = $dato['get_fotocheck'][0]['foto_fotocheck'];
                force_download($imagen, NULL);
            } else if ($code == 2) {
                $imagen = $dato['get_fotocheck'][0]['foto_fotocheck_2'];
                force_download($imagen, NULL);
            } else {
                $imagen = $dato['get_fotocheck'][0]['foto_fotocheck_3'];
                force_download($imagen, NULL);
            }
        } else {
            redirect('');
        }
    }

    public function Eliminar_Foto_Fotocheck()
    {
        if ($this->session->userdata('usuario')) {
            $id_fotocheck = $this->input->post("id_fotocheck");
            $op = $this->input->post("op");
            $this->Model_IFV->delete_foto_fotocheck($id_fotocheck, $op);
            /*$id_matriculado=$this->input->post("id_matriculado");
            $op=$this->input->post("op");
            $cantidad=0;
            $total_subidos=$this->Model_IFV->get_id_fotocheck($id_matriculado);
            $cantidad=$total_subidos[0]['total_subidos'];
            var_dump($cantidad);
            $dato['get_fotocheck']= $this->Model_IFV->get_id_fotocheck($id_matriculado);
            if ($op==1){
                $this->Model_IFV->delete_foto_fotocheck($id_matriculado,$op,$cantidad);
            }
            if ($op==2){
                $this->Model_IFV->delete_foto_fotocheck($id_matriculado,$op,$cantidad);
            }
            if ($op==3){
                $this->Model_IFV->delete_foto_fotocheck($id_matriculado,$op,$cantidad);
            }*/

        } else {
            redirect('');
        }
    }

    public function Modal_Anular($id_fotocheck)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->anular_envio_colab($id_fotocheck);
            $this->load->view('view_IFV/fotocheck_alumno/modal_anular', $dato);
        } else {
            redirect('');
        }
    }

    public function Modal_Detalle($id_fotocheck)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_fotocheck($id_fotocheck);
            $this->load->view('view_IFV/fotocheck_alumno/modal_detalle', $dato);
        } else {
            redirect('');
        }
    }

    public function Guardar_Foto()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_fotocheck'] = $this->input->post("id_fotocheck");
            $dato['id_matriculado'] = $this->input->post("Id");
            $dato['foto_fotocheck'] = $this->input->post("actual_foto_fotocheck");
            $dato['foto_fotocheck_2'] = $this->input->post("actual_foto_fotocheck_2");
            $dato['foto_fotocheck_3'] = $this->input->post("actual_foto_fotocheck_3");

            if ($_FILES["foto_fotocheck_2"]["name"] != "") {
                $get_doc = $this->Model_IFV->get_cod_documento_alumno('D01');
                if (file_exists($dato['foto_fotocheck_2'])) {
                    unlink($dato['foto_fotocheck_2']);
                }
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto_fotocheck_2"]["name"]);
                $config['upload_path'] = './documento_alumno_fv/' . $get_doc[0]['id_documento'] . '/' . $dato['id_matriculado'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./documento_alumno_fv/', 0777);
                    chmod('./documento_alumno_fv/' . $get_doc[0]['id_documento'], 0777);
                    chmod('./documento_alumno_fv/' . $get_doc[0]['id_documento'] . '/' . $dato['id_matriculado'], 0777);
                }
                $config["allowed_types"] = 'jpeg|png|jpg|pdf|JPEG|JPG|PNG|PDF';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["foto_fotocheck_2"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["foto_fotocheck_2"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["foto_fotocheck_2"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["foto_fotocheck_2"]["error"];
                $_FILES["file"]["size"] = $_FILES["foto_fotocheck_2"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['foto_fotocheck_2'] = "documento_alumno_fv/" . $get_doc[0]['id_documento'] . "/" . $dato['id_matriculado'] . "/" . $dato['nom_documento'];
                }

                $dato['n_foto'] = 2;
                $this->Model_IFV->update_foto_fotocheck($dato);
                $get_detalle = $this->Model_IFV->get_detalle_alumno_empresa($dato['id_matriculado'], $get_doc[0]['id_documento']);
                $dato['id_detalle'] = $get_detalle[0]['id_detalle'];
                $dato['archivo'] = $dato['foto_fotocheck_2'];
                $this->Model_IFV->update_documento_alumno($dato);
            }

            if ($_FILES["foto_fotocheck"]["name"] != "") {
                $get_doc = $this->Model_IFV->get_cod_documento_alumno('D00');
                if (file_exists($dato['foto_fotocheck'])) {
                    unlink($dato['foto_fotocheck']);
                }
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto_fotocheck"]["name"]);
                $config['upload_path'] = './documento_alumno_fv/' . $get_doc[0]['id_documento'] . '/' . $dato['id_matriculado'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./documento_alumno_fv/', 0777);
                    chmod('./documento_alumno_fv/' . $get_doc[0]['id_documento'], 0777);
                    chmod('./documento_alumno_fv/' . $get_doc[0]['id_documento'] . '/' . $dato['id_matriculado'], 0777);
                }
                $config["allowed_types"] = 'jpeg|png|jpg|pdf|JPEG|JPG|PNG|PDF';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["foto_fotocheck"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["foto_fotocheck"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["foto_fotocheck"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["foto_fotocheck"]["error"];
                $_FILES["file"]["size"] = $_FILES["foto_fotocheck"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['foto_fotocheck'] = "documento_alumno_fv/" . $get_doc[0]['id_documento'] . "/" . $dato['id_matriculado'] . "/" . $dato['nom_documento'];
                }

                $dato['n_foto'] = 1;
                $this->Model_IFV->update_foto_fotocheck($dato);
                $get_detalle = $this->Model_IFV->get_detalle_alumno_empresa($dato['id_matriculado'], $get_doc[0]['id_documento']);
                $dato['id_detalle'] = $get_detalle[0]['id_detalle'];
                $dato['archivo'] = $dato['foto_fotocheck'];
                $this->Model_IFV->update_documento_alumno($dato);
            }

            if ($_FILES["foto_fotocheck_3"]["name"] != "") {
                if (file_exists($dato['foto_fotocheck_3'])) {
                    unlink($dato['foto_fotocheck_3']);
                }
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto_fotocheck_3"]["name"]);
                $config['upload_path'] = './documento_alumno_fv/0/' . $dato['id_matriculado'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./documento_alumno_fv/', 0777);
                    chmod('./documento_alumno_fv/0', 0777);
                    chmod('./documento_alumno_fv/0/' . $dato['id_matriculado'], 0777);
                }
                $config["allowed_types"] = 'jpeg|png|jpg|pdf|JPEG|JPG|PNG|PDF';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["foto_fotocheck_3"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["foto_fotocheck_3"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["foto_fotocheck_3"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["foto_fotocheck_3"]["error"];
                $_FILES["file"]["size"] = $_FILES["foto_fotocheck_3"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['foto_fotocheck_3'] = "documento_alumno_fv/0/" . $dato['id_matriculado'] . "/" . $dato['nom_documento'];
                }

                $dato['n_foto'] = 3;
                $this->Model_IFV->update_foto_fotocheck($dato);
            }

            $valida = $this->Model_IFV->valida_fotocheck_completo($dato['id_fotocheck']);

            if (count($valida) == 0) {
                $this->Model_IFV->update_fotocheck_completo($dato);
            }

            /*$foto=  $_FILES["foto_fotocheck"]["type"];
            $foto2= $_FILES["foto_fotocheck_2"]["type"];
            $foto3= $_FILES["foto_fotocheck_3"]["type"];

            $alumno=$this->Model_IFV->get_id_fotocheck($id_matriculado);
            $cantidad=$alumno[0]['total_subidos'];
            if($alumno[0]['foto_fotocheck']!='' && $foto!=''){
                $cantidad--;
            }
            if($alumno[0]['foto_fotocheck_2']!='' && $foto2!=''){
                $cantidad--;
            }
            if($alumno[0]['foto_fotocheck_3']!='' && $foto3!=''){
                $cantidad--;
            }
            $this->Model_IFV->insert_foto_fotocheck($id_matriculado,$cantidad);*/
        } else {
            redirect('/login');
        }
    }

    public function Guardar_Envio()
    {
        if ($this->session->userdata('usuario')) {
            $cadena = substr($this->input->post("cadena"), 0, -1);
            $cantidad = $this->input->post("cantidad");

            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $id_nivel = $_SESSION['usuario'][0]['id_nivel'];

            if ($id_usuario == 1 || $id_nivel == 6 || $id_usuario == 7) {
                $dato['usuario_encomienda'] = $this->input->post("id_usuario_u");
            } else {
                $dato['usuario_encomienda'] = $_SESSION['usuario'][0]['id_usuario'];
            }

            $dato['fecha_envio'] = $this->input->post("fecha_u");
            $dato['cargo_envio'] = $this->input->post("id_cargo_u");

            if ($cantidad > 0) {
                $array = explode(",", $cadena);
                $i = 0;

                while ($i < count($array)) {
                    $dato['id_fotocheck'] = $array[$i];

                    $alumno = $this->Model_IFV->get_id_fotocheck($dato['id_fotocheck']);

                    if (count($alumno) > 0) {
                        if ($alumno[0]['esta_fotocheck'] == 'Foto Rec') {
                            $this->Model_IFV->update_envio_fotocheck($dato);
                        }
                    }

                    $i++;
                }
            }
        } else {
            redirect('/login');
        }
    }

    public function Anular_Envio()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_matriculado'] = $this->input->post("Id");
            $dato['obs_anulado'] = $this->input->post("obs_anulado");
            $this->Model_IFV->anular_envio($dato);
        } else {
            redirect('/login');
        }
    }

    public function Impresion_Fotocheck()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_fotocheck'] = $this->input->post("id_fotocheck");
            $this->Model_IFV->impresion_fotocheck($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Fotocheck($tipo)
    {
        $list_fotocheck = $this->Model_IFV->get_list_fotocheck($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:R1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:R1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Fotocheck (Alumnos)');

        $sheet->setAutoFilter('A1:R1');

        $sheet->getColumnDimension('A')->setWidth(22);
        $sheet->getColumnDimension('B')->setWidth(22);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(18);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(16);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(15);

        $sheet->getStyle('A1:R1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:R1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:R1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Especialidad');
        $sheet->setCellValue("F1", 'Grupo');
        $sheet->setCellValue("G1", 'Turno');
        $sheet->setCellValue("H1", 'Módulo');
        $sheet->setCellValue("I1", 'Sección');
        $sheet->setCellValue("J1", 'Alumno');
        $sheet->setCellValue("K1", 'Fecha Pago');
        $sheet->setCellValue("L1", 'Monto');
        $sheet->setCellValue("M1", 'Foto');
        $sheet->setCellValue("N1", 'Usuario');
        $sheet->setCellValue("O1", 'Envio');
        $sheet->setCellValue("P1", 'Usuario');
        $sheet->setCellValue("Q1", 'Cargo');
        $sheet->setCellValue("R1", 'Estado');

        $contador = 1;

        foreach ($list_fotocheck as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("L{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("N{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("P{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:R{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("L{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("C{$contador}", $list['Nombre']);
            $sheet->setCellValue("D{$contador}", $list['Codigo']);
            $sheet->setCellValue("E{$contador}", $list['abreviatura']);
            $sheet->setCellValue("F{$contador}", $list['Grupo']);
            $sheet->setCellValue("G{$contador}", $list['Turno']);
            $sheet->setCellValue("H{$contador}", $list['Modulo']);
            $sheet->setCellValue("I{$contador}", $list['Seccion']);
            $sheet->setCellValue("J{$contador}", $list['Matricula']);
            if ($list['Pago_Fotocheck'] != "") {
                $sheet->setCellValue("K{$contador}", Date::PHPToExcel($list['Pago_Fotocheck']));
                $sheet->getStyle("K{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("K{$contador}", "");
            }
            $sheet->setCellValue("L{$contador}", $list['Monto_Pago_Fotocheck']);
            if ($list['fecha_recepcion'] != "") {
                $sheet->setCellValue("M{$contador}", Date::PHPToExcel($list['fecha_recepcion']));
                $sheet->getStyle("M{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("M{$contador}", "");
            }
            $sheet->setCellValue("N{$contador}", $list['usuario_foto']);
            if ($list['fecha_envio'] != "") {
                $sheet->setCellValue("O{$contador}", Date::PHPToExcel($list['fecha_envio']));
                $sheet->getStyle("O{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("O{$contador}", "");
            }
            $sheet->setCellValue("P{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("Q{$contador}", $list['cargo_envio']);
            $sheet->setCellValue("R{$contador}", $list['esta_fotocheck']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Fotocheck (Alumnos)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Correo_Fotocheck()
    {
        if ($this->session->userdata('usuario')) {

            $cadena = $this->Model_IFV->get_fotocheck_tmp2();
            foreach ($cadena as $list) {
                $dato['codigo'] = $list;
                //$this->Model_IFV->update_envio_invitacion($dato);
                $dato['nombres'] = $list['Nombre'];
                $dato['apellido_pat'] = $list['Apellido_Paterno'];
                $dato['apellido_mat'] = $list['Apellido_Materno'];
                $dato['email_fotocheck'] = $list['Email'];
                $dato['codigo'] = $list['Codigo'];
                $mail = new PHPMailer(true);
                try {
                    $mail->SMTPDebug = 0;                      // Enable verbose debug output
                    $mail->isSMTP();                                            // Send using SMTP
                    $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                    $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                    $mail->Username = 'admision@ifv.edu.pe';                     // usuario de acceso
                    $mail->Password = 'ldej fhvy sqth tmnp';                                // SMTP password
                    $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                    $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                    $mail->setFrom('admision@ifv.edu.pe', "Admisión IFV"); //desde donde se envia
                    //$mail->addAddress('Valerosa0409@gmail.com');

                    $mail->addAddress($dato['email_fotocheck']);

                    $mail->isHTML(true);                                  // Set email format to HTML

                    $mail->Subject = "FOTOCHECK ";


                    $mail->Body = '<FONT SIZE=4>¡Hola!<br>
                                        Hemos recibido el pago correspondente a tu fotocheck. <br><br>
                                        
                                        Si todavia no lo has hecho, por favor tener en atencion que te tienes que dirigir a informes de nuestra instituicion lo antes 
                                        posible para coordinares que te saquen la foto respectiva. <br><br>
                                        
                                        Sin ella no es posible imprimir y sin tu fotocheck no podras ingresar a clases.<br><br>
                    
                                        Te esperamos. <br>
                                    
                                        (*) Tiene en atencion que tu pago solo tiene caducidad de 30 dias. Despues de eso se anula y no existe cualquier reembolso.<br>
                                        </FONT SIZE>';
                    $mail->CharSet = 'UTF-8';
                    $mail->send();
                } catch (Exception $e) {
                    echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                }
            }
        } else {
            redirect('/login');
        }
    }

    //-------------------------------------------------LISTA DE PAGOS----------------------------------
    public function Pagos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_grafico'] = $this->Model_IFV->get_list_grafico_pagos();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/pago/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Pagos()
    {
        if ($this->session->userdata('usuario')) {
            $tipo = $this->input->post("tipo");
            $dato['list_producto'] = $this->Model_IFV->get_list_productos_pagos($tipo);
            $this->load->view('view_IFV/pago/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Pagos($tipo)
    {
        $list_producto = $this->Model_IFV->get_list_productos_pagos($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        if ($_SESSION['usuario'][0]['id_nivel'] == 6 || $_SESSION['usuario'][0]['id_usuario'] == 1 || $_SESSION['usuario'][0]['id_usuario'] == 7 || $_SESSION['usuario'][0]['id_usuario'] == 35 || $_SESSION['usuario'][0]['id_usuario'] == 71) {
            $sheet->getStyle("A1:K1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A1:K1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

            $spreadsheet->getActiveSheet()->setTitle('Pagos');

            $sheet->setAutoFilter('A1:K1');

            $sheet->getColumnDimension('A')->setWidth(15);
            $sheet->getColumnDimension('B')->setWidth(25);
            $sheet->getColumnDimension('C')->setWidth(50);
            $sheet->getColumnDimension('D')->setWidth(16);
            $sheet->getColumnDimension('E')->setWidth(25);
            $sheet->getColumnDimension('F')->setWidth(15);
            $sheet->getColumnDimension('G')->setWidth(25);
            $sheet->getColumnDimension('H')->setWidth(25);
            $sheet->getColumnDimension('I')->setWidth(25);
            $sheet->getColumnDimension('J')->setWidth(25);
            $sheet->getColumnDimension('K')->setWidth(15);

            $sheet->getStyle('A1:K1')->getFont()->setBold(true);

            $spreadsheet->getActiveSheet()->getStyle("A1:K1")->getFill()
                ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
                ->getStartColor()->setARGB('C8C8C8');

            $styleThinBlackBorderOutline = [
                'borders' => [
                    'allBorders' => [
                        'borderStyle' => Border::BORDER_THIN,
                        'color' => ['argb' => 'FF000000'],
                    ],
                ],
            ];

            $sheet->getStyle("A1:K1")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A1", 'Año');
            $sheet->setCellValue("B1", 'Tipo');
            $sheet->setCellValue("C1", 'Producto');
            $sheet->setCellValue("D1", 'Pendientes');
            $sheet->setCellValue("E1", 'Total por Cancelar');
            $sheet->setCellValue("F1", 'Pagos');
            $sheet->setCellValue("G1", 'Total Cancelado');
            $sheet->setCellValue("H1", 'Total Descuentos');
            $sheet->setCellValue("I1", 'Total Penalización');
            $sheet->setCellValue("J1", 'Sub-Total');
            $sheet->setCellValue("K1", 'Estado');

            $contador = 1;

            foreach ($list_producto as $list) {
                $contador++;

                $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("B{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                $sheet->getStyle("G{$contador}:J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                $sheet->getStyle("A{$contador}:K{$contador}")->applyFromArray($styleThinBlackBorderOutline);
                $sheet->getStyle("E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);
                $sheet->getStyle("G{$contador}:J{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

                $sheet->setCellValue("A{$contador}", $list['anio']);
                $sheet->setCellValue("B{$contador}", $list['nom_tipo_producto']);
                $sheet->setCellValue("C{$contador}", $list['nom_producto']);
                $sheet->setCellValue("D{$contador}", $list['pendientes']);
                $sheet->setCellValue("E{$contador}", $list['total_cancelar']);
                $sheet->setCellValue("F{$contador}", $list['pagos']);
                $sheet->setCellValue("G{$contador}", $list['total_cancelado']);
                $sheet->setCellValue("H{$contador}", $list['total_descuento']);
                $sheet->setCellValue("I{$contador}", $list['total_penalizacion']);
                $sheet->setCellValue("J{$contador}", $list['sub_total']);
                $sheet->setCellValue("K{$contador}", $list['estado']);
            }
        } else {
            $sheet->getStyle("A1:F1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A1:F1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

            $spreadsheet->getActiveSheet()->setTitle('Pagos');

            $sheet->setAutoFilter('A1:F1');

            $sheet->getColumnDimension('A')->setWidth(15);
            $sheet->getColumnDimension('B')->setWidth(25);
            $sheet->getColumnDimension('C')->setWidth(50);
            $sheet->getColumnDimension('D')->setWidth(16);
            $sheet->getColumnDimension('E')->setWidth(25);
            $sheet->getColumnDimension('F')->setWidth(15);

            $sheet->getStyle('A1:F1')->getFont()->setBold(true);

            $spreadsheet->getActiveSheet()->getStyle("A1:F1")->getFill()
                ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
                ->getStartColor()->setARGB('C8C8C8');

            $styleThinBlackBorderOutline = [
                'borders' => [
                    'allBorders' => [
                        'borderStyle' => Border::BORDER_THIN,
                        'color' => ['argb' => 'FF000000'],
                    ],
                ],
            ];

            $sheet->getStyle("A1:F1")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A1", 'Año');
            $sheet->setCellValue("B1", 'Tipo');
            $sheet->setCellValue("C1", 'Producto');
            $sheet->setCellValue("D1", 'Pendientes');
            $sheet->setCellValue("E1", 'Total por Cancelar');
            $sheet->setCellValue("F1", 'Estado');

            $contador = 1;

            foreach ($list_producto as $list) {
                $contador++;

                $sheet->getStyle("A{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("B{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                $sheet->getStyle("G{$contador}:J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                $sheet->getStyle("A{$contador}:F{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                $sheet->getStyle("A{$contador}:F{$contador}")->applyFromArray($styleThinBlackBorderOutline);
                $sheet->getStyle("E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

                $sheet->setCellValue("A{$contador}", $list['anio']);
                $sheet->setCellValue("B{$contador}", $list['nom_tipo_producto']);
                $sheet->setCellValue("C{$contador}", $list['nom_producto']);
                $sheet->setCellValue("D{$contador}", $list['pendientes']);
                $sheet->setCellValue("E{$contador}", $list['total_cancelar']);
                $sheet->setCellValue("F{$contador}", $list['estado']);
            }
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Pagos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Excel_Grafico_Pagos($id_especialidad)
    {
        $list_pago = $this->Model_IFV->get_list_grafico_excel($id_especialidad);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:K1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:K1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Pagos Vencidos');

        $sheet->setAutoFilter('A1:K1');

        $sheet->getColumnDimension('A')->setWidth(20);
        $sheet->getColumnDimension('B')->setWidth(20);
        $sheet->getColumnDimension('C')->setWidth(20);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(20);
        $sheet->getColumnDimension('F')->setWidth(20);
        $sheet->getColumnDimension('G')->setWidth(50);
        $sheet->getColumnDimension('H')->setWidth(20);
        $sheet->getColumnDimension('I')->setWidth(22);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);

        $sheet->getStyle('A1:K1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:K1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:K1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Grupo');
        $sheet->setCellValue("F1", 'Sección');
        $sheet->setCellValue("G1", 'Producto');
        $sheet->setCellValue("H1", 'Descripción');
        $sheet->setCellValue("I1", 'Fecha Vencimiento');
        $sheet->setCellValue("J1", 'Total');
        $sheet->setCellValue("K1", 'Estado');

        $contador = 1;

        foreach ($list_pago as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:K{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("J{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("C{$contador}", $list['Nombre']);
            $sheet->setCellValue("D{$contador}", $list['Codigo']);
            $sheet->setCellValue("E{$contador}", $list['Grupo']);
            $sheet->setCellValue("F{$contador}", $list['Seccion']);
            $sheet->setCellValue("G{$contador}", $list['Producto']);
            $sheet->setCellValue("H{$contador}", $list['Descripcion']);
            if ($list['Fecha_Vencimiento'] != "") {
                $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['Fecha_Vencimiento']));
                $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("I{$contador}", "");
            }
            $sheet->setCellValue("J{$contador}", $list['Total']);
            $sheet->setCellValue("K{$contador}", $list['Estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Pagos Vencidos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Detalle_Pagos($id_producto)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_producto($id_producto);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/pago/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Detalle_Pagos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['id_producto'] = $this->input->post("id_producto");
            if ($dato['tipo'] == 1) {
                $dato['list_pago'] = $this->Model_IFV->get_list_pagos_cancelados($dato['id_producto']);
            } elseif ($dato['tipo'] == 2) {
                $dato['list_pago'] = $this->Model_IFV->get_list_pagos_vencidos($dato['id_producto']);
            } elseif ($dato['tipo'] == 3) {
                $dato['list_pago'] = $this->Model_IFV->get_list_pagos_pendientes($dato['id_producto']);
            } else {
                $dato['list_pago'] = $this->Model_IFV->get_list_pagos_todos($dato['id_producto']);
            }
            $this->load->view('view_IFV/pago/lista_detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Detalle_Pagos($tipo, $id_producto)
    {
        if ($tipo == 1) {
            $list_pago = $this->Model_IFV->get_list_pagos_cancelados($id_producto);
        } elseif ($tipo == 2) {
            $list_pago = $this->Model_IFV->get_list_pagos_vencidos($id_producto);
        } else {
            $list_pago = $this->Model_IFV->get_list_pagos_pendientes($id_producto);
        }

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        if ($tipo == 1) {
            $sheet->getStyle("A1:Q1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A1:Q1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

            $spreadsheet->getActiveSheet()->setTitle('Detalle Pagos');

            $sheet->setAutoFilter('A1:Q1');

            $sheet->getColumnDimension('A')->setWidth(25);
            $sheet->getColumnDimension('B')->setWidth(25);
            $sheet->getColumnDimension('C')->setWidth(25);
            $sheet->getColumnDimension('D')->setWidth(15);
            $sheet->getColumnDimension('E')->setWidth(15);
            $sheet->getColumnDimension('F')->setWidth(15);
            $sheet->getColumnDimension('G')->setWidth(15);
            $sheet->getColumnDimension('H')->setWidth(50);
            $sheet->getColumnDimension('I')->setWidth(20);
            $sheet->getColumnDimension('J')->setWidth(22);
            $sheet->getColumnDimension('K')->setWidth(15);
            $sheet->getColumnDimension('L')->setWidth(15);
            $sheet->getColumnDimension('M')->setWidth(15);
            $sheet->getColumnDimension('N')->setWidth(15);
            $sheet->getColumnDimension('O')->setWidth(18);
            $sheet->getColumnDimension('P')->setWidth(15);
            $sheet->getColumnDimension('Q')->setWidth(15);

            $sheet->getStyle('A1:Q1')->getFont()->setBold(true);

            $spreadsheet->getActiveSheet()->getStyle("A1:Q1")->getFill()
                ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
                ->getStartColor()->setARGB('C8C8C8');

            $styleThinBlackBorderOutline = [
                'borders' => [
                    'allBorders' => [
                        'borderStyle' => Border::BORDER_THIN,
                        'color' => ['argb' => 'FF000000'],
                    ],
                ],
            ];

            $sheet->getStyle("A1:Q1")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A1", 'Apellido Paterno');
            $sheet->setCellValue("B1", 'Apellido Materno');
            $sheet->setCellValue("C1", 'Nombre(s)');
            $sheet->setCellValue("D1", 'Código');
            $sheet->setCellValue("E1", 'Grupo');
            $sheet->setCellValue("F1", 'Módulo');
            $sheet->setCellValue("G1", 'Sección');
            $sheet->setCellValue("H1", 'Producto');
            $sheet->setCellValue("I1", 'Descripción');
            $sheet->setCellValue("J1", 'Fecha Vencimiento');
            $sheet->setCellValue("K1", 'Monto');
            $sheet->setCellValue("L1", 'Descuento');
            $sheet->setCellValue("M1", 'Penalidad');
            $sheet->setCellValue("N1", 'Total');
            $sheet->setCellValue("O1", 'Fecha Pago');
            $sheet->setCellValue("P1", 'Recibo');
            $sheet->setCellValue("Q1", 'Estado');

            $contador = 1;

            foreach ($list_pago as $list) {
                $contador++;

                $sheet->getStyle("A{$contador}:Q{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("H{$contador}:I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("K{$contador}:N{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                $sheet->getStyle("A{$contador}:Q{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                $sheet->getStyle("A{$contador}:Q{$contador}")->applyFromArray($styleThinBlackBorderOutline);
                $sheet->getStyle("K{$contador}:N{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

                $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
                $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
                $sheet->setCellValue("C{$contador}", $list['Nombre']);
                $sheet->setCellValue("D{$contador}", $list['Codigo']);
                $sheet->setCellValue("E{$contador}", $list['Grupo']);
                $sheet->setCellValue("F{$contador}", $list['Modulo']);
                $sheet->setCellValue("G{$contador}", $list['Seccion']);
                $sheet->setCellValue("H{$contador}", $list['Producto']);
                $sheet->setCellValue("I{$contador}", $list['Descripcion']);
                if ($list['Fecha_Vencimiento'] != "") {
                    $sheet->setCellValue("J{$contador}", Date::PHPToExcel($list['Fecha_Vencimiento']));
                    $sheet->getStyle("J{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                } else {
                    $sheet->setCellValue("J{$contador}", "");
                }
                $sheet->setCellValue("K{$contador}", $list['Monto']);
                $sheet->setCellValue("L{$contador}", $list['Descuento']);
                $sheet->setCellValue("M{$contador}", $list['Penalidad']);
                $sheet->setCellValue("N{$contador}", $list['Total']);
                $sheet->setCellValue("O{$contador}", Date::PHPToExcel($list['Fecha_Pago']));
                $sheet->getStyle("O{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                $sheet->setCellValue("P{$contador}", $list['Recibo']);
                $sheet->setCellValue("Q{$contador}", $list['Estado']);
            }
        } else {
            $sheet->getStyle("A1:L1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A1:L1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

            $spreadsheet->getActiveSheet()->setTitle('Detalle Pagos');

            $sheet->setAutoFilter('A1:L1');

            $sheet->getColumnDimension('A')->setWidth(25);
            $sheet->getColumnDimension('B')->setWidth(25);
            $sheet->getColumnDimension('C')->setWidth(25);
            $sheet->getColumnDimension('D')->setWidth(15);
            $sheet->getColumnDimension('E')->setWidth(15);
            $sheet->getColumnDimension('F')->setWidth(15);
            $sheet->getColumnDimension('G')->setWidth(15);
            $sheet->getColumnDimension('H')->setWidth(50);
            $sheet->getColumnDimension('I')->setWidth(20);
            $sheet->getColumnDimension('J')->setWidth(22);
            $sheet->getColumnDimension('K')->setWidth(15);
            $sheet->getColumnDimension('L')->setWidth(15);

            $sheet->getStyle('A1:L1')->getFont()->setBold(true);

            $spreadsheet->getActiveSheet()->getStyle("A1:L1")->getFill()
                ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
                ->getStartColor()->setARGB('C8C8C8');

            $styleThinBlackBorderOutline = [
                'borders' => [
                    'allBorders' => [
                        'borderStyle' => Border::BORDER_THIN,
                        'color' => ['argb' => 'FF000000'],
                    ],
                ],
            ];

            $sheet->getStyle("A1:L1")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A1", 'Apellido Paterno');
            $sheet->setCellValue("B1", 'Apellido Materno');
            $sheet->setCellValue("C1", 'Nombre(s)');
            $sheet->setCellValue("D1", 'Código');
            $sheet->setCellValue("E1", 'Grupo');
            $sheet->setCellValue("F1", 'Módulo');
            $sheet->setCellValue("G1", 'Sección');
            $sheet->setCellValue("H1", 'Producto');
            $sheet->setCellValue("I1", 'Descripción');
            $sheet->setCellValue("J1", 'Fecha Vencimiento');
            $sheet->setCellValue("K1", 'Total');
            $sheet->setCellValue("L1", 'Estado');

            $contador = 1;

            foreach ($list_pago as $list) {
                $contador++;

                $sheet->getStyle("A{$contador}:L{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("H{$contador}:I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
                $sheet->getStyle("A{$contador}:L{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                $sheet->getStyle("A{$contador}:L{$contador}")->applyFromArray($styleThinBlackBorderOutline);
                $sheet->getStyle("K{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

                $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
                $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
                $sheet->setCellValue("C{$contador}", $list['Nombre']);
                $sheet->setCellValue("D{$contador}", $list['Codigo']);
                $sheet->setCellValue("E{$contador}", $list['Grupo']);
                $sheet->setCellValue("F{$contador}", $list['Modulo']);
                $sheet->setCellValue("G{$contador}", $list['Seccion']);
                $sheet->setCellValue("H{$contador}", $list['Producto']);
                $sheet->setCellValue("I{$contador}", $list['Descripcion']);
                if ($list['Fecha_Vencimiento'] != "") {
                    $sheet->setCellValue("J{$contador}", Date::PHPToExcel($list['Fecha_Vencimiento']));
                    $sheet->getStyle("J{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                } else {
                    $sheet->setCellValue("J{$contador}", "");
                }
                $sheet->setCellValue("K{$contador}", $list['Total']);
                $sheet->setCellValue("L{$contador}", $list['Estado']);
            }
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Detalle Pagos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------SOLICITUD-----------------------------------------
    public function Solicitud()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/solicitud/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Solicitud()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_solicitud'] = $this->Model_IFV->get_list_solicitud();
            $this->load->view('view_IFV/solicitud/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Detalle_Solicitud($id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_alumno($id_alumno);
            $dato['list_fase'] = $this->Model_IFV->get_list_fase();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/solicitud/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Solicitud()
    {
        $list_solicitud = $this->Model_IFV->get_list_solicitud();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:M1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:M1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Solicitud');

        $sheet->setAutoFilter('A1:M1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(30);
        $sheet->getColumnDimension('E')->setWidth(30);
        $sheet->getColumnDimension('F')->setWidth(30);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(15);

        $sheet->getStyle('A1:M1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:M1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:M1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Nr. Documento');
        $sheet->setCellValue("C1", 'Apellido Paterno');
        $sheet->setCellValue("D1", 'Apellido Materno');
        $sheet->setCellValue("E1", 'Nombres');
        $sheet->setCellValue("F1", 'Producto');
        $sheet->setCellValue("G1", 'Monto');
        $sheet->setCellValue("H1", 'Descuento');
        $sheet->setCellValue("I1", 'Penalidad');
        $sheet->setCellValue("J1", 'SubTotal');
        $sheet->setCellValue("K1", 'Recibo');
        $sheet->setCellValue("L1", 'Fecha Pago');
        $sheet->setCellValue("M1", 'Estado');

        $contador = 1;

        foreach ($list_solicitud as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:M{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:M{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['Codigo']);
            $sheet->setCellValue("B{$contador}", $list['N_Doc']);
            $sheet->setCellValue("C{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("D{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("E{$contador}", $list['Nombres']);
            $sheet->setCellValue("F{$contador}", $list['Producto']);
            $sheet->setCellValue("G{$contador}", $list['Monto']);
            $sheet->setCellValue("H{$contador}", $list['Descuento']);
            $sheet->setCellValue("I{$contador}", $list['Penalidad']);
            $sheet->setCellValue("J{$contador}", $list['SubTotal']);
            $sheet->setCellValue("K{$contador}", $list['Recibo']);
            $sheet->setCellValue("L{$contador}", Date::PHPToExcel($list['Fecha_Pago']));
            $sheet->getStyle("L{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("M{$contador}", $list['Estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Solicitud (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-------------------------------------------------REGISTRO BIBLIOTECA----------------------------------
    public function Registro_Biblioteca()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/registro_biblioteca/index', $dato);
        } else {
            redirect('/login');
        }
    }

    //-------------------------------------------------LISTA BIBLIOTECA----------------------------------
    public function Lis_Biblioteca()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/lista_biblioteca/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Biblioteca()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_biblioteca'] = $this->Model_IFV->get_list_biblioteca();
            $dato['list_unidad_didactica'] = $this->Model_IFV->get_list_unidad_didactica_biblioteca();
            $this->load->view('view_IFV/lista_biblioteca/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Lista_Biblioteca()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/lista_biblioteca/registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Biblioteca_Especialidad_Modulo()
    {
        $id_especialidad = $this->input->post("id_especialidad");
        $dato['list_modulo'] = $this->Model_IFV->biblioteca_especialidad_modulo($id_especialidad);
        $this->load->view('view_IFV/lista_biblioteca/modulo', $dato);
    }

    public function Biblioteca_Modulo_Ciclo()
    {
        $id_especialidad = $this->input->post("id_especialidad");
        $id_modulo = $this->input->post("id_modulo");
        $dato['list_ciclo'] = $this->Model_IFV->biblioteca_modulo_ciclo($id_especialidad, $id_modulo);
        $this->load->view('view_IFV/lista_biblioteca/ciclo', $dato);
    }

    public function Traer_Unidad_Didactica()
    {
        if ($this->session->userdata('usuario')) {
            $id_especialidad = $this->input->post("id_especialidad");
            $dato['list_unidad_didactica'] = $this->Model_IFV->get_list_unidad_didactica_biblioteca($id_especialidad);
            $this->load->view('view_IFV/lista_biblioteca/unidad_didactica', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Lista_Biblioteca()
    {
        $dato['estado_b'] = $this->input->post("estado_b");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['id_modulo'] = $this->input->post("id_modulo");
        $dato['id_ciclo'] = $this->input->post("id_ciclo");
        $dato['id_unidad_didactica'] = $this->input->post("id_unidad_didactica");
        $dato['titulo'] = $this->input->post("titulo");
        $dato['subtitulo'] = $this->input->post("subtitulo");
        $dato['autor'] = $this->input->post("autor");
        $dato['editorial'] = $this->input->post("editorial");
        $dato['anio'] = $this->input->post("anio");
        $dato['cantidad'] = $this->input->post("cantidad");
        $dato['tipo'] = $this->input->post("tipo");
        $dato['fecha_compra'] = $this->input->post("fecha_compra");
        $dato['monto'] = $this->input->post("monto");
        $dato['observaciones'] = $this->input->post("observaciones");
        $dato['cod_barra'] = $this->input->post("cod_barra");

        $anio = date('Y');
        $query_id = $this->Model_IFV->ultimo_cod_biblioteca();
        $totalRows_t = count($query_id);
        $aniof = substr($anio, 2, 2);
        if ($totalRows_t < 9) {
            $codigo = $aniof . "000" . ($totalRows_t + 1);
        }
        if ($totalRows_t > 8 && $totalRows_t < 99) {
            $codigo = $aniof . "00" . ($totalRows_t + 1);
        }
        if ($totalRows_t > 98 && $totalRows_t < 999) {
            $codigo = $aniof . "0" . ($totalRows_t + 1);
        }

        $dato['cod_biblioteca'] = $codigo;

        $this->Model_IFV->insert_lista_biblioteca($dato);
    }

    public function Modal_Update_Lista_Biblioteca($id_biblioteca)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_biblioteca($id_biblioteca);
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();
            $dato['list_modulo'] = $this->Model_IFV->biblioteca_especialidad_modulo($dato['get_id'][0]['id_especialidad']);
            $dato['list_ciclo'] = $this->Model_IFV->biblioteca_modulo_ciclo($dato['get_id'][0]['id_especialidad'], $dato['get_id'][0]['id_modulo']);
            $dato['list_unidad_didactica'] = $this->Model_IFV->get_list_unidad_didactica_biblioteca($dato['get_id'][0]['id_especialidad']);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/lista_biblioteca/editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Lista_Biblioteca()
    {
        $dato['id_biblioteca'] = $this->input->post("id_biblioteca");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['id_modulo'] = $this->input->post("id_modulo");
        $dato['id_ciclo'] = $this->input->post("id_ciclo");
        $dato['id_unidad_didactica'] = $this->input->post("id_unidad_didactica");
        $dato['titulo'] = $this->input->post("titulo");
        $dato['subtitulo'] = $this->input->post("subtitulo");
        $dato['autor'] = $this->input->post("autor");
        $dato['editorial'] = $this->input->post("editorial");
        $dato['anio'] = $this->input->post("anio");
        $dato['cantidad'] = $this->input->post("cantidad");
        $dato['tipo'] = $this->input->post("tipo");
        $dato['fecha_compra'] = $this->input->post("fecha_compra");
        $dato['monto'] = $this->input->post("monto");
        $dato['observaciones'] = $this->input->post("observaciones");
        $dato['cod_barra'] = $this->input->post("cod_barra");

        $this->Model_IFV->update_lista_biblioteca($dato);
    }

    public function Delete_Lista_Biblioteca()
    {
        $dato['id_biblioteca'] = $this->input->post("id_biblioteca");
        $this->Model_IFV->delete_lista_biblioteca($dato);
    }

    public function Excel_Lista_Biblioteca()
    {
        $list_biblioteca = $this->Model_IFV->get_list_biblioteca();
        $list_unidad_didactica = $this->Model_IFV->get_list_unidad_didactica_biblioteca();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:Q1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:Q1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Lista Biblioteca');

        $sheet->setAutoFilter('A1:Q1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(30);
        $sheet->getColumnDimension('F')->setWidth(30);
        $sheet->getColumnDimension('G')->setWidth(30);
        $sheet->getColumnDimension('H')->setWidth(30);
        $sheet->getColumnDimension('I')->setWidth(30);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(25);
        $sheet->getColumnDimension('M')->setWidth(18);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(40);
        $sheet->getColumnDimension('P')->setWidth(18);
        $sheet->getColumnDimension('Q')->setWidth(15);

        $sheet->getStyle('A1:Q1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:Q1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:Q1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código Barra');
        $sheet->setCellValue("B1", 'Especialidad');
        $sheet->setCellValue("C1", 'Módulo');
        $sheet->setCellValue("D1", 'Ciclo');
        $sheet->setCellValue("E1", 'Unidad Didáctica');
        $sheet->setCellValue("F1", 'Título');
        $sheet->setCellValue("G1", 'Sub-Título');
        $sheet->setCellValue("H1", 'Autor');
        $sheet->setCellValue("I1", 'Editorial');
        $sheet->setCellValue("J1", 'Año');
        $sheet->setCellValue("K1", 'Cantidad');
        $sheet->setCellValue("L1", 'Tipo');
        $sheet->setCellValue("M1", 'Fecha Compra');
        $sheet->setCellValue("N1", 'Monto');
        $sheet->setCellValue("O1", 'Observaciones');
        $sheet->setCellValue("P1", 'Requisitado');
        $sheet->setCellValue("Q1", 'Estado');

        $contador = 1;

        foreach ($list_biblioteca as $list) {
            $contador++;

            $busqueda = in_array($list['id_unidad_didactica'], array_column($list_unidad_didactica, 'id_unidad_didactica'));
            if ($busqueda != false) {
                $posicion = array_search($list['id_unidad_didactica'], array_column($list_unidad_didactica, 'id_unidad_didactica'));
                $nom_unidad_didactica = $list_unidad_didactica[$posicion]['nom_unidad_didactica'];
            } else {
                $nom_unidad_didactica = "";
            }

            $sheet->getStyle("A{$contador}:Q{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}:I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("L{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("O{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:Q{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:Q{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['cod_barra']);
            $sheet->setCellValue("B{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("C{$contador}", $list['nom_modulo']);
            $sheet->setCellValue("D{$contador}", $list['nom_ciclo']);
            $sheet->setCellValue("E{$contador}", $nom_unidad_didactica);
            $sheet->setCellValue("F{$contador}", $list['titulo']);
            $sheet->setCellValue("G{$contador}", $list['subtitulo']);
            $sheet->setCellValue("H{$contador}", $list['autor']);
            $sheet->setCellValue("I{$contador}", $list['editorial']);
            $sheet->setCellValue("J{$contador}", $list['anio']);
            $sheet->setCellValue("K{$contador}", $list['cantidad']);
            $sheet->setCellValue("L{$contador}", $list['tipo']);
            if ($list['fecha_compra'] == "0000-00-00" || $list['fecha_compra'] == '') {
                $sheet->setCellValue("M{$contador}", "");
            } else {
                $sheet->setCellValue("M{$contador}", Date::PHPToExcel($list['fecha_compra']));
                $sheet->getStyle("M{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }
            $sheet->setCellValue("N{$contador}", $list['monto']);
            $sheet->setCellValue("O{$contador}", $list['observaciones']);
            $sheet->setCellValue("P{$contador}", "");
            $sheet->setCellValue("Q{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Lista Biblioteca (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //------------------------------------------HISTÓRICO EXTRANET---------------------------------------------
    public function Historico_Extranet()
    { //bbbbbbbbbbbbbbb
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/historico_extranet/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Historico_Extranet()
    {
        if ($this->session->userdata('usuario')) {
            $fec_inicio = $this->input->post("fec_inicio");
            $fec_fin = $this->input->post("fec_fin");
            $dato['list_historico_extranet'] = $this->Model_IFV->get_list_historico_extranet($fec_inicio, $fec_fin);
            $dato['list_matriculado'] = $this->Model_IFV->get_list_matriculados(1);

            $this->load->view('view_IFV/historico_extranet/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Historico_Extranet($fec_inicio, $fec_fin)
    {
        $fec_inicio = substr($fec_inicio, 0, 4) . "-" . substr($fec_inicio, 4, 2) . "-" . substr($fec_inicio, -2);
        $fec_fin = substr($fec_fin, 0, 4) . "-" . substr($fec_fin, 4, 2) . "-" . substr($fec_fin, -2);
        $list_historico_extranet = $this->Model_IFV->get_list_historico_extranet($fec_inicio, $fec_fin);
        $list_matriculado = $this->Model_IFV->get_list_matriculados(1);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:L1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:L1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Histórico Extranet (Lista)');

        $sheet->setAutoFilter('A1:L1');

        $sheet->getColumnDimension('A')->setWidth(18);
        $sheet->getColumnDimension('B')->setWidth(18);
        $sheet->getColumnDimension('C')->setWidth(18);
        $sheet->getColumnDimension('D')->setWidth(18);
        $sheet->getColumnDimension('E')->setWidth(18);
        $sheet->getColumnDimension('F')->setWidth(30);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(30);
        $sheet->getColumnDimension('I')->setWidth(30);
        $sheet->getColumnDimension('J')->setWidth(30);
        $sheet->getColumnDimension('K')->setWidth(40);
        $sheet->getColumnDimension('L')->setWidth(12);

        $sheet->getStyle('A1:L1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:L1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:L1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Fecha LogIN');
        $sheet->setCellValue("B1", 'Hora LogIN');
        $sheet->setCellValue("C1", 'Fecha LogOUT');
        $sheet->setCellValue("D1", 'Hora LogOUT');
        $sheet->setCellValue("E1", 'Tipo Acceso');
        $sheet->setCellValue("F1", 'Usuario');
        $sheet->setCellValue("G1", 'Código');
        $sheet->setCellValue("H1", 'Apellidos Paterno');
        $sheet->setCellValue("I1", 'Apellidos Materno');
        $sheet->setCellValue("J1", 'Nombres');
        $sheet->setCellValue("K1", 'Especialidad');
        $sheet->setCellValue("L1", 'Grupo');

        $contador = 1;

        foreach ($list_historico_extranet as $list) {
            $contador++;

            $especialidad = "";
            $grupo = "";
            $busqueda = in_array($list['documento'], array_column($list_matriculado, 'Dni'));
            if ($busqueda != false) {
                $posicion = array_search($list['documento'], array_column($list_matriculado, 'Dni'));
                $codigo = $list_matriculado[$posicion]['Codigo'];
                $especialidad = $list_matriculado[$posicion]['Especialidad'];
                $grupo = $list_matriculado[$posicion]['Grupo'];
            }

            $sheet->getStyle("A{$contador}:L{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:L{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:L{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            if ($list['dUltimo_Acceso'] != "") {
                $sheet->setCellValue("A{$contador}", Date::PHPToExcel($list['dUltimo_Acceso']));
                $sheet->getStyle("A{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("A{$contador}", "");
            }

            $sheet->setCellValue("B{$contador}", $list['hUltimo_Acceso']);

            if ($list['dLogout'] != "") {
                $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['dLogout']));
                $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("C{$contador}", "");
            }

            $sheet->setCellValue("D{$contador}", $list['hLogout']);

            $sheet->setCellValue("E{$contador}", $list['tipo_acceso']);
            $sheet->setCellValue("F{$contador}", $list['Usuario']);
            $sheet->setCellValue("G{$contador}", $codigo);
            $sheet->setCellValue("H{$contador}", $list['FatherSurname']);
            $sheet->setCellValue("I{$contador}", $list['MotherSurname']);
            $sheet->setCellValue("J{$contador}", $list['FirstName']);
            $sheet->setCellValue("K{$contador}", $especialidad);
            $sheet->setCellValue("L{$contador}", $grupo);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Histórico Extranet (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Buscar_Libro()
    {
        if ($this->session->userdata('usuario')) {
            $cod_libro = $this->input->post("cod_libro");
            $dato['get_busqueda'] = $this->Model_IFV->busqueda_libro_cod($cod_libro);
            $dato['list_unidad_didactica'] = $this->Model_IFV->get_list_unidad_didactica_biblioteca();
            if (count($dato['get_busqueda']) > 0) {
                echo $dato['get_busqueda'][0]['id_biblioteca'];
                //$this->load->view('view_IFV/registro_biblioteca/busqueda', $dato);
            } else {
                echo "error";
            }

        } else {
            redirect('/login');
        }
    }

    public function Descripcion_Libro($id_biblioteca)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_biblioteca($id_biblioteca);
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();
            $dato['list_modulo'] = $this->Model_IFV->biblioteca_especialidad_modulo($dato['get_id'][0]['id_especialidad']);
            $dato['list_ciclo'] = $this->Model_IFV->biblioteca_modulo_ciclo($dato['get_id'][0]['id_especialidad'], $dato['get_id'][0]['id_modulo']);
            $dato['list_unidad_didactica'] = $this->Model_IFV->get_list_unidad_didactica_biblioteca($dato['get_id'][0]['id_especialidad']);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->Model_IFV->delete_alumno_temporal_libreria();
            $this->load->view('view_IFV/registro_biblioteca/detalle_libro', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Requisitar()
    {
        if ($this->session->userdata('usuario')) {
            //$dato['list_alumno'] = $this->Model_IFV->get_list_alumno_matriculado();
            $this->load->view('view_IFV/registro_biblioteca/modal_requisitar');
        } else {
            redirect('/login');
        }
    }

    public function Buscar_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $InternalStudentId = $this->input->post("codigo");
            $dato['accion'] = $this->input->post("accion");

            $this->Model_IFV->delete_alumno_temporal_libreria();
            if ($dato['accion'] == 3) {
                $dato['get_busqueda'] = $this->Model_IFV->get_cod_administrador($InternalStudentId);
                if (count($dato['get_busqueda']) > 0) {
                    $dato['InternalStudentId'] = $dato['get_busqueda'][0]['codigo'];
                    $dato['FirstName'] = $dato['get_busqueda'][0]['usuario_nombres'];
                    $dato['FatherSurname'] = $dato['get_busqueda'][0]['usuario_apater'];
                    $dato['MotherSurname'] = $dato['get_busqueda'][0]['usuario_amater'];
                    $dato['CareerName'] = "Administrador";
                    $this->Model_IFV->insert_alumno_temporal_libreria($dato);
                } else {
                    echo "3¡No se encontró administrador, por favor verificar código!";
                }
            } else {
                $dato['get_busqueda'] = $this->Model_IFV->get_cod_matriculado($InternalStudentId);
                if (count($dato['get_busqueda']) > 0) {
                    $dato['InternalStudentId'] = $dato['get_busqueda'][0]['InternalStudentId'];
                    $dato['FirstName'] = $dato['get_busqueda'][0]['FirstName'];
                    $dato['FatherSurname'] = $dato['get_busqueda'][0]['FatherSurname'];
                    $dato['MotherSurname'] = $dato['get_busqueda'][0]['MotherSurname'];
                    $dato['CareerName'] = $dato['get_busqueda'][0]['CareerName'];
                    $this->Model_IFV->insert_alumno_temporal_libreria($dato);
                } else {
                    echo "1¡No se encontró alumno, por favor verificar código!";
                }
            }

        } else {
            redirect('/login');
        }
    }

    public function Scanner_Requisitado()
    {
        if ($this->session->userdata('usuario')) {
            $dato['valor'] = $this->input->post("valor");
            $this->Model_IFV->delete_alumno_temporal_libreria();
            $this->load->view('view_IFV/registro_biblioteca/Scanner/index', $dato);
        } else {
            //$this->load->view('view_IFV/asistencia/login');
            redirect('/login');
        }
    }

    public function Consulta_Almuno_Temporal_Biblioteca()
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_temporal'] = $this->Model_IFV->consulta_alumno_temporal_libreria();
            //$dato['get_busqueda'] = $this->Model_IFV->get_cod_matriculado($dato['get_temporal'][0]['InternalStudentId']);
            //echo count($dato['get_busqueda']);
            $this->load->view('view_IFV/registro_biblioteca/busqueda_alumno', $dato);

        } else {
            redirect('/login');
        }
    }

    public function Insert_Accion_Biblioteca()
    {
        if ($this->session->userdata('usuario')) {
            $anio = date('Y');
            $query_id = $this->Model_IFV->cantidad_biblioteca_acciones();
            $totalRows_t = count($query_id);

            $aniof = substr($anio, 2, 2);
            if ($totalRows_t < 9) {
                $codigo = $aniof . "000" . ($totalRows_t + 1);
            }

            if ($totalRows_t > 8 && $totalRows_t < 99) {
                $codigo = $aniof . "00" . ($totalRows_t + 1);
            }

            if ($totalRows_t > 98 && $totalRows_t < 999) {
                $codigo = $aniof . "0" . ($totalRows_t + 1);
            }

            if ($totalRows_t > 998) {
                $codigo = $aniof . ($totalRows_t + 1);
            }
            $dato['cod_accion'] = $codigo;

            $dato['id_biblioteca'] = $this->input->post("id_biblioteca");
            $dato['accion'] = $this->input->post("accion");
            if ($dato['accion'] == 1) {
                $dato['get_disponibilidad'] = $this->Model_IFV->consulta_disponibilidad_libro($dato);
                if (count($dato['get_disponibilidad']) > 0) {
                    echo "1_error";
                } else {
                    $this->Model_IFV->insert_accion_biblioteca($dato);
                }
            } elseif ($dato['accion'] == 2) {
                //$dato['get_temporal'] = $this->Model_IFV->consulta_alumno_temporal_libreria_reg($dato);
                $get_bd = $this->Model_IFV->valida_accion_biblioteca($dato);
                if (count($get_bd) > 0) {
                    echo "2_error";
                } else {
                    //$dato['id_biblioteca_a']=$get_bd[0]['id_biblioteca_a'];
                    $this->Model_IFV->insert_accion_biblioteca($dato);
                }
            } else {
                $this->Model_IFV->insert_accion_biblioteca($dato);
            }


        } else {
            redirect('/login');
        }
    }

    public function Historico_Biblioteca()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_dashboard'] = $this->Model_IFV->get_dashboard_historico_biblioteca();
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/historico_biblioteca/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Cargar_Historico_Biblioteca()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_historico'] = $this->Model_IFV->get_list_historico_biblioteca();

            $this->load->view('view_IFV/historico_biblioteca/busqueda', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Historia_Biblioteca()
    {
        $dato['list_historico'] = $this->Model_IFV->get_list_historico_biblioteca();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:J1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:J1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Lista historia Biblioteca');

        $sheet->setAutoFilter('A1:J1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(30);
        $sheet->getColumnDimension('I')->setWidth(30);
        $sheet->getColumnDimension('J')->setWidth(30);

        $sheet->getStyle('A1:J1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:J1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:J1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Alumno');
        $sheet->setCellValue("C1", 'Especialidad');
        $sheet->setCellValue("D1", 'Acción');
        $sheet->setCellValue("E1", 'Fecha');
        $sheet->setCellValue("F1", 'Usuario');
        $sheet->setCellValue("G1", 'Código');
        $sheet->setCellValue("H1", 'Titulo');
        $sheet->setCellValue("I1", 'Sub-Titulo');
        $sheet->setCellValue("J1", 'Editorial');

        $contador = 1;

        foreach ($dato['list_historico'] as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("H{$contador}:J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            //$sheet->getStyle("A{$contador}:J{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:J{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['InternalStudentId']);
            $sheet->setCellValue("B{$contador}", $list['nombres'] . " " . $list['apater'] . " " . $list['amater']);
            $sheet->setCellValue("C{$contador}", $list['especialidad']);
            $sheet->setCellValue("D{$contador}", $list['nom_accion']);

            $sheet->setCellValue("E{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);

            //$sheet->setCellValue("E{$contador}", $list['fecha']);
            $sheet->setCellValue("F{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("G{$contador}", $list['cod_biblioteca']);
            $sheet->setCellValue("H{$contador}", $list['titulo']);
            $sheet->setCellValue("I{$contador}", $list['subtitulo']);
            $sheet->setCellValue("J{$contador}", $list['editorial']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Lista historia Biblioteca (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Modal_Buscar_Alumno_Libro($accion)
    {
        if ($this->session->userdata('usuario')) {
            $this->Model_IFV->delete_alumno_temporal_libreria();
            //$dato['list_alumno'] = $this->Model_IFV->get_list_alumno_matriculado();
            $dato['accion'] = $accion;
            $this->load->view('view_IFV/registro_biblioteca/modal_alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Buscar_Alumno_Cmb($accion)
    {
        if ($this->session->userdata('usuario')) {
            $dato['accion'] = $accion;
            if ($accion == 3) {
                $dato['list_alumno'] = $this->Model_IFV->get_users_administrador();
            } else {
                $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_matriculado();
            }
            $this->load->view('view_IFV/registro_biblioteca/cmb_alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    //------------------------------------------LISTA ADMISIÓN---------------------------------------------
    public function Lista_Admision()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_admision'] = $this->Model_IFV->get_list_admision();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/lista_admision/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Enviar_Correo_Admision()
    {
        if ($this->session->userdata('usuario')) {
            foreach ($_POST['correos'] as $correo) {
                /*$mail = new PHPMailer(true);

                try {
                    $mail->SMTPDebug = 0;                      // Enable verbose debug output
                    $mail->isSMTP();                                            // Send using SMTP
                    $mail->Host       = 'smtp.gmail.com';                    // Set the SMTP server to send through
                    $mail->SMTPAuth   = true;                                   // Enable SMTP authentication
                    $mail->Username   = 'admision@ifv.edu.pe';                     // usuario de acceso
                    $mail->Password   = 'ldej fhvy sqth tmnp';                                // SMTP password
                    $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                    $mail->Port       = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                    $mail->setFrom('admision@ifv.edu.pe', "Admisión IFV"); //desde donde se envia

                    $mail->addAddress($correo);

                    $mail->isHTML(true);                                  // Set email format to HTML

                    $mail->Subject = "Subir Documentos";

                    $mail->Body = '¡Hola Estimado postulante!<br>
                                    Debe subir sus documentos pendientes en el siguiente link: <a href="https://snappy.org.pe/">https://snappy.org.pe/</a>';
                    $mail->CharSet = 'UTF-8';
                    $mail->send();
                } catch (Exception $e) {
                    echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                }*/
            }
        } else {
            redirect('/login');
        }
    }

    public function Excel_Lista_Admision()
    {
        $list_admision = $this->Model_IFV->get_list_admision();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:J1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:J1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Admisión');

        $sheet->setAutoFilter('A1:J1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(40);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(20);
        $sheet->getColumnDimension('F')->setWidth(30);
        $sheet->getColumnDimension('G')->setWidth(30);
        $sheet->getColumnDimension('H')->setWidth(30);
        $sheet->getColumnDimension('I')->setWidth(22);
        $sheet->getColumnDimension('J')->setWidth(18);

        $sheet->getStyle('A1:J1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:J1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:J1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Estado');
        $sheet->setCellValue("C1", 'Especialidad');
        $sheet->setCellValue("D1", 'Grupo');
        $sheet->setCellValue("E1", 'Nr. Documento');
        $sheet->setCellValue("F1", 'Apellido Paterno');
        $sheet->setCellValue("G1", 'Apellido Materno');
        $sheet->setCellValue("H1", 'Nombre');
        $sheet->setCellValue("I1", 'Fecha Inscripción');
        $sheet->setCellValue("J1", 'Creado Por');


        $contador = 1;

        foreach ($list_admision as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:J{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:J{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['Id']);
            $sheet->setCellValue("B{$contador}", "");
            $sheet->setCellValue("C{$contador}", $list['Especialidad']);
            $sheet->setCellValue("D{$contador}", $list['Grupo']);
            $sheet->setCellValue("E{$contador}", $list['IdentityCardNumber']);
            $sheet->setCellValue("F{$contador}", $list['FatherSurname']);
            $sheet->setCellValue("G{$contador}", $list['MotherSurname']);
            $sheet->setCellValue("H{$contador}", $list['FirstName']);
            $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['Fecha_Inscripcion']));
            $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("J{$contador}", $list['Creado_Por']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Admisión (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //------------------------------------------RECIBIDOS---------------------------------------------
    public function Recibido()
    {
        if ($this->session->userdata('usuario')) {
            //$dato['list_historico_extranet'] = $this->Model_IFV->get_list_historico_extranet();
            $dato['list_matriculado'] = $this->Model_IFV->get_list_matriculados(1);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/recibidos/index', $dato);
        } else {
            redirect('/login');
        }
    }

    //---------------------------------------SALÓN-----------------------------------------
    public function Salon()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_salon'] = $this->Model_IFV->get_list_salon();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/salon/index', $dato);
    }

    public function Registrar_Salon()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo_salon'] = $this->Model_IFV->get_list_tipo_salon();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/salon/registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Salon()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_tipo_salon'] = $this->input->post("id_tipo_salon_i");
            $dato['planta'] = $this->input->post("planta_i");
            $dato['descripcion'] = $this->input->post("descripcion_i");
            $dato['referencia'] = $this->input->post("referencia_i");
            $dato['ae'] = $this->input->post("AE_i");
            $dato['cf'] = $this->input->post("CF_i");
            $dato['ds'] = $this->input->post("DS_i");
            $dato['et'] = $this->input->post("ET_i");
            $dato['ft'] = $this->input->post("FT_i");
            $dato['capacidad'] = $this->input->post("capacidad_i");
            $dato['disponible'] = $this->input->post("disponible_i");
            $dato['pintura'] = $this->input->post("pintura_i");
            $dato['chapa'] = $this->input->post("chapa_i");
            $dato['pizarra'] = $this->input->post("pizarra_i");
            $dato['proyector'] = $this->input->post("proyector_i");
            $dato['puerta'] = $this->input->post("puerta_i");
            $dato['tacho'] = $this->input->post("tacho_i");
            $dato['cortina'] = $this->input->post("cortina_i");
            $dato['iluminacion'] = $this->input->post("iluminacion_i");
            $dato['mueble'] = $this->input->post("mueble_i");
            $dato['mesa_profesor'] = $this->input->post("mesa_profesor_i");
            $dato['enchufe'] = $this->input->post("enchufe_i");
            $dato['computadora'] = $this->input->post("computadora_i");
            $dato['silla_profesor'] = $this->input->post("silla_profesor_i");
            $dato['observaciones'] = $this->input->post("observaciones_i");
            $dato['carpetatp'] = $this->input->post("carpetatp_i");
            $dato['carpetacant'] = $this->input->post("carpetacant_i");
            $dato['aforodbl'] = $this->input->post("aforodbl_i");
            $dato['aforoind'] = $this->input->post("aforoind_i");

            $total = count($this->Model_IFV->valida_insert_salon($dato));

            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_salon($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Editar_Salon($id_salon)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_salon($id_salon);
            $dato['list_tipo_salon'] = $this->Model_IFV->get_list_tipo_salon();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/salon/editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Salon()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_salon'] = $this->input->post("id_salon");
            $dato['id_tipo_salon'] = $this->input->post("id_tipo_salon_u");
            $dato['planta'] = $this->input->post("planta_u");
            $dato['referencia'] = $this->input->post("referencia_u");
            $dato['descripcion'] = $this->input->post("descripcion_u");
            $dato['ae'] = $this->input->post("AE_u");
            $dato['cf'] = $this->input->post("CF_u");
            $dato['ds'] = $this->input->post("DS_u");
            $dato['et'] = $this->input->post("ET_u");
            $dato['ft'] = $this->input->post("FT_u");
            $dato['capacidad'] = $this->input->post("capacidad_u");
            $dato['disponible'] = $this->input->post("disponible_u");
            $dato['pintura'] = $this->input->post("pintura_u");
            $dato['chapa'] = $this->input->post("chapa_u");
            $dato['pizarra'] = $this->input->post("pizarra_u");
            $dato['proyector'] = $this->input->post("proyector_u");
            $dato['puerta'] = $this->input->post("puerta_u");
            $dato['tacho'] = $this->input->post("tacho_u");
            $dato['cortina'] = $this->input->post("cortina_u");
            $dato['iluminacion'] = $this->input->post("iluminacion_u");
            $dato['mueble'] = $this->input->post("mueble_u");
            $dato['mesa_profesor'] = $this->input->post("mesa_profesor_u");
            $dato['enchufe'] = $this->input->post("enchufe_u");
            $dato['computadora'] = $this->input->post("computadora_u");
            $dato['silla_profesor'] = $this->input->post("silla_profesor_u");
            $dato['observaciones'] = $this->input->post("observaciones_u");
            $dato['estado_salon'] = $this->input->post("estado_salon_u");
            $dato['carpetatp'] = $this->input->post("carpetatp_u");
            $dato['carpetacant'] = $this->input->post("carpetacant_u");
            $dato['aforodbl'] = $this->input->post("aforodbl_u");
            $dato['aforoind'] = $this->input->post("aforoind_u");

            $total = count($this->Model_IFV->valida_update_salon($dato));

            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_salon($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_Salon()
    {
        $dato['id_salon'] = $this->input->post("id_salon");
        $this->Model_IFV->delete_salon($dato);
    }

    public function Excel_Salon()
    {
        $list_salon = $this->Model_IFV->get_list_salon();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("B2:AE2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("B2:AE2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Salones');

        $sheet->setAutoFilter('B2:AE2');
        $sheet->freezePane('A3');

        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(18);
        $sheet->getColumnDimension('D')->setWidth(40);
        $sheet->getColumnDimension('E')->setWidth(40);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(30);
        $sheet->getColumnDimension('L')->setWidth(30);
        $sheet->getColumnDimension('M')->setWidth(20);
        $sheet->getColumnDimension('N')->setWidth(20);
        $sheet->getColumnDimension('O')->setWidth(20);
        $sheet->getColumnDimension('P')->setWidth(20);
        $sheet->getColumnDimension('Q')->setWidth(25);
        $sheet->getColumnDimension('R')->setWidth(25);
        $sheet->getColumnDimension('S')->setWidth(25);
        $sheet->getColumnDimension('T')->setWidth(25);
        $sheet->getColumnDimension('U')->setWidth(25);
        $sheet->getColumnDimension('V')->setWidth(25);
        $sheet->getColumnDimension('W')->setWidth(25);
        $sheet->getColumnDimension('X')->setWidth(25);
        $sheet->getColumnDimension('Y')->setWidth(25);
        $sheet->getColumnDimension('Z')->setWidth(25);
        $sheet->getColumnDimension('AA')->setWidth(25);
        $sheet->getColumnDimension('AB')->setWidth(20);
        $sheet->getColumnDimension('AC')->setWidth(50);
        $sheet->getColumnDimension('AD')->setWidth(15);
        $sheet->getColumnDimension('AE')->setWidth(50);

        $sheet->getStyle('B2:AE2')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("B2:AE2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("B2:AE2")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("B2", 'Planta');
        $sheet->setCellValue("C2", 'Referencia');
        $sheet->setCellValue("D2", 'Tipo');
        $sheet->setCellValue("E2", 'Descripción');
        $sheet->setCellValue("F2", 'AE');
        $sheet->setCellValue("G2", 'CF');
        $sheet->setCellValue("H2", 'DS');
        $sheet->setCellValue("I2", 'ET');
        $sheet->setCellValue("J2", 'FT');
        $sheet->setCellValue("K2", 'Capacidad Alumno');
        $sheet->setCellValue("L2", 'Disponibilidad Alumno');
        $sheet->setCellValue("M2", 'Aforo CP Dbl');
        $sheet->setCellValue("N2", 'Aforo CP Ind');
        $sheet->setCellValue("O2", 'Carpetas (Tp)');
        $sheet->setCellValue("P2", 'Carpetas (Cant)');
        $sheet->setCellValue("Q2", 'Pintura');
        $sheet->setCellValue("R2", 'Chapa');
        $sheet->setCellValue("S2", 'Pizarra');
        $sheet->setCellValue("T2", 'Proyector');
        $sheet->setCellValue("U2", 'Puerta');
        $sheet->setCellValue("V2", 'Tacho');
        $sheet->setCellValue("W2", 'Cortinas');
        $sheet->setCellValue("X2", 'Iluminación');
        $sheet->setCellValue("Y2", 'Mueble');
        $sheet->setCellValue("Z2", 'Mesa Profesor');
        $sheet->setCellValue("AA2", 'Enchufes');
        $sheet->setCellValue("AB2", 'Computadora');
        $sheet->setCellValue("AC2", 'Silla Profesor');
        $sheet->setCellValue("AD2", 'Estado');
        $sheet->setCellValue("AE2", 'Observaciones');

        $contador = 2;

        foreach ($list_salon as $list) {
            $contador++;

            $sheet->getStyle("B{$contador}:AE{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("D{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("Q{$contador}:AC{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("AE{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("B{$contador}:AE{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("B{$contador}:AE{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("B{$contador}", $list['planta']);
            $sheet->setCellValue("C{$contador}", $list['referencia']);
            $sheet->setCellValue("D{$contador}", $list['nom_tipo_salon']);
            $sheet->setCellValue("E{$contador}", $list['descripcion']);
            $sheet->setCellValue("F{$contador}", $list['ae']);
            $sheet->setCellValue("G{$contador}", $list['cf']);
            $sheet->setCellValue("H{$contador}", $list['ds']);
            $sheet->setCellValue("I{$contador}", $list['et']);
            $sheet->setCellValue("J{$contador}", $list['ft']);
            $sheet->setCellValue("K{$contador}", $list['capacidad']);
            $sheet->setCellValue("L{$contador}", $list['disponible']);
            $sheet->setCellValue("M{$contador}", $list['aforodbl']);
            $sheet->setCellValue("N{$contador}", $list['aforoindf']);
            $sheet->setCellValue("O{$contador}", $list['carpetatp']);
            $sheet->setCellValue("P{$contador}", $list['carpetacant']);
            $sheet->setCellValue("Q{$contador}", $list['pintura']);
            $sheet->setCellValue("R{$contador}", $list['chapa']);
            $sheet->setCellValue("S{$contador}", $list['pizarra']);
            $sheet->setCellValue("T{$contador}", $list['proyector']);
            $sheet->setCellValue("U{$contador}", $list['puerta']);
            $sheet->setCellValue("V{$contador}", $list['tacho']);
            $sheet->setCellValue("W{$contador}", $list['cortina']);
            $sheet->setCellValue("X{$contador}", $list['iluminacion']);
            $sheet->setCellValue("Y{$contador}", $list['mueble']);
            $sheet->setCellValue("Z{$contador}", $list['mesa_profesor']);
            $sheet->setCellValue("AA{$contador}", $list['enchufe']);
            $sheet->setCellValue("AB{$contador}", $list['computadora']);
            $sheet->setCellValue("AC{$contador}", $list['silla_profesor']);
            $sheet->setCellValue("AD{$contador}", $list['estado_salon']);
            $sheet->setCellValue("AE{$contador}", $list['observaciones']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Salón (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------RRHH-----------------------------------------
    public function Rrhh()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_rrhh'] = $this->Model_IFV->get_list_rrhh();
        $dato['rrhh'] = $this->Model_IFV->get_list_rrhh_registrados();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/rrhh/index', $dato);
    }

    public function Modal_Rrhh($EmployeeId)
    {
        if ($this->session->userdata('usuario')) {
            $dato['EmployeeId'] = $EmployeeId;
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/rrhh/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Rrhh()
    {
        $dato['EmployeeId'] = $this->input->post("EmployeeId_i");
        $dato['ae'] = $this->input->post("AE_i");
        $dato['cf'] = $this->input->post("CF_i");
        $dato['ds'] = $this->input->post("DS_i");
        $dato['et'] = $this->input->post("ET_i");
        $dato['ft'] = $this->input->post("FT_i");
        $this->Model_IFV->insert_rrhh($dato);
    }

    public function Modal_Update_Rrhh($id_rrhh)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_rrhh_registrados($id_rrhh);
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/rrhh/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Rrhh()
    {
        $dato['id_rrhh'] = $this->input->post("id_rrhh");
        $dato['ae'] = $this->input->post("AE_u");
        $dato['cf'] = $this->input->post("CF_u");
        $dato['ds'] = $this->input->post("DS_u");
        $dato['et'] = $this->input->post("ET_u");
        $dato['ft'] = $this->input->post("FT_u");
        $this->Model_IFV->update_rrhh($dato);
    }

    public function Excel_Rrhh()
    {
        $list_rrhh = $this->Model_IFV->get_list_rrhh();
        $rrhh = $this->Model_IFV->get_list_rrhh_registrados();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:O1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:O1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('RRHH');

        $sheet->setAutoFilter('A1:O1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(25);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(20);
        $sheet->getColumnDimension('G')->setWidth(20);
        $sheet->getColumnDimension('H')->setWidth(30);
        $sheet->getColumnDimension('I')->setWidth(22);
        $sheet->getColumnDimension('J')->setWidth(18);
        $sheet->getColumnDimension('K')->setWidth(10);
        $sheet->getColumnDimension('L')->setWidth(10);
        $sheet->getColumnDimension('M')->setWidth(10);
        $sheet->getColumnDimension('N')->setWidth(10);
        $sheet->getColumnDimension('O')->setWidth(10);
        $sheet->getColumnDimension('P')->setWidth(15);

        $sheet->getStyle('A1:P1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:P1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:O1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Foto');
        $sheet->setCellValue("B1", 'Apellido Paterno');
        $sheet->setCellValue("C1", 'Apellido Materno');
        $sheet->setCellValue("D1", 'Nombre');
        $sheet->setCellValue("E1", 'Código');
        $sheet->setCellValue("F1", 'Tipo Documento');
        $sheet->setCellValue("G1", 'Nr. Documento');
        $sheet->setCellValue("H1", 'Correo Corporativo');
        $sheet->setCellValue("I1", 'Fecha Nacimiento');
        $sheet->setCellValue("J1", 'Cargo');
        $sheet->setCellValue("K1", 'AE');
        $sheet->setCellValue("L1", 'CF');
        $sheet->setCellValue("M1", 'DS');
        $sheet->setCellValue("N1", 'ET');
        $sheet->setCellValue("O1", 'FT');
        $sheet->setCellValue("P1", 'Estado');

        $contador = 1;

        foreach ($list_rrhh as $list) {
            $ae = "";
            $cf = "";
            $ds = "";
            $et = "";
            $ft = "";
            $busqueda = in_array($list['Id'], array_column($rrhh, 'EmployeeId'));
            if ($busqueda != false) {
                $posicion = array_search($list['Id'], array_column($rrhh, 'EmployeeId'));
                $ae = $rrhh[$posicion]['ae'];
                $cf = $rrhh[$posicion]['cf'];
                $ds = $rrhh[$posicion]['ds'];
                $et = $rrhh[$posicion]['et'];
                $ft = $rrhh[$posicion]['ft'];
            }

            $contador++;

            $sheet->getStyle("A{$contador}:P{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:P{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:P{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['foto']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("C{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("D{$contador}", $list['Nombre']);
            $sheet->setCellValue("E{$contador}", $list['Codigo']);
            $sheet->setCellValue("F{$contador}", "DNI");
            $sheet->setCellValue("G{$contador}", $list['Dni']);
            $sheet->setCellValue("H{$contador}", $list['Email_Corporativo']);
            if ($list['Fecha_Nacimiento'] != "") {
                $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['Fecha_Nacimiento']));
                $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("I{$contador}", "");
            }
            $sheet->setCellValue("J{$contador}", $list['Cargo']);
            $sheet->setCellValue("K{$contador}", $ae);
            $sheet->setCellValue("L{$contador}", $cf);
            $sheet->setCellValue("M{$contador}", $ds);
            $sheet->setCellValue("N{$contador}", $et);
            $sheet->setCellValue("O{$contador}", $ft);
            $sheet->setCellValue("P{$contador}", "Activo");
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'RRHH (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Detalle_Rrhh($id_docente)
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['get_id'] = $this->Model_IFV->get_list_rrhh($id_docente);
        $dato['list_foto'] = $this->Model_IFV->get_list_foto_docentes($id_docente);
        $dato['list_registro_ingreso'] = $this->Model_IFV->get_list_registro_ingreso_matriculados($id_docente);

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/rrhh/detalle', $dato);
    }


    public function Modal_Foto_Docentes($id_docente)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_docente'] = $id_docente;
            $this->load->view('view_IFV/rrhh/modal_foto', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Valida_Update_Foto_Docentes()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_docente'] = $this->input->post("id_docente");
            $cantidad_foto = $this->Model_IFV->get_list_foto_docentes($dato['id_docente']);
            if (count($cantidad_foto) > 0) {
                echo "mensaje";
            }
        } else {
            redirect('/login');
        }
    }

    public function Update_Foto_Docentes()
    {
        $dato['id_docente'] = $this->input->post("id_docente");
        $dato['foto'] = "";

        $cantidad_foto = $this->Model_IFV->get_list_foto_docentes($dato['id_docente']);
        $numero = count($cantidad_foto) + 1;

        if ($_FILES["foto"]["name"] != "") {
            $config['upload_path'] = './foto_docente/' . $dato['id_docente'];
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./foto_docente/', 0777);
                chmod('./foto_docente/' . $dato['id_docente'], 0777);
            }
            $config["allowed_types"] = 'jpeg|png|jpg';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $path = $_FILES["foto"]["name"];
            $ext = pathinfo($path, PATHINFO_EXTENSION);
            $dato['nom_documento'] = "Foto_Docente_" . $dato['id_docente'] . "_" . $numero . "." . $ext;
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["foto"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["foto"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["foto"]["error"];
            $_FILES["file"]["size"] = $_FILES["foto"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['foto'] = "foto_docente/" . $dato['id_docente'] . "/" . $dato['nom_documento'];
            }
        }

        $this->Model_IFV->insert_foto_docentes($dato);
    }

    public function Descargar_Foto_Docentes($id_foto)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_foto_docentes($id_foto);
            $image = $dato['get_file'][0]['foto'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['foto']));
        } else {
            redirect('');
        }
    }

    //-----------------------------------ASISTENCIA------------------------------------
    public function Asistencia()
    {
        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/asistencia/login', $dato);
    }

    public function Lista_Registro_Ingreso()
    {
        $dato['list_registro_ingreso'] = $this->Model_IFV->get_list_registro_ingreso_a();
        $this->load->view('view_IFV/asistencia/lista', $dato);
    }

    public function Lista_Historico($codigo_alumno)
    {
        $dato['list_historico_ingreso'] = $this->Model_IFV->list_historial_registro_ingreso($codigo_alumno);
        $this->load->view('view_IFV/asistencia/modal_listado', $dato);
    }

    public function Botones_Bajos()
    {
        $ingresados = count($this->Model_IFV->get_alumnos_ingresados());
        $total = count($this->Model_IFV->get_total_matriculados());
        $sin_salida = count($this->Model_IFV->get_alumnos_sin_salida());
        $dato['ingresados'] = $ingresados;
        $dato['pendientes'] = $total - $ingresados;
        $dato['sin_salida'] = $sin_salida;
        $this->load->view('view_IFV/asistencia/botones', $dato);
    }

    public function Insert_Alumno_FV()
    {
        $codigo_alumno = $this->input->post("codigo_alumno");
        $dato['reg_automatico'] = 1;

        $dato['get_id'] = $this->Model_IFV->get_cod_matriculado($codigo_alumno);

        if (count($dato['get_id']) > 0) {
            if ($dato['get_id'][0]['Grupo'] == '22/3') {
                if ($dato['get_id'][0]['Pago_Matricula_1'] == 1 && $dato['get_id'][0]['Pago_Cuota_1'] == 1) {
                    $dato['id_alumno'] = $dato['get_id'][0]['Id'];
                    $validar = $this->Model_IFV->valida_registro_ingreso($dato);

                    if (count($validar) > 0) {
                        echo "repetido";
                    } else {
                        if ($dato['get_id'][0]['Pago_Pendiente'] >= 2) {
                            echo "cuotas";
                        } else {
                            $dato['grado'] = '';
                            $dato['seccion'] = '';
                            $dato['codigo'] = $dato['get_id'][0]['Codigoa'];
                            $dato['apater'] = $dato['get_id'][0]['Apellido_Paterno'];
                            $dato['amater'] = $dato['get_id'][0]['Apellido_Materno'];
                            $dato['nombres'] = $dato['get_id'][0]['Nombre'];
                            $dato['especialidad'] = $dato['get_id'][0]['Especialidad'];
                            $dato['grupo'] = $dato['get_id'][0]['Grupo'];
                            $dato['modulo'] = $dato['get_id'][0]['Modulo'];

                            $hora = getdate()['hours'];
                            $minuto = getdate()['minutes'];

                            if ($hora >= 7) {
                                if ($hora == 7 && ($minuto == 0 || $minuto == 1 || $minuto == 2 || $minuto == 3 || $minuto == 4 || $minuto == 5 ||
                                        $minuto == 6 || $minuto == 7 || $minuto == 8 || $minuto == 9 || $minuto == 10 || $minuto == 11 || $minuto == 12 ||
                                        $minuto == 13 || $minuto == 14 || $minuto == 15 || $minuto == 16 || $minuto == 17 || $minuto == 18 || $minuto == 19 ||
                                        $minuto == 20 || $minuto == 21 || $minuto == 22 || $minuto == 23 || $minuto == 24 || $minuto == 25 || $minuto == 26 ||
                                        $minuto == 27 || $minuto == 28 || $minuto == 29 || $minuto == 30)) {
                                    $dato['estado_ingreso'] = 1;
                                } else {
                                    $dato['estado_ingreso'] = 2;
                                }
                            } else {
                                $dato['estado_ingreso'] = 1;
                            }

                            $valida_foto = $this->Model_IFV->valida_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
                            $Documento_Pendiente = $dato['get_id'][0]['documentos_obligatorios'] - ($dato['get_id'][0]['documentos_subidos'] + $dato['get_id'][0]['Primer_Documento'] + $dato['get_id'][0]['Segundo_Documento']);

                            if ($dato['get_id'][0]['Tipo'] == 1) {
                                if ((count($valida_foto) > 0 && $dato['get_id'][0]['Pago_Pendiente'] == 0 && $Documento_Pendiente == 0) || $dato['get_id'][0]['Pago_Pendiente'] < 2) {
                                    $dato['estado_reporte'] = 1;
                                    $dato['user_autorizado'] = 0;
                                    $dato['duplicidad'] = 0;
                                    $this->Model_IFV->update_duplicidad_registro_ingreso($dato);
                                    $this->Model_IFV->insert_registro_ingreso($dato);
                                    $dato['simbolo'] = 1;
                                } elseif (count($valida_foto) == 0 && $dato['get_id'][0]['Pago_Pendiente'] >= 2 && $Documento_Pendiente > 0) {
                                    $dato['simbolo'] = 3;
                                } else {
                                    $dato['simbolo'] = 2;
                                }
                            } elseif ($dato['get_id'][0]['Tipo'] == 2) {
                                if (count($valida_foto) > 0) {
                                    $dato['estado_reporte'] = 1;
                                    $dato['user_autorizado'] = 0;
                                    $dato['duplicidad'] = 0;
                                    $this->Model_IFV->update_duplicidad_registro_ingreso($dato);
                                    $this->Model_IFV->insert_registro_ingreso($dato);
                                    $dato['simbolo'] = 1;
                                } else {
                                    $dato['simbolo'] = 2;
                                }
                            } else {
                                $dato['estado_reporte'] = 1;
                                $dato['user_autorizado'] = 0;
                                $dato['duplicidad'] = 0;
                                $this->Model_IFV->update_duplicidad_registro_ingreso($dato);
                                $this->Model_IFV->insert_registro_ingreso($dato);
                                $dato['simbolo'] = 1;
                            }

                            $dato['get_foto'] = $this->Model_IFV->get_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
                            $this->load->view('view_IFV/asistencia/registro', $dato);
                        }
                    }
                } else {
                    echo "pagos";
                }
            } else {
                $dato['id_alumno'] = $dato['get_id'][0]['Id'];
                $validar = $this->Model_IFV->valida_registro_ingreso($dato);

                if (count($validar) > 0) {
                    if ($dato['get_id'][0]['Tipo'] == 1) {
                        echo "repetido";
                    } else {
                        $valida_hora = $this->Model_IFV->valida_update_registro_ingreso($dato['get_id'][0]['Id']);

                        if (count($valida_hora) > 0) {
                            if ($valida_hora[0]['minutos'] > 180) {
                                $dato['id_registro_ingreso'] = $valida_hora[0]['id_registro_ingreso'];
                                $this->Model_IFV->update_registro_ingreso($dato);
                            } else {
                                echo "reingreso";
                            }
                        } else {
                            echo "repetido";
                        }
                    }
                } else {
                    if ($dato['get_id'][0]['Pago_Pendiente'] >= 2) {
                        echo "cuotas";
                    } else {
                        $dato['grado'] = '';
                        $dato['seccion'] = '';
                        $dato['codigo'] = $dato['get_id'][0]['Codigoa'];
                        $dato['apater'] = $dato['get_id'][0]['Apellido_Paterno'];
                        $dato['amater'] = $dato['get_id'][0]['Apellido_Materno'];
                        $dato['nombres'] = $dato['get_id'][0]['Nombre'];
                        $dato['especialidad'] = $dato['get_id'][0]['Especialidad'];
                        $dato['grupo'] = $dato['get_id'][0]['Grupo'];
                        $dato['modulo'] = $dato['get_id'][0]['Modulo'];

                        $hora = getdate()['hours'];
                        $minuto = getdate()['minutes'];

                        if ($hora >= 7) {
                            if ($hora == 7 && ($minuto == 0 || $minuto == 1 || $minuto == 2 || $minuto == 3 || $minuto == 4 || $minuto == 5 ||
                                    $minuto == 6 || $minuto == 7 || $minuto == 8 || $minuto == 9 || $minuto == 10 || $minuto == 11 || $minuto == 12 ||
                                    $minuto == 13 || $minuto == 14 || $minuto == 15 || $minuto == 16 || $minuto == 17 || $minuto == 18 || $minuto == 19 ||
                                    $minuto == 20 || $minuto == 21 || $minuto == 22 || $minuto == 23 || $minuto == 24 || $minuto == 25 || $minuto == 26 ||
                                    $minuto == 27 || $minuto == 28 || $minuto == 29 || $minuto == 30)) {
                                $dato['estado_ingreso'] = 1;
                            } else {
                                $dato['estado_ingreso'] = 2;
                            }
                        } else {
                            $dato['estado_ingreso'] = 1;
                        }

                        $valida_foto = $this->Model_IFV->valida_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
                        $Documento_Pendiente = $dato['get_id'][0]['documentos_obligatorios'] - ($dato['get_id'][0]['documentos_subidos'] + $dato['get_id'][0]['Primer_Documento'] + $dato['get_id'][0]['Segundo_Documento']);

                        if ($dato['get_id'][0]['Tipo'] == 1) {
                            if ((count($valida_foto) > 0 && $dato['get_id'][0]['Pago_Pendiente'] == 0 && $Documento_Pendiente == 0) || $dato['get_id'][0]['Pago_Pendiente'] < 2) {
                                $dato['estado_reporte'] = 1;
                                $dato['user_autorizado'] = 0;
                                $dato['duplicidad'] = 0;
                                $this->Model_IFV->update_duplicidad_registro_ingreso($dato);
                                $this->Model_IFV->insert_registro_ingreso($dato);
                                $dato['simbolo'] = 1;
                            } elseif (count($valida_foto) == 0 && $dato['get_id'][0]['Pago_Pendiente'] >= 2 && $Documento_Pendiente > 0) {
                                $dato['simbolo'] = 3;
                            } else {
                                $dato['simbolo'] = 2;
                            }
                        } elseif ($dato['get_id'][0]['Tipo'] == 2) {
                            if (count($valida_foto) > 0) {
                                $dato['estado_reporte'] = 1;
                                $dato['user_autorizado'] = 0;
                                $dato['duplicidad'] = 0;
                                $this->Model_IFV->update_duplicidad_registro_ingreso($dato);
                                $this->Model_IFV->insert_registro_ingreso($dato);
                                $dato['simbolo'] = 1;
                            } else {
                                $dato['simbolo'] = 2;
                            }
                        } else {
                            $dato['estado_reporte'] = 1;
                            $dato['user_autorizado'] = 0;
                            $dato['duplicidad'] = 0;
                            $this->Model_IFV->update_duplicidad_registro_ingreso($dato);
                            $this->Model_IFV->insert_registro_ingreso($dato);
                            $dato['simbolo'] = 1;
                        }

                        $dato['get_foto'] = $this->Model_IFV->get_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
                        $this->load->view('view_IFV/asistencia/registro', $dato);
                    }
                }
            }
        } else {
            $validar = $this->Model_IFV->get_cod_matriculado_promovido($codigo_alumno);

            if (count($validar) > 0) {
                echo "promovido";
            } else {
                echo "error";
            }
        }
    }

    public function ReInsert_Alumno_FV()
    {
        $codigo_alumno = $this->input->post("codigo_alumno");
        $dato['reg_automatico'] = 1;

        $dato['get_id'] = $this->Model_IFV->get_cod_matriculado($codigo_alumno);
        $dato['id_alumno'] = $dato['get_id'][0]['Id'];

        $dato['grado'] = '';
        $dato['seccion'] = '';
        $dato['codigo'] = $dato['get_id'][0]['Codigoa'];
        $dato['apater'] = $dato['get_id'][0]['Apellido_Paterno'];
        $dato['amater'] = $dato['get_id'][0]['Apellido_Materno'];
        $dato['nombres'] = $dato['get_id'][0]['Nombre'];
        $dato['especialidad'] = $dato['get_id'][0]['Especialidad'];
        $dato['grupo'] = $dato['get_id'][0]['Grupo'];
        $dato['modulo'] = $dato['get_id'][0]['Modulo'];

        $hora = getdate()['hours'];
        $minuto = getdate()['minutes'];

        if ($hora >= 7) {
            if ($hora == 7 && ($minuto == 0 || $minuto == 1 || $minuto == 2 || $minuto == 3 || $minuto == 4 || $minuto == 5 ||
                    $minuto == 6 || $minuto == 7 || $minuto == 8 || $minuto == 9 || $minuto == 10 || $minuto == 11 || $minuto == 12 ||
                    $minuto == 13 || $minuto == 14 || $minuto == 15 || $minuto == 16 || $minuto == 17 || $minuto == 18 || $minuto == 19 ||
                    $minuto == 20 || $minuto == 21 || $minuto == 22 || $minuto == 23 || $minuto == 24 || $minuto == 25 || $minuto == 26 ||
                    $minuto == 27 || $minuto == 28 || $minuto == 29 || $minuto == 30)) {
                $dato['estado_ingreso'] = 1;
            } else {
                $dato['estado_ingreso'] = 2;
            }
        } else {
            $dato['estado_ingreso'] = 1;
        }

        $valida_foto = $this->Model_IFV->valida_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
        $Documento_Pendiente = $dato['get_id'][0]['documentos_obligatorios'] - ($dato['get_id'][0]['documentos_subidos'] + $dato['get_id'][0]['Primer_Documento'] + $dato['get_id'][0]['Segundo_Documento']);

        if ($dato['get_id'][0]['Tipo'] == 1) {
            if ((count($valida_foto) > 0 && $dato['get_id'][0]['Pago_Pendiente'] == 0 && $Documento_Pendiente == 0) || $dato['get_id'][0]['Pago_Pendiente'] < 2) {
                $dato['estado_reporte'] = 1;
                $dato['user_autorizado'] = 0;
                $dato['duplicidad'] = 0;
                $this->Model_IFV->update_duplicidad_registro_ingreso($dato);
                $this->Model_IFV->insert_registro_ingreso($dato);
                $dato['simbolo'] = 1;
            } elseif (count($valida_foto) == 0 && $dato['get_id'][0]['Pago_Pendiente'] >= 2 && $Documento_Pendiente > 0) {
                $dato['simbolo'] = 3;
            } else {
                $dato['simbolo'] = 2;
            }
        } elseif ($dato['get_id'][0]['Tipo'] == 2) {
            if (count($valida_foto) > 0) {
                $dato['estado_reporte'] = 1;
                $dato['user_autorizado'] = 0;
                $dato['duplicidad'] = 0;
                $this->Model_IFV->update_duplicidad_registro_ingreso($dato);
                $this->Model_IFV->insert_registro_ingreso($dato);
                $dato['simbolo'] = 1;
            } else {
                $dato['simbolo'] = 2;
            }
        } else {
            $dato['estado_reporte'] = 1;
            $dato['user_autorizado'] = 0;
            $dato['duplicidad'] = 0;
            $this->Model_IFV->update_duplicidad_registro_ingreso($dato);
            $this->Model_IFV->insert_registro_ingreso($dato);
            $dato['simbolo'] = 1;
        }

        //$dato['list_pago_pendiente'] = $this->Model_IFV->get_list_pagos_registro_ingreso($dato['id_alumno']);
        $dato['get_foto'] = $this->Model_IFV->get_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
        $this->load->view('view_IFV/asistencia/registro', $dato);
    }

    public function Update_Alumno_FV()
    {
        $codigo_alumno = $this->input->post("codigo_alumno");
        $get_id = $this->Model_IFV->get_cod_matriculado($codigo_alumno);
        $ultimo = $this->Model_IFV->valida_update_registro_ingreso($get_id[0]['Id']);
        $dato['id_registro_ingreso'] = $ultimo[0]['id_registro_ingreso'];
        $this->Model_IFV->update_registro_ingreso($dato);
    }

    public function Modal_Registro_Ingreso()
    {
        $dato['list_alumno'] = $this->Model_IFV->get_total_matriculados();
        $this->load->view('view_IFV/asistencia/modal_buscar', $dato);
    }

    public function Insert_Alumno_FV_Modal()
    {
        $codigo_alumno = $this->input->post("alumno");
        $dato['reg_automatico'] = 2;

        $dato['get_id'] = $this->Model_IFV->get_cod_matriculado($codigo_alumno);

        if (count($dato['get_id']) > 0) {
            $dato['id_alumno'] = $dato['get_id'][0]['Id'];
            $valida_duplicidad = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);

            if (count($valida_duplicidad) >= 10) {
                echo "duplicidad";
            } else {
                if ($dato['get_id'][0]['Grupo'] == '22/3') {
                    if ($dato['get_id'][0]['Pago_Matricula_1'] == 1 && $dato['get_id'][0]['Pago_Cuota_1'] == 1) {
                        $dato['id_alumno'] = $dato['get_id'][0]['Id'];
                        $validar = $this->Model_IFV->valida_registro_ingreso($dato);

                        if (count($validar) > 0) {
                            echo "repetido";
                        } else {
                            if ($dato['get_id'][0]['Pago_Pendiente'] >= 2) {
                                echo "cuotas";
                            } else {
                                $dato['grado'] = '';
                                $dato['seccion'] = '';
                                $dato['codigo'] = $dato['get_id'][0]['Codigoa'];
                                $dato['apater'] = $dato['get_id'][0]['Apellido_Paterno'];
                                $dato['amater'] = $dato['get_id'][0]['Apellido_Materno'];
                                $dato['nombres'] = $dato['get_id'][0]['Nombre'];
                                $dato['especialidad'] = $dato['get_id'][0]['Especialidad'];
                                $dato['grupo'] = $dato['get_id'][0]['Grupo'];
                                $dato['modulo'] = $dato['get_id'][0]['Modulo'];
                                $hora = getdate()['hours'];
                                $minuto = getdate()['minutes'];

                                if ($hora >= 7) {
                                    if ($hora == 7 && ($minuto == 0 || $minuto == 1 || $minuto == 2 || $minuto == 3 || $minuto == 4 || $minuto == 5 ||
                                            $minuto == 6 || $minuto == 7 || $minuto == 8 || $minuto == 9 || $minuto == 10 || $minuto == 11 || $minuto == 12 ||
                                            $minuto == 13 || $minuto == 14 || $minuto == 15 || $minuto == 16 || $minuto == 17 || $minuto == 18 || $minuto == 19 ||
                                            $minuto == 20 || $minuto == 21 || $minuto == 22 || $minuto == 23 || $minuto == 24 || $minuto == 25 || $minuto == 26 ||
                                            $minuto == 27 || $minuto == 28 || $minuto == 29 || $minuto == 30)) {
                                        $dato['estado_ingreso'] = 1;
                                    } else {
                                        $dato['estado_ingreso'] = 2;
                                    }
                                } else {
                                    $dato['estado_ingreso'] = 1;
                                }

                                $valida_foto = $this->Model_IFV->valida_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
                                $Documento_Pendiente = $dato['get_id'][0]['documentos_obligatorios'] - ($dato['get_id'][0]['documentos_subidos'] + $dato['get_id'][0]['Primer_Documento'] + $dato['get_id'][0]['Segundo_Documento']);

                                if ($dato['get_id'][0]['Tipo'] == 1) {
                                    if ((count($valida_foto) > 0 && $dato['get_id'][0]['Pago_Pendiente'] == 0 && $Documento_Pendiente == 0) || $dato['get_id'][0]['Pago_Pendiente'] < 2) {
                                        $dato['estado_reporte'] = 1;
                                        $dato['user_autorizado'] = 0;
                                        $dato['duplicidad'] = 1;
                                        $this->Model_IFV->insert_registro_ingreso($dato);
                                        $dato['get_duplicidad'] = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);
                                        $dato['simbolo'] = 1;
                                    } elseif (count($valida_foto) == 0 && $dato['get_id'][0]['Pago_Pendiente'] >= 2 && $Documento_Pendiente > 0) {
                                        $dato['simbolo'] = 3;
                                    } else {
                                        $dato['simbolo'] = 2;
                                    }
                                } elseif ($dato['get_id'][0]['Tipo'] == 2) {
                                    if (count($valida_foto) > 0) {
                                        $dato['estado_reporte'] = 1;
                                        $dato['user_autorizado'] = 0;
                                        $dato['duplicidad'] = 1;
                                        $this->Model_IFV->insert_registro_ingreso($dato);
                                        $dato['get_duplicidad'] = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);
                                        $dato['simbolo'] = 1;
                                    } else {
                                        $dato['simbolo'] = 2;
                                    }
                                } else {
                                    $dato['estado_reporte'] = 1;
                                    $dato['user_autorizado'] = 0;
                                    $dato['duplicidad'] = 1;
                                    $this->Model_IFV->insert_registro_ingreso($dato);
                                    $dato['get_duplicidad'] = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);
                                    $dato['simbolo'] = 1;
                                }

                                //$dato['list_pago_pendiente'] = $this->Model_IFV->get_list_pagos_registro_ingreso($dato['id_alumno']);
                                $dato['get_foto'] = $this->Model_IFV->get_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
                                $this->load->view('view_IFV/asistencia/registro', $dato);
                            }
                        }
                    } else {
                        echo "pagos";
                    }
                } else {
                    $dato['id_alumno'] = $dato['get_id'][0]['Id'];
                    $validar = $this->Model_IFV->valida_registro_ingreso($dato);
                    if (count($validar) > 0) {
                        if ($dato['get_id'][0]['Tipo'] == 1) {
                            echo "repetido";
                        } else {
                            $valida_hora = $this->Model_IFV->valida_update_registro_ingreso($dato['get_id'][0]['Id']);

                            if (count($valida_hora) > 0) {
                                if ($valida_hora[0]['minutos'] > 180) {
                                    $dato['id_registro_ingreso'] = $valida_hora[0]['id_registro_ingreso'];
                                    $this->Model_IFV->update_registro_ingreso($dato);
                                } else {
                                    echo "reingreso";
                                }
                            } else {
                                echo "repetido";
                            }
                        }
                    } else {
                        if ($dato['get_id'][0]['Pago_Pendiente'] >= 2) {
                            echo "cuotas";
                        } else {
                            $dato['grado'] = '';
                            $dato['seccion'] = '';
                            $dato['codigo'] = $dato['get_id'][0]['Codigoa'];
                            $dato['apater'] = $dato['get_id'][0]['Apellido_Paterno'];
                            $dato['amater'] = $dato['get_id'][0]['Apellido_Materno'];
                            $dato['nombres'] = $dato['get_id'][0]['Nombre'];
                            $dato['especialidad'] = $dato['get_id'][0]['Especialidad'];
                            $dato['grupo'] = $dato['get_id'][0]['Grupo'];
                            $dato['modulo'] = $dato['get_id'][0]['Modulo'];
                            $hora = getdate()['hours'];
                            $minuto = getdate()['minutes'];

                            if ($hora >= 7) {
                                if ($hora == 7 && ($minuto == 0 || $minuto == 1 || $minuto == 2 || $minuto == 3 || $minuto == 4 || $minuto == 5 ||
                                        $minuto == 6 || $minuto == 7 || $minuto == 8 || $minuto == 9 || $minuto == 10 || $minuto == 11 || $minuto == 12 ||
                                        $minuto == 13 || $minuto == 14 || $minuto == 15 || $minuto == 16 || $minuto == 17 || $minuto == 18 || $minuto == 19 ||
                                        $minuto == 20 || $minuto == 21 || $minuto == 22 || $minuto == 23 || $minuto == 24 || $minuto == 25 || $minuto == 26 ||
                                        $minuto == 27 || $minuto == 28 || $minuto == 29 || $minuto == 30)) {
                                    $dato['estado_ingreso'] = 1;
                                } else {
                                    $dato['estado_ingreso'] = 2;
                                }
                            } else {
                                $dato['estado_ingreso'] = 1;
                            }

                            $valida_foto = $this->Model_IFV->valida_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
                            $Documento_Pendiente = $dato['get_id'][0]['documentos_obligatorios'] - ($dato['get_id'][0]['documentos_subidos'] + $dato['get_id'][0]['Primer_Documento'] + $dato['get_id'][0]['Segundo_Documento']);

                            if ($dato['get_id'][0]['Tipo'] == 1) {
                                if ((count($valida_foto) > 0 && $dato['get_id'][0]['Pago_Pendiente'] == 0 && $Documento_Pendiente == 0) || $dato['get_id'][0]['Pago_Pendiente'] < 2) {
                                    $dato['estado_reporte'] = 1;
                                    $dato['user_autorizado'] = 0;
                                    $dato['duplicidad'] = 1;
                                    $this->Model_IFV->insert_registro_ingreso($dato);
                                    $dato['get_duplicidad'] = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);
                                    $dato['simbolo'] = 1;
                                } elseif (count($valida_foto) == 0 && $dato['get_id'][0]['Pago_Pendiente'] >= 2 && $Documento_Pendiente > 0) {
                                    $dato['simbolo'] = 3;
                                } else {
                                    $dato['simbolo'] = 2;
                                }
                            } elseif ($dato['get_id'][0]['Tipo'] == 2) {
                                if (count($valida_foto) > 0) {
                                    $dato['estado_reporte'] = 1;
                                    $dato['user_autorizado'] = 0;
                                    $dato['duplicidad'] = 1;
                                    $this->Model_IFV->insert_registro_ingreso($dato);
                                    $dato['get_duplicidad'] = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);
                                    $dato['simbolo'] = 1;
                                } else {
                                    $dato['simbolo'] = 2;
                                }
                            } else {
                                $dato['estado_reporte'] = 1;
                                $dato['user_autorizado'] = 0;
                                $dato['duplicidad'] = 1;
                                $this->Model_IFV->insert_registro_ingreso($dato);
                                $dato['get_duplicidad'] = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);
                                $dato['simbolo'] = 1;
                            }

                            //$dato['list_pago_pendiente'] = $this->Model_IFV->get_list_pagos_registro_ingreso($dato['id_alumno']);
                            $dato['get_foto'] = $this->Model_IFV->get_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
                            $this->load->view('view_IFV/asistencia/registro', $dato);
                        }
                    }
                }
            }
        } else {
            echo "error";
        }
    }

    public function ReInsert_Alumno_FV_Modal()
    {
        $codigo_alumno = $this->input->post("alumno");
        $dato['reg_automatico'] = 2;

        $dato['get_id'] = $this->Model_IFV->get_cod_matriculado($codigo_alumno);
        $dato['id_alumno'] = $dato['get_id'][0]['Id'];

        $dato['grado'] = '';
        $dato['seccion'] = '';
        $dato['codigo'] = $dato['get_id'][0]['Codigoa'];
        $dato['apater'] = $dato['get_id'][0]['Apellido_Paterno'];
        $dato['amater'] = $dato['get_id'][0]['Apellido_Materno'];
        $dato['nombres'] = $dato['get_id'][0]['Nombre'];
        $dato['especialidad'] = $dato['get_id'][0]['Especialidad'];
        $dato['grupo'] = $dato['get_id'][0]['Grupo'];
        $dato['modulo'] = $dato['get_id'][0]['Modulo'];

        $hora = getdate()['hours'];
        $minuto = getdate()['minutes'];

        if ($hora >= 7) {
            if ($hora == 7 && ($minuto == 0 || $minuto == 1 || $minuto == 2 || $minuto == 3 || $minuto == 4 || $minuto == 5 ||
                    $minuto == 6 || $minuto == 7 || $minuto == 8 || $minuto == 9 || $minuto == 10 || $minuto == 11 || $minuto == 12 ||
                    $minuto == 13 || $minuto == 14 || $minuto == 15 || $minuto == 16 || $minuto == 17 || $minuto == 18 || $minuto == 19 ||
                    $minuto == 20 || $minuto == 21 || $minuto == 22 || $minuto == 23 || $minuto == 24 || $minuto == 25 || $minuto == 26 ||
                    $minuto == 27 || $minuto == 28 || $minuto == 29 || $minuto == 30)) {
                $dato['estado_ingreso'] = 1;
            } else {
                $dato['estado_ingreso'] = 2;
            }
        } else {
            $dato['estado_ingreso'] = 1;
        }

        $valida_foto = $this->Model_IFV->valida_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
        $Documento_Pendiente = $dato['get_id'][0]['documentos_obligatorios'] - ($dato['get_id'][0]['documentos_subidos'] + $dato['get_id'][0]['Primer_Documento'] + $dato['get_id'][0]['Segundo_Documento']);

        if ($dato['get_id'][0]['Tipo'] == 1) {
            if ((count($valida_foto) > 0 && $dato['get_id'][0]['Pago_Pendiente'] == 0 && $Documento_Pendiente == 0) || $dato['get_id'][0]['Pago_Pendiente'] < 2) {
                $dato['estado_reporte'] = 1;
                $dato['user_autorizado'] = 0;
                $dato['duplicidad'] = 1;
                $this->Model_IFV->insert_registro_ingreso($dato);
                $dato['get_duplicidad'] = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);
                $dato['simbolo'] = 1;
            } elseif (count($valida_foto) == 0 && $dato['get_id'][0]['Pago_Pendiente'] >= 2 && $Documento_Pendiente > 0) {
                $dato['simbolo'] = 3;
            } else {
                $dato['simbolo'] = 2;
            }
        } elseif ($dato['get_id'][0]['Tipo'] == 2) {
            if (count($valida_foto) > 0) {
                $dato['estado_reporte'] = 1;
                $dato['user_autorizado'] = 0;
                $dato['duplicidad'] = 1;
                $this->Model_IFV->insert_registro_ingreso($dato);
                $dato['get_duplicidad'] = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);
                $dato['simbolo'] = 1;
            } else {
                $dato['simbolo'] = 2;
            }
        } else {
            $dato['estado_reporte'] = 1;
            $dato['user_autorizado'] = 0;
            $dato['duplicidad'] = 1;
            $this->Model_IFV->insert_registro_ingreso($dato);
            $dato['get_duplicidad'] = $this->Model_IFV->traer_duplicidad_registro_ingreso($dato);
            $dato['simbolo'] = 1;
        }

        //$dato['list_pago_pendiente'] = $this->Model_IFV->get_list_pagos_registro_ingreso($dato['id_alumno']);
        $dato['get_foto'] = $this->Model_IFV->get_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
        $this->load->view('view_IFV/asistencia/registro', $dato);
    }

    public function Update_Alumno_FV_Modal()
    {
        $codigo_alumno = $this->input->post("alumno");
        $get_id = $this->Model_IFV->get_cod_matriculado($codigo_alumno);
        $ultimo = $this->Model_IFV->valida_update_registro_ingreso($get_id[0]['Id']);
        $dato['id_registro_ingreso'] = $ultimo[0]['id_registro_ingreso'];
        $this->Model_IFV->update_registro_ingreso($dato);
    }

    public function Traer_Pendientes()
    {
        $codigo_alumno = $this->input->post("alumno");
        $get_id = $this->Model_IFV->get_cod_matriculado($codigo_alumno);
        echo $get_id[0]['Pago_Pendiente'] . "-" . $get_id[0]['Documento_Pendiente'];
    }

    public function Insert_Observacion()
    {
        $dato['reg_automatico'] = 1;
        $codigo_alumno = $this->input->post("codigo_alumno");
        $dato['observacion'] = $this->input->post("observacion");
        $dato['tipo'] = $this->input->post("tipo");
        $dato['get_id'] = $this->Model_IFV->get_cod_matriculado($codigo_alumno);
        $dato['id_alumno'] = $dato['get_id'][0]['Id'];

        $dato['grado'] = '';
        $dato['seccion'] = '';
        $dato['codigo'] = $dato['get_id'][0]['Codigoa'];
        $dato['apater'] = $dato['get_id'][0]['Apellido_Paterno'];
        $dato['amater'] = $dato['get_id'][0]['Apellido_Materno'];
        $dato['nombres'] = $dato['get_id'][0]['Nombre'];
        $dato['especialidad'] = $dato['get_id'][0]['Especialidad'];
        $dato['grupo'] = $dato['get_id'][0]['Grupo'];
        $dato['modulo'] = $dato['get_id'][0]['Modulo'];

        $hora = getdate()['hours'];
        $minuto = getdate()['minutes'];

        if ($hora >= 7) {
            if ($hora == 7 && ($minuto == 0 || $minuto == 1 || $minuto == 2 || $minuto == 3 || $minuto == 4 || $minuto == 5 ||
                    $minuto == 6 || $minuto == 7 || $minuto == 8 || $minuto == 9 || $minuto == 10 || $minuto == 11 || $minuto == 12 ||
                    $minuto == 13 || $minuto == 14 || $minuto == 15 || $minuto == 16 || $minuto == 17 || $minuto == 18 || $minuto == 19 ||
                    $minuto == 20 || $minuto == 21 || $minuto == 22 || $minuto == 23 || $minuto == 24 || $minuto == 25 || $minuto == 26 ||
                    $minuto == 27 || $minuto == 28 || $minuto == 29 || $minuto == 30)) {
                $dato['estado_ingreso'] = 1;
            } else {
                $dato['estado_ingreso'] = 2;
            }
        } else {
            $dato['estado_ingreso'] = 1;
        }

        $dato['estado_reporte'] = 1;
        $dato['user_autorizado'] = 0;

        $this->Model_IFV->insert_registro_ingreso($dato);

        if ($dato['observacion'] != "") {
            $ultimo = $this->Model_IFV->ultimo_id_registro_ingreso();
            $dato['id_registro_ingreso'] = $ultimo[0]['id_registro_ingreso'];

            $this->Model_IFV->insert_historial_registro_ingreso($dato);
        }

        $dato['simbolo'] = 1;

        $dato['get_foto'] = $this->Model_IFV->get_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
        $this->load->view('view_IFV/asistencia/registro', $dato);
    }

    public function Modal_Delete_Registro_Ingreso($id_registro_ingreso)
    {
        $dato['get_id'] = $this->Model_IFV->get_list_registro_ingreso($id_registro_ingreso);
        $this->load->view('view_IFV/asistencia/modal_eliminar', $dato);
    }

    public function Delete_Registro_Ingreso()
    {
        $dato['id_registro_ingreso'] = $this->input->post("id_registro_ingreso");
        $dato['clave_admin'] = $this->input->post("clave_admin");

        $get_clave = $this->Model_IFV->get_clave_asistencia($dato['clave_admin']);

        if (count($get_clave) > 0) {
            $this->Model_IFV->delete_registro_ingreso($dato);
        } else {
            echo "error";
        }
    }

    public function Autorizacion_Condicionado()
    {
        $codigo_alumno = $this->input->post("codigo_alumno");
        $dato['observacion'] = $this->input->post("observacion");
        $dato['clave_admin'] = $this->input->post("clave_admin");
        $dato['tipo'] = $this->input->post("tipo");

        $get_clave = $this->Model_IFV->get_clave_asistencia($dato['clave_admin']);

        if (count($get_clave) > 0) {
            $dato['get_id'] = $this->Model_IFV->get_cod_matriculado($codigo_alumno);
            $dato['id_alumno'] = $dato['get_id'][0]['Id'];

            $dato['grado'] = '';
            $dato['seccion'] = '';
            $dato['codigo'] = $dato['get_id'][0]['Codigoa'];
            $dato['apater'] = $dato['get_id'][0]['Apellido_Paterno'];
            $dato['amater'] = $dato['get_id'][0]['Apellido_Materno'];
            $dato['nombres'] = $dato['get_id'][0]['Nombre'];
            $dato['especialidad'] = $dato['get_id'][0]['Especialidad'];
            $dato['grupo'] = $dato['get_id'][0]['Grupo'];
            $dato['modulo'] = $dato['get_id'][0]['Modulo'];

            $hora = getdate()['hours'];
            $minuto = getdate()['minutes'];

            if ($hora >= 7) {
                if ($hora == 7 && ($minuto == 0 || $minuto == 1 || $minuto == 2 || $minuto == 3 || $minuto == 4 || $minuto == 5 ||
                        $minuto == 6 || $minuto == 7 || $minuto == 8 || $minuto == 9 || $minuto == 10 || $minuto == 11 || $minuto == 12 ||
                        $minuto == 13 || $minuto == 14 || $minuto == 15 || $minuto == 16 || $minuto == 17 || $minuto == 18 || $minuto == 19 ||
                        $minuto == 20 || $minuto == 21 || $minuto == 22 || $minuto == 23 || $minuto == 24 || $minuto == 25 || $minuto == 26 ||
                        $minuto == 27 || $minuto == 28 || $minuto == 29 || $minuto == 30)) {
                    $dato['estado_ingreso'] = 1;
                } else {
                    $dato['estado_ingreso'] = 2;
                }
            } else {
                $dato['estado_ingreso'] = 1;
            }

            $dato['estado_reporte'] = 2;
            $dato['user_autorizado'] = $get_clave[0]['id_usuario'];

            $this->Model_IFV->insert_registro_ingreso($dato);

            if ($dato['observacion'] != "") {
                $ultimo = $this->Model_IFV->ultimo_id_registro_ingreso();
                $dato['id_registro_ingreso'] = $ultimo[0]['id_registro_ingreso'];

                $this->Model_IFV->insert_historial_registro_ingreso($dato);
            }

            $dato['simbolo'] = 1;

            $dato['get_foto'] = $this->Model_IFV->get_foto_matriculado($dato['get_id'][0]['Id'], $dato['get_id'][0]['Tipo']);
            $this->load->view('view_IFV/asistencia/registro', $dato);
        } else {
            echo "error";
        }
    }

    public function No_Ingresa_Condicionado()
    {
        $codigo_alumno = $this->input->post("codigo_alumno");
        $dato['observacion'] = $this->input->post("observacion");
        $dato['tipo'] = $this->input->post("tipo");
        $dato['get_id'] = $this->Model_IFV->get_cod_matriculado($codigo_alumno);
        $dato['id_alumno'] = $dato['get_id'][0]['Id'];

        $dato['grado'] = '';
        $dato['seccion'] = '';
        $dato['codigo'] = $dato['get_id'][0]['Codigoa'];
        $dato['apater'] = $dato['get_id'][0]['Apellido_Paterno'];
        $dato['amater'] = $dato['get_id'][0]['Apellido_Materno'];
        $dato['nombres'] = $dato['get_id'][0]['Nombre'];
        $dato['especialidad'] = $dato['get_id'][0]['Especialidad'];
        $dato['grupo'] = $dato['get_id'][0]['Grupo'];
        $dato['modulo'] = $dato['get_id'][0]['Modulo'];
        $dato['estado_ingreso'] = 3;

        $dato['estado_reporte'] = 3;
        $dato['user_autorizado'] = 0;

        $this->Model_IFV->insert_registro_ingreso($dato);

        if ($dato['observacion'] != "") {
            $ultimo = $this->Model_IFV->ultimo_id_registro_ingreso();
            $dato['id_registro_ingreso'] = $ultimo[0]['id_registro_ingreso'];

            $this->Model_IFV->insert_historial_registro_ingreso($dato);
        }
    }

    public function Modal_Registro_Salida()
    {
        $dato['list_salida'] = $this->Model_IFV->get_list_registro_salida();
        $this->load->view('view_IFV/asistencia/modal_salida', $dato);
    }

    public function Lista_Registro_Salida()
    {
        $dato['list_salida'] = $this->Model_IFV->get_list_registro_salida();
        $this->load->view('view_IFV/asistencia/lista_salida', $dato);
    }

    public function Update_Registro_Salida()
    {
        $dato['id_registro_ingreso'] = $this->input->post("id_registro_ingreso");
        $this->Model_IFV->update_registro_salida($dato);
    }

    //---------------------------------------PRODUCTO-----------------------------------------
    public function Producto()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/producto/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Producto()
    {
        if ($this->session->userdata('usuario')) {
            $tipo = $this->input->post("tipo");
            $dato['list_producto'] = $this->Model_IFV->get_lista_producto($tipo);
            $dato['snappy'] = $this->Model_IFV->get_list_producto_snappy();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();

            $this->load->view('view_IFV/producto/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Producto($id_producto)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_producto($id_producto);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_producto();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/producto/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Producto()
    {
        $dato['id_producto'] = $this->input->post("id_producto");
        $dato['informe'] = $this->input->post("informe_i");
        $dato['tipo'] = $this->input->post("tipo_i");
        $dato['cancelado'] = $this->input->post("cancelado_i");
        $dato['id_especialidad'] = implode(",", $this->input->post("id_especialidad_i"));
        $this->Model_IFV->insert_producto($dato);
    }

    public function Modal_Update_Producto($id_producto)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_producto_snappy($id_producto);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_producto();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/producto/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Producto()
    {
        $dato['id_producto'] = $this->input->post("id_producto");
        $dato['informe'] = $this->input->post("informe_u");
        $dato['tipo'] = $this->input->post("tipo_u");
        $dato['cancelado'] = $this->input->post("cancelado_u");
        $dato['id_especialidad'] = implode(",", $this->input->post("id_especialidad_u"));
        $this->Model_IFV->update_producto($dato);
    }

    public function Excel_Producto($tipo)
    {
        $list_producto = $this->Model_IFV->get_lista_producto($tipo);
        $snappy = $this->Model_IFV->get_list_producto_snappy();
        $list_especialidad = $this->Model_IFV->get_list_especialidad_combo();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Producto');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(50);
        $sheet->getColumnDimension('D')->setWidth(40);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(18);
        $sheet->getColumnDimension('G')->setWidth(15);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Año');
        $sheet->setCellValue("B1", 'Tipo');
        $sheet->setCellValue("C1", 'Producto');
        $sheet->setCellValue("D1", 'Especialidad');
        $sheet->setCellValue("E1", 'Informe');
        $sheet->setCellValue("F1", 'Cancelados');
        $sheet->setCellValue("G1", 'Estado');

        $contador = 1;

        foreach ($list_producto as $list) {
            $contador++;

            $nom_tipo = "";
            $nom_especialidad = "";
            $v_informe = "";
            $v_cancelado = "";
            $busqueda = in_array($list['Id'], array_column($snappy, 'Id'));
            if ($busqueda != false) {
                $posicion = array_search($list['Id'], array_column($snappy, 'Id'));
                $nom_tipo = $snappy[$posicion]['nom_tipo_producto'];
                $v_informe = $snappy[$posicion]['v_informe'];
                $v_cancelado = $snappy[$posicion]['v_cancelado'];

                $array = explode(",", $snappy[$posicion]['id_especialidad']);
                $i = 0;
                $nom_especialidad = "";
                while ($i < count($array)) {
                    $busqueda_e = in_array($array[$i], array_column($list_especialidad, 'id_especialidad'));
                    if ($busqueda_e != false) {
                        $posicion_e = array_search($array[$i], array_column($list_especialidad, 'id_especialidad'));
                        $nom_especialidad = $nom_especialidad . $list_especialidad[$posicion_e]['abreviatura'] . ",";
                    }
                    $i++;
                }
                $nom_especialidad = substr($nom_especialidad, 0, -1);
            }

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['anio']);
            $sheet->setCellValue("B{$contador}", $nom_tipo);
            $sheet->setCellValue("C{$contador}", $list['nom_producto']);
            $sheet->setCellValue("D{$contador}", $nom_especialidad);
            $sheet->setCellValue("E{$contador}", $v_informe);
            $sheet->setCellValue("F{$contador}", $v_cancelado);
            $sheet->setCellValue("G{$contador}", $list['estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Producto (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------DOCUMENTO-------------------------------------------
    public function Documento()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/documento/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Documento()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_documento'] = $this->Model_IFV->get_list_documento();
            $this->load->view('view_IFV/documento/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Documento()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/documento/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Documento()
    {
        $dato['cod_documento'] = $this->input->post("cod_documento_i");
        $dato['id_especialidad'] = $this->input->post("id_especialidad_i");
        $dato['nom_documento'] = $this->input->post("nom_documento_i");
        $dato['descripcion_documento'] = $this->input->post("descripcion_documento_i");
        $dato['obligatorio'] = $this->input->post("obligatorio_i");
        $dato['digital'] = $this->input->post("digital_i");
        $dato['aplicar_todos'] = $this->input->post("aplicar_todos_i");
        $dato['departamento'] = $this->input->post("departamento_i");
        $dato['aparece_doc'] = $this->input->post("aparece_doc_i");
        $dato['validacion'] = $this->input->post("validacion_i");

        $total = count($this->Model_IFV->valida_insert_documento($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_documento($dato);
            if ($dato['aplicar_todos'] == 1) {
                $get_id = $this->Model_IFV->ultimo_id_documento();
                $dato['id_documento'] = $get_id[0]['id_documento'];
                $dato['anio'] = date('Y');

                $list_alumno = $this->Model_IFV->get_list_alumno_documento_todos();

                foreach ($list_alumno as $list) {
                    $dato['id_alumno'] = $list['Id'];
                    $valida = $this->Model_IFV->valida_insert_documento_todos($dato);
                    if (count($valida) == 0) {
                        $this->Model_IFV->insert_documento_todos($dato);
                    }
                }
            }
        }
    }

    public function Modal_Update_Documento($id_documento)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_documento($id_documento);
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $dato['list_status'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/documento/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Documento()
    {
        $dato['id_documento'] = $this->input->post("id_documento");
        $dato['cod_documento'] = $this->input->post("cod_documento_u");
        $dato['id_especialidad'] = $this->input->post("id_especialidad_u");
        $dato['nom_documento'] = $this->input->post("nom_documento_u");
        $dato['descripcion_documento'] = $this->input->post("descripcion_documento_u");
        $dato['obligatorio'] = $this->input->post("obligatorio_u");
        $dato['digital'] = $this->input->post("digital_u");
        $dato['aplicar_todos'] = $this->input->post("aplicar_todos_u");
        $dato['estado'] = $this->input->post("estado_u");
        $dato['departamento'] = $this->input->post("departamento_u");
        $dato['aparece_doc'] = $this->input->post("aparece_doc_u");
        $dato['validacion'] = $this->input->post("validacion_u");

        $total = count($this->Model_IFV->valida_update_documento($dato));

        if ($total > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_documento($dato);
            if ($dato['aplicar_todos'] == 1) {
                $dato['anio'] = date('Y');

                $list_alumno = $this->Model_IFV->get_list_alumno_documento_todos();

                foreach ($list_alumno as $list) {
                    $dato['id_alumno'] = $list['Id'];
                    $valida = $this->Model_IFV->valida_insert_documento_todos($dato);
                    if (count($valida) == 0) {
                        $this->Model_IFV->insert_documento_todos($dato);
                    }
                }
            }
        }
    }

    public function Delete_Documento()
    {
        $dato['id_documento'] = $this->input->post("id_documento");
        $this->Model_IFV->delete_documento($dato);
    }

    public function Excel_Documento()
    {
        $list_documento = $this->Model_IFV->get_list_documento();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Documento');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(20);
        $sheet->getColumnDimension('C')->setWidth(50);
        $sheet->getColumnDimension('D')->setWidth(50);
        $sheet->getColumnDimension('E')->setWidth(20);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Especialidad');
        $sheet->setCellValue("C1", 'Nombre');
        $sheet->setCellValue("D1", 'Descripción');
        $sheet->setCellValue("E1", 'Obligatorio');
        $sheet->setCellValue("F1", 'Estado');
        $sheet->setCellValue("G1", 'Validación');

        $contador = 1;

        foreach ($list_documento as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['cod_documento']);
            $sheet->setCellValue("B{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("C{$contador}", $list['nom_documento']);
            $sheet->setCellValue("D{$contador}", $list['descripcion_documento']);
            $sheet->setCellValue("E{$contador}", $list['obligatorio']);
            $sheet->setCellValue("F{$contador}", $list['nom_status']);
            $sheet->setCellValue("G{$contador}", $list['validacion']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Documento (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------ADMISIÓN----------------------------
    public function Admision()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/admision/index', $dato);
        } else {
            redirect('');
        }
    }

    public function Lista_Modulo_Admision()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            /*$list_salir_matriculados = $this->Model_IFV->get_list_salir_matriculados();
            $condicion = "";
            foreach($list_salir_matriculados as $list){
                $condicion = "(aa.Grupo='".$list['grupo']."' AND aa.Especialidad='".$list['nom_especialidad']."' AND
                        aa.Turno='".$list['nom_turno']."') OR ";
            }
            $condicion = substr($condicion,0,-4);*/
            $dato['list_admision'] = $this->Model_IFV->get_list_modulo_admision($dato['tipo']);//,$condicion
            $this->load->view('view_IFV/admision/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Admision($tipo)
    {
        $list_admision = $this->Model_IFV->get_list_modulo_admision($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:T1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:T1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Admisión M1');

        $sheet->setAutoFilter('A1:T1');

        $sheet->getColumnDimension('A')->setWidth(30);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(20);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(35);
        $sheet->getColumnDimension('J')->setWidth(20);
        $sheet->getColumnDimension('K')->setWidth(20);
        $sheet->getColumnDimension('L')->setWidth(20);
        $sheet->getColumnDimension('M')->setWidth(20);
        $sheet->getColumnDimension('N')->setWidth(20);
        $sheet->getColumnDimension('O')->setWidth(20);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(18);
        $sheet->getColumnDimension('S')->setWidth(18);
        $sheet->getColumnDimension('T')->setWidth(18);

        $sheet->getStyle('A1:T1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:T1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:T1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Especialidad');
        $sheet->setCellValue("F1", 'Grupo');
        $sheet->setCellValue("G1", 'Turno');
        $sheet->setCellValue("H1", 'DNI');
        $sheet->setCellValue("I1", 'Alumno');
        $sheet->setCellValue("J1", 'Celular');
        $sheet->setCellValue("K1", 'Correo');
        $sheet->setCellValue("L1", 'Matricula (Estado)');
        $sheet->setCellValue("M1", 'Matrícula (Pago)');
        $sheet->setCellValue("N1", 'Matrícula (Fecha)');
        $sheet->setCellValue("O1", 'Cuota 1 (Estado)');
        $sheet->setCellValue("P1", 'Cuota 1 (Pago)');
        $sheet->setCellValue("Q1", 'Cuota 1 (Fecha)');
        $sheet->setCellValue("R1", 'Dec. Jur.');
        $sheet->setCellValue("S1", 'Fecha');
        $sheet->setCellValue("T1", 'Documentos');

        $contador = 1;

        foreach ($list_admision as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("N{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:R{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("K{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);
            $sheet->getStyle("N{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("C{$contador}", $list['Nombre']);
            $sheet->setCellValue("D{$contador}", $list['Codigo']);
            $sheet->setCellValue("E{$contador}", $list['abreviatura']);
            $sheet->setCellValue("F{$contador}", $list['Grupo']);
            $sheet->setCellValue("G{$contador}", $list['Turno']);
            $sheet->setCellValue("H{$contador}", $list['Dni']);
            $sheet->setCellValue("I{$contador}", $list['Alumno']);
            $sheet->setCellValue("J{$contador}", $list['Celular']);
            $sheet->setCellValue("K{$contador}", $list['Email']);
            $sheet->setCellValue("L{$contador}", $list['Estado_Matricula']);
            $sheet->setCellValue("M{$contador}", $list['Monto_Matricula']);
            if ($list['Fec_Matricula'] != "") {
                $sheet->setCellValue("N{$contador}", Date::PHPToExcel($list['Fec_Matricula']));
                $sheet->getStyle("N{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("N{$contador}", "");
            }
            $sheet->setCellValue("O{$contador}", $list['Estado_Cuota_1']);
            $sheet->setCellValue("P{$contador}", $list['Monto_Cuota_1']);
            if ($list['Fec_Cuota_1'] != "") {
                $sheet->setCellValue("Q{$contador}", Date::PHPToExcel($list['Fec_Cuota_1']));
                $sheet->getStyle("Q{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("Q{$contador}", "");
            }
            $sheet->setCellValue("R{$contador}", $list['v_contrato']);
            if ($list['fecha_firma'] != "") {
                $sheet->setCellValue("S{$contador}", Date::PHPToExcel($list['fecha_firma']));
                $sheet->getStyle("S{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("S{$contador}", "");
            }
            $sheet->setCellValue("T{$contador}", "");//$list['documentos_subidos']."/".$list['documentos_obligatorios']
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Admisión M1 (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------C ADMISIÓN----------------------------
    public function C_Admision()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }
        //$dato['list_grupo'] = $this->Model_IFV->get_list_grupo_admision();
        //$dato['list_c_admision'] = $this->Model_IFV->get_list_modulo_c_admision();
        $dato['list_c_admision'] = $this->Model_IFV->get_list_grupo_admision();

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/c_admision/index', $dato);
    }

    public function Modal_C_Admision(/*$grupo*/)
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        $dato['list_programa_interes'] = $this->Model_IFV->get_list_programa_interes(22);
        $dato['list_turno'] = $this->Model_IFV->get_list_tipo_doc(3);
        $dato['list_modalidad'] = $this->Model_IFV->get_list_tipo_doc(8);
        $dato['list_estados'] = $this->Model_IFV->get_list_tipo_doc(9);
        $this->load->view('view_IFV/c_admision/modal_registrar', $dato);
    }

    public function Insert_C_Admision()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }
        $dato['grupo'] = $this->input->post("grupo_i");
        $dato['esp_grupo'] = $this->input->post("esp_grupo_i");
        $dato['mod_grupo'] = $this->input->post("mod_grupo_i");
        $dato['tur_grupo'] = $this->input->post("tur_grupo_i");
        $dato['inicio_grupo'] = $this->input->post("inicio_grupo_i");
        $dato['fin_grupo'] = $this->input->post("fin_grupo_i");
        $dato['obs_grupo'] = $this->input->post("obs_grupo_i");
        //$dato['estado']= $this->input->post("estado_i");
        $valida = $this->Model_IFV->valida_insert_grupo_fromulario($dato, 1);
        if (count($valida) > 0) {
            echo "error";
        } else {
            $fechaActual = date('Y-m-d');
            $dato['estado'] = '39';//Sigue Activo
            if ($dato['fin_grupo'] < $fechaActual) {
                $dato['estado'] = '41'; //Finalizado
            }
            if ($dato['fin_grupo'] >= $fechaActual and $dato['inicio_grupo'] >= $fechaActual) {
                $dato['estado'] = '37'; //Sin iniciar
            }
            $this->Model_IFV->insert_c_admision($dato);
        }
    }

    public function Modal_Update_C_Admision($id_grupo)
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }
        $dato['get_id'] = $this->Model_IFV->get_list_grupo_admision($id_grupo);
        $dato['list_programa_interes'] = $this->Model_IFV->get_list_programa_interes(22);
        $dato['list_turno'] = $this->Model_IFV->get_list_tipo_doc(3);
        $dato['list_modalidad'] = $this->Model_IFV->get_list_tipo_doc(8);
        $dato['list_estados'] = $this->Model_IFV->get_list_tipo_doc(9);

        $this->load->view('view_IFV/c_admision/modal_editar', $dato);
    }

    public function Update_C_Admision()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }
        $dato['id_grupo'] = $this->input->post("id_grupo_e");
        $dato['grupo'] = $this->input->post("grupo_e");
        $dato['esp_grupo'] = $this->input->post("esp_grupo_e");
        $dato['mod_grupo'] = $this->input->post("mod_grupo_e");
        $dato['tur_grupo'] = $this->input->post("tur_grupo_e");
        $dato['inicio_grupo'] = $this->input->post("inicio_grupo_e");
        $dato['fin_grupo'] = $this->input->post("fin_grupo_e");
        $dato['obs_grupo'] = $this->input->post("obs_grupo_e");
        $dato['estado'] = $this->input->post("estado_e");
        $valida = $this->Model_IFV->valida_insert_grupo_fromulario($dato, 2);
        var_dump($dato['estado']);
        if (count($valida) > 0) {
            echo "error";
        } else {
            if ($dato['estado'] != 42) {
                $fechaActual = date('Y-m-d');
                $dato['estado'] = '39';//Sigue Activo
                if ($dato['fin_grupo'] < $fechaActual) {
                    $dato['estado'] = '41'; //Finalizado
                }
                if ($dato['fin_grupo'] >= $fechaActual and $dato['inicio_grupo'] >= $fechaActual) {
                    $dato['estado'] = '37'; //Sin iniciar
                }
            } else {
                $dato['estado'] = '42';//anulado
            }
            $this->Model_IFV->update_c_admision($dato);
        }

    }

    public function Excel_C_Admision()
    {
        //$list_grupo = $this->Model_IFV->get_list_grupo_admision();
        $list_c_admision = $this->Model_IFV->get_list_grupo_admision();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:H1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:H1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Lista - Admisión');

        $sheet->setAutoFilter('A1:H1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(10);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(25);
        $sheet->getColumnDimension('H')->setWidth(15);

        $sheet->getStyle('A1:H1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:H1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:H1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Grupo');
        $sheet->setCellValue("B1", 'Esp.');
        $sheet->setCellValue("C1", 'Modalidad');
        $sheet->setCellValue("D1", 'Turno');
        $sheet->setCellValue("E1", 'Fec. Inicio');
        $sheet->setCellValue("F1", 'Fec. Fin');
        $sheet->setCellValue("G1", 'Obsevaciones');
        $sheet->setCellValue("H1", 'Estado');

        $contador = 1;

        foreach ($list_c_admision as $list) {

            $contador++;

            $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:H{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['grupo']);
            $sheet->setCellValue("B{$contador}", $list['esp_grupo']);
            $sheet->setCellValue("C{$contador}", $list['mod_grupo']);
            $sheet->setCellValue("D{$contador}", $list['tur_grupo']);
            $sheet->setCellValue("E{$contador}", $list['inicio_grupo']);
            $sheet->getStyle("E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("F{$contador}", $list['fin_grupo']);
            $sheet->getStyle("F{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("G{$contador}", $list['obs_grupo']);
            $sheet->setCellValue("H{$contador}", $list['estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Admisión (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------INVITADOS----------------------------
    public function Invitado()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_invitado'] = $this->Model_IFV->get_list_invitado();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/invitado/index', $dato);
        } else {
            redirect('');
        }
    }

    public function Modal_Invitado()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_invitado'] = $this->Model_IFV->get_list_invitado_combo();
            $this->load->view('view_IFV/invitado/modal_registrar', $dato);
        } else {
            redirect('');
        }
    }

    public function Insert_Invitado()
    {
        $dato['fecha'] = $this->input->post("fecha_i");
        $dato['persona'] = $this->input->post("persona_i");
        $dato['dni'] = $this->input->post("dni_i");
        $dato['inst_empresa'] = $this->input->post("inst_empresa_i");
        $dato['invitado'] = $this->input->post("invitado_i");
        $this->Model_IFV->insert_invitado($dato);
    }

    public function Modal_Update_Invitado($id_grupo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_invitado($id_grupo);
            $dato['list_invitado'] = $this->Model_IFV->get_list_invitado_combo();
            $this->load->view('view_IFV/invitado/modal_editar', $dato);
        } else {
            redirect('');
        }
    }

    public function Update_Invitado()
    {
        $dato['id_invitado'] = $this->input->post("id_invitado");
        $dato['fecha'] = $this->input->post("fecha_u");
        $dato['persona'] = $this->input->post("persona_u");
        $dato['dni'] = $this->input->post("dni_u");
        $dato['inst_empresa'] = $this->input->post("inst_empresa_u");
        $dato['invitado'] = $this->input->post("invitado_u");
        $this->Model_IFV->update_invitado($dato);
    }

    public function Delete_Invitado()
    {
        $dato['id_invitado'] = $this->input->post("id_invitado");
        $this->Model_IFV->delete_invitado($dato);
    }

    public function Excel_Invitado()
    {
        $list_invitado = $this->Model_IFV->get_list_invitado();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:E1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:E1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Invitado');

        $sheet->setAutoFilter('A1:E1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(50);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(50);
        $sheet->getColumnDimension('E')->setWidth(15);

        $sheet->getStyle('A1:E1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:E1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:E1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Fecha');
        $sheet->setCellValue("B1", 'Persona');
        $sheet->setCellValue("C1", 'DNI');
        $sheet->setCellValue("D1", 'Institución/Empresa');
        $sheet->setCellValue("E1", 'Invitado');

        $contador = 1;

        foreach ($list_invitado as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:E{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("A{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("B{$contador}", $list['persona']);
            $sheet->setCellValue("C{$contador}", $list['dni']);
            $sheet->setCellValue("D{$contador}", $list['inst_empresa']);
            $sheet->setCellValue("E{$contador}", $list['invitado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Invitado (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------DOC ALUMNOS-------------------------------------------
    public function Doc_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/doc_alumno/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Doc_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_alumno'] = $this->Model_IFV->get_list_todos_alumno();
            $this->load->view('view_IFV/doc_alumno/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Doc_Alumno()
    {
        $list_alumno = $this->Model_IFV->get_list_todos_alumno();
        //$list_documento = $this->Model_IFV->get_list_doc_alumnos();
        //$list_detalle_documento = $this->Model_IFV->get_all_detalle_doc_alumnos();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:S2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:S2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Doc. Alumnos');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(30);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(22);
        $sheet->getColumnDimension('G')->setWidth(16);
        $sheet->getColumnDimension('H')->setWidth(18);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(30);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(20);
        $sheet->getColumnDimension('S')->setWidth(50);

        $sheet->getStyle('A1:S2')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:S2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:S2")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->mergeCells("A1:A2");
        $sheet->mergeCells("B1:B2");
        $sheet->mergeCells("C1:C2");
        $sheet->mergeCells("D1:D2");
        $sheet->mergeCells("E1:E2");
        $sheet->mergeCells("F1:F2");
        $sheet->mergeCells("G1:G2");
        $sheet->mergeCells("H1:H2");
        $sheet->mergeCells("I1:I2");
        $sheet->mergeCells("J1:J2");
        $sheet->mergeCells("K1:K2");
        $sheet->mergeCells("L1:L2");
        $sheet->mergeCells("M1:M2");
        $sheet->mergeCells("N1:N2");
        $sheet->mergeCells("O1:O2");
        $sheet->mergeCells("P1:P2");
        $sheet->mergeCells("Q1:Q2");
        $sheet->mergeCells("R1:R2");
        $sheet->mergeCells("S1:S2");

        $sheet->setCellValue("A1", 'Foto');
        $sheet->setCellValue("B1", 'Apellido Paterno');
        $sheet->setCellValue("C1", 'Apellido Materno');
        $sheet->setCellValue("D1", 'Nombre(s)');
        $sheet->setCellValue("E1", 'DNI');
        $sheet->setCellValue("F1", 'Fecha Nacimiento');
        $sheet->setCellValue("G1", 'Edad (Años)');
        $sheet->setCellValue("H1", 'Edad (Meses)');
        $sheet->setCellValue("I1", 'Código');
        $sheet->setCellValue("J1", 'Especialidad');
        $sheet->setCellValue("K1", 'Grupo');
        $sheet->setCellValue("L1", 'Turno');
        $sheet->setCellValue("M1", 'Módulo');
        $sheet->setCellValue("N1", 'Ciclo');
        $sheet->setCellValue("O1", 'Sección');
        $sheet->setCellValue("P1", 'Matrícula');
        $sheet->setCellValue("Q1", 'Alumno');
        $sheet->setCellValue("R1", 'Documentos');
        $sheet->setCellValue("S1", 'Link Foto');

        $contador = 2;
        foreach ($list_alumno as $list) {
            $contador++;

            $fec_de = new DateTime($list['fecha_cumpleanos']);
            $fec_hasta = new DateTime(date('Y-m-d'));
            $diff = $fec_de->diff($fec_hasta);

            $sheet->getStyle("A{$contador}:S{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("S{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:S{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:S{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("S{$contador}")->getFont()->getColor()->setRGB('1E88E5');
            $sheet->getStyle("S{$contador}")->getFont()->setUnderline(true);

            $sheet->setCellValue("A{$contador}", $list['foto']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("C{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("D{$contador}", $list['Nombre']);
            $sheet->setCellValue("E{$contador}", $list['Dni']);
            if ($list['fecha_cumpleanos'] != "" && $list['fecha_cumpleanos'] != "00/00/0000") {
                $sheet->setCellValue("F{$contador}", Date::PHPToExcel($list['fecha_cumpleanos']));
                $sheet->getStyle("F{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }
            $sheet->setCellValue("G{$contador}", $diff->y);
            $sheet->setCellValue("H{$contador}", $diff->m);
            $sheet->setCellValue("I{$contador}", $list['Codigo']);
            $sheet->setCellValue("J{$contador}", $list['Especialidad']);
            $sheet->setCellValue("K{$contador}", $list['Grupo']);
            $sheet->setCellValue("L{$contador}", $list['Turno']);
            $sheet->setCellValue("M{$contador}", $list['Modulo']);
            $sheet->setCellValue("N{$contador}", $list['Ciclo']);
            $sheet->setCellValue("O{$contador}", $list['Seccion']);
            $sheet->setCellValue("P{$contador}", $list['Matricula']);
            $sheet->setCellValue("Q{$contador}", $list['Alumno']);
            $sheet->setCellValue("R{$contador}", $list['documentos_subidos'] . "/" . $list['documentos_obligatorios']);
            if ($list['link_foto'] != "") {
                $sheet->setCellValue("S{$contador}", base_url() . $list['link_foto']);
                $sheet->getCell("S{$contador}")->getHyperlink()->setURL(base_url() . $list['link_foto']);
            }

            /*$primera_letra = "W";
            $segunda_letra = "Y";
            $tercera_letra = "Z";

            foreach($list_documento as $documento){
                $sheet->getStyle("$primera_letra{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("$segunda_letra{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("$tercera_letra{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("$primera_letra{$contador}:$tercera_letra{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                $sheet->getStyle("$primera_letra{$contador}:$tercera_letra{$contador}")->applyFromArray($styleThinBlackBorderOutline);

                if($documento['cod_documento']=="D01" || $documento['cod_documento']=="D20"){
                    $arpay =$this->Model_IFV->get_list_documento_alumno_arpay($list['Id']);

                    if(count($arpay)>0){
                        if($arpay[0]['Fecha_Entrega']!=""){
                            $sheet->setCellValue("$primera_letra{$contador}", count($arpay));
                            $sheet->setCellValue("$segunda_letra{$contador}", Date::PHPToExcel($arpay[0]['Fecha_Entrega']));
                            $sheet->getStyle("$segunda_letra{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                        }else{
                            $sheet->setCellValue("$segunda_letra{$contador}", "");
                        }
                        $sheet->setCellValue("$tercera_letra{$contador}", $arpay[0]['Usuario_Entrega']);
                    }else{
                        $sheet->setCellValue("$primera_letra{$contador}", "");
                        $sheet->setCellValue("$segunda_letra{$contador}", "");
                        $sheet->setCellValue("$tercera_letra{$contador}", "");
                    }
                }else{
                    $list_detalle = $this->Model_IFV->get_list_detalle_doc_alumnos($list['Id'],$documento['cod_documento']);

                    if (!empty($list_detalle)) {
                        $sheet->setCellValue("$primera_letra{$contador}", count($list_detalle));
                        if($list_detalle[0]['fec_subido'] != ""){
                            $sheet->setCellValue("$segunda_letra{$contador}", Date::PHPToExcel($list_detalle[0]['fec_subido']));
                            $sheet->getStyle("$segunda_letra{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                        } else {
                            $sheet->setCellValue("$segunda_letra{$contador}", "");
                        }
                        $sheet->setCellValue("$tercera_letra{$contador}", $list_detalle[0]['usuario_codigo']);
                    } else {
                        $sheet->setCellValue("$primera_letra{$contador}", "");
                        $sheet->setCellValue("$segunda_letra{$contador}", "");
                        $sheet->setCellValue("$tercera_letra{$contador}", "");
                    }
                }

                $primera_letra++;
                $primera_letra++;
                $primera_letra++;
                $segunda_letra++;
                $segunda_letra++;
                $segunda_letra++;
                $tercera_letra++;
                $tercera_letra++;
                $tercera_letra++;
            }*/
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Doc. Alumnos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------ALUMNOS OBS-------------------------------------------
    public function Alumno_Obs()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/alumno_obs/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Alumno_Obs()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_alumno_obs'] = $this->Model_IFV->get_list_alumno_obs();
            $this->load->view('view_IFV/alumno_obs/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Alumno_Obs()
    {
        $list_alumno_obs = $this->Model_IFV->get_list_alumno_obs();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:J2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:J2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Alumnos Obs.');

        $sheet->getColumnDimension('A')->setWidth(24);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(20);
        $sheet->getColumnDimension('H')->setWidth(24);
        $sheet->getColumnDimension('I')->setWidth(9);
        $sheet->getColumnDimension('J')->setWidth(100);


        $sheet->getStyle('A1:J2')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:J2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:J2")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->mergeCells("A1:A2");
        $sheet->mergeCells("B1:B2");
        $sheet->mergeCells("C1:C2");
        $sheet->mergeCells("D1:D2");
        $sheet->mergeCells("E1:E2");
        $sheet->mergeCells("F1:F2");
        $sheet->mergeCells("G1:G2");
        $sheet->mergeCells("H1:H2");
        $sheet->mergeCells("I1:I2");
        $sheet->mergeCells("J1:J2");

        $sheet->setCellValue("A1", 'Empresa');
        $sheet->setCellValue("B1", 'Fecha');
        $sheet->setCellValue("C1", 'Usuario');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Apellido Pat.');
        $sheet->setCellValue("F1", 'Apellido Mat.');
        $sheet->setCellValue("G1", 'Nombre(s)');
        $sheet->setCellValue("H1", 'Especialidad');
        $sheet->setCellValue("I1", 'Grupo');
        $sheet->setCellValue("J1", 'Comentario');

        /*$primera_letra = "Q";
        $segunda_letra = "R";
        $tercera_letra = "S";

        foreach($list_documento as $list){
            $sheet->getStyle($primera_letra."1:".$tercera_letra."2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle($primera_letra."1:".$tercera_letra."2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getColumnDimension($primera_letra)->setWidth(15);
            $sheet->getColumnDimension($segunda_letra)->setWidth(15);
            $sheet->getColumnDimension($tercera_letra)->setWidth(15);
            $sheet->getStyle($primera_letra."1:".$tercera_letra."2")->getFont()->setBold(true);
            $spreadsheet->getActiveSheet()->getStyle($primera_letra."1:".$tercera_letra."2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');
            $sheet->getStyle($primera_letra."1:".$tercera_letra."2")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->mergeCells($primera_letra."1:".$tercera_letra."1");
            $sheet->setCellValue($primera_letra."1", $list['cod_documento']);
            $sheet->setCellValue($primera_letra."2", 'Cantidad');
            $sheet->setCellValue($segunda_letra."2", 'Fecha');
            $sheet->setCellValue($tercera_letra."2", 'Usuario');

            $sheet->setAutoFilter("A2:".$tercera_letra."2");

            $primera_letra++;
            $primera_letra++;
            $primera_letra++;
            $segunda_letra++;
            $segunda_letra++;
            $segunda_letra++;
            $tercera_letra++;
            $tercera_letra++;
            $tercera_letra++;
        }*/

        $contador = 2;

        foreach ($list_alumno_obs as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:J{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $comentario = $list['Comentario'];
            if (strlen($comentario) > 150) {
                $comentario = substr($comentario, 0, 150) . '(...)';
            }

            $sheet->setCellValue("A{$contador}", $list['nom_empresa']);
            $sheet->setCellValue("B{$contador}", $list['fecha_registro']);
            $sheet->setCellValue("C{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("D{$contador}", $list['Codigo']);
            $sheet->setCellValue("E{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("F{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("G{$contador}", $list['Nombre']);
            $sheet->setCellValue("H{$contador}", $list['Especialidad']);
            $sheet->setCellValue("I{$contador}", $list['Grupo']);
            $sheet->setCellValue("J{$contador}", $comentario);

            /*$primera_letra = "Q";
            $segunda_letra = "R";
            $tercera_letra = "S";

            foreach($list_documento as $documento){
                $sheet->getStyle("$primera_letra{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("$segunda_letra{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("$tercera_letra{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
                $sheet->getStyle("$primera_letra{$contador}:$tercera_letra{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                $sheet->getStyle("$primera_letra{$contador}:$tercera_letra{$contador}")->applyFromArray($styleThinBlackBorderOutline);

                $list_detalle = $this->Model_BabyLeaders->get_list_detalle_doc_alumnos($list['id_alumno'],$documento['cod_documento']);

                if(count($list_detalle)>0){
                    $sheet->setCellValue("$primera_letra{$contador}", count($list_detalle));
                    if($list_detalle[0]['fec_subido']!=""){
                        $sheet->setCellValue("$segunda_letra{$contador}", Date::PHPToExcel($list_detalle[0]['fec_subido']));
                        $sheet->getStyle("$segunda_letra{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                    }else{
                        $sheet->setCellValue("$segunda_letra{$contador}", "");
                    }
                    $sheet->setCellValue("$tercera_letra{$contador}", $list_detalle[0]['usuario_codigo']);
                }else{
                    $sheet->setCellValue("$primera_letra{$contador}", "");
                    $sheet->setCellValue("$segunda_letra{$contador}", "");
                    $sheet->setCellValue("$tercera_letra{$contador}", "");
                }

                $primera_letra++;
                $primera_letra++;
                $primera_letra++;
                $segunda_letra++;
                $segunda_letra++;
                $segunda_letra++;
                $tercera_letra++;
                $tercera_letra++;
                $tercera_letra++;
            }*/
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Alumnos Obs. (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------SOPORTE DOCS-------------------------------------------
    public function Soporte_Doc()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/soporte_doc/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Soporte_Doc()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_soporte_doc'] = $this->Model_IFV->get_list_soporte_doc();
            $this->load->view('view_IFV/soporte_doc/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Soporte_Doc()
    {
        $list_soporte_doc = $this->Model_IFV->get_list_soporte_doc();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:I1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:I1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Soporte Docs');

        $sheet->setAutoFilter('A1:I1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(40);
        $sheet->getColumnDimension('C')->setWidth(40);
        $sheet->getColumnDimension('D')->setWidth(50);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);

        $sheet->getStyle('A1:I1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:I1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:I1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Empresa');
        $sheet->setCellValue("B1", 'Descripción');
        $sheet->setCellValue("C1", 'Nombre (Documento)');
        $sheet->setCellValue("D1", 'Link');
        $sheet->setCellValue("E1", 'Usuario');
        $sheet->setCellValue("F1", 'Fecha');
        $sheet->setCellValue("G1", 'Archivo');
        $sheet->setCellValue("H1", 'Visible');
        $sheet->setCellValue("I1", 'Estado');

        $contador = 1;

        foreach ($list_soporte_doc as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:I{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:I{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("D{$contador}")->getFont()->getColor()->setRGB('1E88E5');
            $sheet->getStyle("D{$contador}")->getFont()->setUnderline(true);

            $sheet->setCellValue("A{$contador}", $list['cod_empresa']);
            $sheet->setCellValue("B{$contador}", $list['descripcion']);
            $sheet->setCellValue("C{$contador}", $list['nom_documento']);
            if ($list['documento'] != "") {
                $sheet->setCellValue("D{$contador}", $list['link']);
                $sheet->getCell("D{$contador}")->getHyperlink()->setURL($list['href']);
            } else {
                $sheet->setCellValue("D{$contador}", "");
            }
            $sheet->setCellValue("E{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("F{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("F{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("G{$contador}", $list['v_documento']);
            $sheet->setCellValue("H{$contador}", $list['visible']);
            $sheet->setCellValue("I{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Soporte Docs (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Carne_Estudiante($id_fotocheck)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_fotocheck($id_fotocheck);
            $dato['altura'] = 560;//+$cantidad_filas;

            $mpdf = new \Mpdf\Mpdf([
                'margin_top' => 0,
                'mode' => 'utf-8',
                'format' => array(55, 85), 'portrait',
                'margin_bottom' => 0,
                'margin_right' => -14,
                'bleedMargin' => 0,
                'crossMarkMargin' => 0,
                'cropMarkMargin' => 0,
                'nonPrintMargin' => 0,
                'margBuffer' => 0,
                'collapseBlockMargins' => false,
                'default_font' => 'Gotham',
            ]);
            $html = $this->load->view('view_IFV/fotocheck_alumno/carnet', $dato, true);
            //$mpdf->SetHTMLHeader("Content-Disposition: inline");
            $mpdf->WriteHTML($html);
            $mpdf->Output($dato['get_id'][0]['Id'] . ".pdf", "I");
        } else {
            redirect('');
        }
    }

    //---------documentos cargados
    public function Documento_Recibido()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);
            $dato['cantidad_documentos_recibidos'] = count($this->Model_IFV->get_list_documento_recibido(1));

            $this->load->view('view_IFV/documento_recibido/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Documento_Recibido($t)
    {
        if ($this->session->userdata('usuario')) {
            //$dato['list_alumno'] = $this->Model_IFV->get_list_todos_alumno('2');
            $dato['list_documento_recibido'] = $this->Model_IFV->get_list_documento_recibido($t);
            $dato['t'] = $t;
            $this->load->view('view_IFV/documento_recibido/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Documento_Recibido($id_doc_cargado)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_documento_recibido($id_doc_cargado);
            $this->load->view('view_IFV/documento_recibido/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Documento_Recibido()
    {
        $dato['id_doc_cargado'] = $this->input->post("id_doc_cargado");
        $dato['get_id'] = $this->Model_IFV->get_id_documento_recibido($dato['id_doc_cargado']);
        $dato['estado'] = $this->input->post("estado_u");
        $dato['id_motivo'] = $this->input->post("id_motivo_u");

        $this->Model_IFV->update_documento_cargado($dato);
        if ($dato['estado'] == 4) {
            $mail = new PHPMailer(true);
            try {
                /*$mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host       = 'plesk3002.my-hosting-panel.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth   = true;                                   // Enable SMTP authentication
                $mail->Username   = 'noreply@snappy.org.pe';                     // usuario de acceso
                $mail->Password   = '*lP06s1l1';                                // SMTP password
                $mail->SMTPSecure = 'SSL';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port       = 25;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('noreply@snappy.org.pe', "Documentales IFV"); //desde donde se envia*/

                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                $mail->Password = 'ifvc2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('noreplay@ifv.edu.pe', "Admisión IFV");

                $mail->addAddress($dato['get_id'][0]['email']);

                $mail->isHTML(true);                                  // Set email format to HTML

                $mail->Subject = "Documentos Validados - IFV ";


                $mail->Body = '<FONT SIZE=4>Estimado Alumno:<br>
                Su documento ya se encuentra validado y su pago del derecho de examen se encuentra activo.</FONT SIZE>';
                $mail->CharSet = 'UTF-8';
                $mail->send();
            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
        }
    }

    public function Modal_Anular_Documento_Recibido($id_doc_cargado)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_documento_recibido($id_doc_cargado);
            $this->load->view('view_IFV/documento_recibido/modal_anular', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Documento_Recibido_Anular()
    {
        $dato['id_doc_cargado'] = $this->input->post("id_doc_cargado");
        $dato['id_motivo'] = $this->input->post("id_motivo");
        $this->Model_IFV->update_documento_cargado_anular($dato);
    }

    public function Descargar_Documento_Recibido($id_doc_cargado)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_documento_recibido($id_doc_cargado);
            $dato['get_config'] = $this->Model_IFV->get_config('horario_cargado_ifv');
            $image = $dato['get_config'][0]['url_config'] . $dato['get_file'][0]['documento'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            //$data=$this->Model_IFV->get_config('documento_ifv');
            //force_download($name , file_get_contents("fvdoc/".$dato['get_file'][0]['documento']));
            force_download($name, file_get_contents($image));
        } else {
            redirect('');
        }
    }

    public function Excel_Documento_Recibido($tipo)
    {
        $list_documento_recibido = $this->Model_IFV->get_list_documento_recibido($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:J1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:J1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Documentos Recibidos');

        $sheet->setAutoFilter('A1:J1');

        $sheet->getColumnDimension('A')->setWidth(30);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(30);
        $sheet->getColumnDimension('F')->setWidth(40);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(40);

        $sheet->getStyle('A1:J1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:J1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:J1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Ap. Paterno');
        $sheet->setCellValue("B1", 'Ap. Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Especialidad');
        $sheet->setCellValue("F1", 'Documento');
        $sheet->setCellValue("G1", 'Estado');
        $sheet->setCellValue("H1", 'Usuario');
        $sheet->setCellValue("I1", 'Fecha');
        $sheet->setCellValue("J1", 'Motivo');

        $contador = 1;

        foreach ($list_documento_recibido as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("J{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:J{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("C{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("D{$contador}", $list['Codigo']);
            $sheet->setCellValue("E{$contador}", $list['Especialidad']);
            $sheet->setCellValue("F{$contador}", $list['nom_documento']);
            $sheet->setCellValue("G{$contador}", $list['desc_estado']);
            if ($list['estado'] != 2) {
                $sheet->setCellValue("H{$contador}", $list['usuario_codigo']);
            }
            if ($list['estado'] == 2) {
                if ($list['fecha_registro'] != "") {
                    $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['fecha_registro']));
                    $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                } else {
                    $sheet->setCellValue("I{$contador}", "");
                }
            } else {
                if ($list['fecha_actualizacion'] != "") {
                    $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['fecha_actualizacion']));
                    $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                } else {
                    $sheet->setCellValue("I{$contador}", "");
                }
            }
            $sheet->setCellValue("J{$contador}", $list['desc_motivo']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Documentos Recibidos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------POSTULANTES EFSRT-------------------------------------------
    public function Postulantes_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/postulantes_efsrt/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Postulantes_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $parametro = $this->input->post("parametro");
            $dato['parametro'] = $this->input->post("parametro");
            $dato['list_resultados'] = $this->Model_IFV->list_resultado_examen_postulantes_Efsrt_activos();
            if ($parametro == 1) {
                $dato['list_postulantes'] = $this->Model_IFV->get_list_postulantes_efsrt_activos();
            } elseif ($parametro == 2) {
                $dato['list_postulantes'] = $this->Model_IFV->get_list_postulantes_efsrt_terminado();
            } elseif ($parametro == 3) {
                $dato['list_postulantes'] = $this->Model_IFV->get_list_postulantes_efsrt_todos();
            }
            $dato['list_examen'] = $this->Model_IFV->get_list_examen_efsrt_ifv2(2);

            $this->load->view('view_IFV/postulantes_efsrt/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Vacio_Postulantes_Efsrt()
    {
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:J1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:J1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Postulantes');

        $sheet->setAutoFilter('A1:J1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(20);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(25);
        $sheet->getColumnDimension('E')->setWidth(25);
        $sheet->getColumnDimension('F')->setWidth(30);
        $sheet->getColumnDimension('G')->setWidth(20);
        $sheet->getColumnDimension('H')->setWidth(20);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);

        $sheet->getStyle('A1:J1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:J1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:J1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Carrera');
        $sheet->setCellValue("C1", 'DNI');
        $sheet->setCellValue("D1", 'Ap. Paterno');
        $sheet->setCellValue("E1", 'Ap. Materno');
        $sheet->setCellValue("F1", 'Nombres');
        $sheet->setCellValue("G1", 'Fec. Inscripción');
        $sheet->setCellValue("H1", 'Correo');
        $sheet->setCellValue("I1", 'Grupo');
        $sheet->setCellValue("J1", 'Celular');

        $writer = new Xlsx($spreadsheet);

        $filename = 'Lista Postulantes EFSRT Ejemplo';

        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Valida_Insert_Postulantes_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['archivo_excel'] = $this->input->post("archivo_excel");
            $path = $_FILES["archivo_excel"]["tmp_name"];
            $documento = IOFactory::load($path);
            $hojaDeProductos = $documento->getSheet(0);

            $numeroMayorDeFila = $hojaDeProductos->getHighestRow();
            $letraMayorDeColumna = $hojaDeProductos->getHighestColumn();
            $numeroMayorDeColumna = \PhpOffice\PhpSpreadsheet\Cell\Coordinate::columnIndexFromString($letraMayorDeColumna);

            for ($indiceFila = 2; $indiceFila <= $numeroMayorDeFila; $indiceFila++) {
                $dato['codigo'] = $hojaDeProductos->getCellByColumnAndRow(1, $indiceFila);
                $dato['interese'] = $hojaDeProductos->getCellByColumnAndRow(2, $indiceFila);
                $dato['nr_documento'] = $hojaDeProductos->getCellByColumnAndRow(3, $indiceFila);
                $dato['apellido_pat'] = $hojaDeProductos->getCellByColumnAndRow(4, $indiceFila);
                $dato['apellido_mat'] = $hojaDeProductos->getCellByColumnAndRow(5, $indiceFila);
                $dato['nombres'] = $hojaDeProductos->getCellByColumnAndRow(6, $indiceFila);
                $dato['email'] = $hojaDeProductos->getCellByColumnAndRow(8, $indiceFila);
                $dato['grupo'] = $hojaDeProductos->getCellByColumnAndRow(9, $indiceFila);
                $dato['celular'] = $hojaDeProductos->getCellByColumnAndRow(10, $indiceFila);

                $excelDate = $hojaDeProductos->getCellByColumnAndRow(7, $indiceFila)->getValue(); // gives you a number like 44444, which is days since 1900
                $dato['fec_inscripcion'] = NumberFormat::toFormattedString($excelDate, 'YYYY-MM-DD');

                $dato['contador_codigo'] = $this->Model_IFV->valida_reg_cod_postulante_efsrt($dato);
                $dato['contador_codigo_pre'] = $this->Model_IFV->valida_reg_cod_postulante_efsrt_preguardar($dato);

                if (count($dato['contador_codigo']) > 0 || count($dato['contador_codigo_pre']) > 0) {
                    $dato['tipo_error'] = "1";
                    $this->Model_IFV->insert_lista_postulantes_efsrt_temporal($dato);
                } else {
                    if ($dato["email"] == "") {
                        $dato['tipo_error'] = "2";
                        $this->Model_IFV->insert_lista_postulantes_efsrt_temporal($dato);
                    } elseif (strlen($dato['codigo']) != "4") {
                        $dato['tipo_error'] = "3";
                        $this->Model_IFV->insert_lista_postulantes_efsrt_temporal($dato);
                    } else {
                        $dato['carrera'] = $this->Model_IFV->valida_id_carrera($dato);
                        if (count($dato['carrera']) > 0) {
                            $dato['id_carrera'] = $dato['carrera'][0]['id_carrera'];
                            $this->Model_IFV->insert_lista_postulantes_efsrt_preguardar($dato);
                        } else {
                            $dato['tipo_error'] = "4";
                            $this->Model_IFV->insert_lista_postulantes_efsrt_temporal($dato);
                        }
                    }
                }
            }

            $dato['contador_general'] = $this->Model_IFV->valida_lista_postulante_efsrt_temporal_general();
            $dato['contador_tmp'] = $this->Model_IFV->valida_lista_postulante_efsrt_temporal();
            $dato['contador_email_tmp'] = $this->Model_IFV->valida_postulante_efsrt_email_temporal();
            $dato['contador_num_cod_tmp'] = $this->Model_IFV->valida_postulante_efsrt_num_cod_temporal();
            $dato['contador_sin_carrera'] = $this->Model_IFV->valida_postulante_efsrt_nom_carrera();

            if (count($dato['contador_general']) > 15) {
                echo "15";
                $this->Model_IFV->limpiar_postulante_efsrt_temporal();
            } else {

                if (count($dato['contador_tmp']) > 0) {
                    foreach ($dato['contador_tmp'] as $list) {
                        echo "<p style='text-align: justify; font-size:95%; color:black' >Código " . $list['codigo'] . ", no ha sido creado por duplicidad!</p>";
                    }
                }
                if (count($dato['contador_email_tmp']) > 0) {
                    foreach ($dato['contador_email_tmp'] as $list) {
                        echo "<p style='text-align: justify; font-size:95%; color:black' >Código " . $list['codigo'] . ", no ha sido creado por falta de Correo!</p>";
                    }
                }
                if (count($dato['contador_num_cod_tmp']) > 0) {
                    foreach ($dato['contador_num_cod_tmp'] as $list) {
                        echo "<p style='text-align: justify; font-size:95%; color:black' >Código " . $list['codigo'] . " es inválido por cantidad de dígitos!</p>";
                    }
                }
                if (count($dato['contador_sin_carrera']) > 0) {
                    foreach ($dato['contador_sin_carrera'] as $list) {
                        echo "<p style='text-align: justify; font-size:95%; color:black' >Código " . $list['codigo'] . " no ha sido creado por nombre de carrera erronea!</p>";
                    }
                }
                $this->Model_IFV->insert_select_postulantes_efsrt_preguardar();
            }
            $this->Model_IFV->limpiar_postulante_efsrt_temporal();
        } else {
            redirect('/login');
        }
    }

    public function Insert_Postulantes_Efsrt()
    {
        if ($this->session->userdata('usuario')) {

            $dato['archivo_excel'] = $this->input->post("archivo_excel");
            $path = $_FILES["archivo_excel"]["tmp_name"];
            $documento = IOFactory::load($path);
            $hojaDeProductos = $documento->getSheet(0);

            $numeroMayorDeFila = $hojaDeProductos->getHighestRow();
            $letraMayorDeColumna = $hojaDeProductos->getHighestColumn();
            $numeroMayorDeColumna = \PhpOffice\PhpSpreadsheet\Cell\Coordinate::columnIndexFromString($letraMayorDeColumna);

            for ($indiceFila = 2; $indiceFila <= $numeroMayorDeFila; $indiceFila++) {

                $dato['codigo'] = $hojaDeProductos->getCellByColumnAndRow(1, $indiceFila);
                $dato['interese'] = $hojaDeProductos->getCellByColumnAndRow(2, $indiceFila);
                $dato['nr_documento'] = $hojaDeProductos->getCellByColumnAndRow(3, $indiceFila);
                $dato['apellido_pat'] = $hojaDeProductos->getCellByColumnAndRow(4, $indiceFila);
                $dato['apellido_mat'] = $hojaDeProductos->getCellByColumnAndRow(5, $indiceFila);
                $dato['nombres'] = $hojaDeProductos->getCellByColumnAndRow(6, $indiceFila);
                $excelDate = $hojaDeProductos->getCellByColumnAndRow(7, $indiceFila)->getValue(); // gives you a number like 44444, which is days since 1900
                $dato['fec_inscripcion'] = NumberFormat::toFormattedString($excelDate, 'YYYY-MM-DD');
                $dato['email'] = $hojaDeProductos->getCellByColumnAndRow(8, $indiceFila);
                $dato['grupo'] = $hojaDeProductos->getCellByColumnAndRow(9, $indiceFila);
                $dato['celular'] = $hojaDeProductos->getCellByColumnAndRow(10, $indiceFila);

                $dato['contador_codigo'] = $this->Model_IFV->valida_reg_cod_postulante_efsrt($dato);
                if (count($dato['contador_codigo']) > 0) {
                    $dato['tipo_error'] = "1";
                    $this->Model_IFV->insert_lista_postulantes_efsrt_temporal($dato);
                } else {
                    if ($dato["email"] == "") {
                        $dato['tipo_error'] = "2";
                        $this->Model_IFV->insert_lista_postulantes_efsrt_temporal($dato);
                    } elseif (strlen($dato['codigo']) != "4") {
                        $dato['tipo_error'] = "3";
                        $this->Model_IFV->insert_lista_postulantes_efsrt_temporal($dato);
                    } else {
                        $dato['carrera'] = $this->Model_IFV->valida_id_carrera($dato);
                        if (count($dato['carrera']) > 0) {
                            $dato['id_carrera'] = $dato['carrera'][0]['id_carrera'];
                            $this->Model_IFV->insert_lista_postulantes_efsrt($dato);
                        } else {
                            $dato['tipo_error'] = "4";
                            $this->Model_IFV->insert_lista_postulantes_efsrt_temporal($dato);
                        }
                    }
                }
            }

            $this->Model_IFV->limpiar_postulante_efsrt_temporal();
        } else {
            redirect('/login');
        }
    }


    public function Modal_Update_Postulante_Efsrt($id_postulante)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_postulante_efsrt($id_postulante);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado_postulante();
            $dato['list_carrera'] = $this->Model_IFV->get_listar_carrera();
            $this->load->view('view_IFV/postulantes_efsrt/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Postulante_Efsrt()
    {
        $dato['id_postulante'] = $this->input->post("id_postulantee");
        //$dato['nr_documento'] = $this->input->post("nr_documento");
        //$dato['nombres'] = $this->input->post("nombres");
        //$dato['celular'] = $this->input->post("celular");
        //$dato['apellido_pat'] = $this->input->post("apellido_pat");
        //$dato['apellido_mat'] = $this->input->post("apellido_mat");
        $dato['email'] = $this->input->post("emaile");
        $dato['hora_inicio'] = $this->input->post("hora_inicioe");
        $dato['estado'] = $this->input->post("estado");
        $dato['observaciones'] = $this->input->post("observaciones");
        //$dato['fec_inscripcion'] = $this->input->post("fec_inscripcion");
        //$dato['estado'] = $this->input->post("estado");
        //$dato['interese'] = $this->input->post("interese");
        //$dato['id_carrera'] = $this->input->post("id_carrera");
        //$dato['grupo'] = $this->input->post("grupo");
        /*$cant=count($this->Model_IFV->valida_update_postulante_efsrt($dato));
        if($cant>0){
            echo "error";
        }else{*/
        $this->Model_IFV->update_postulante_efsrt($dato);
        //}
    }


    public function Excel_Postulante_Efsrt($tipo_excel)
    {
        $list_resultados = $this->Model_IFV->list_resultado_examen_postulantes_Efsrt_activos();
        if ($tipo_excel == 1) {
            $list_postulantes = $this->Model_IFV->get_list_postulantes_efsrt_activos();
        } elseif ($tipo_excel == 2) {
            $list_postulantes = $this->Model_IFV->get_list_postulantes_efsrt_terminado();
        } elseif ($tipo_excel == 3) {
            $list_postulantes = $this->Model_IFV->get_list_postulantes_efsrt_todos();
        }

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:R1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:R1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Postulantes');

        $sheet->setAutoFilter('A1:R1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(25);
        $sheet->getColumnDimension('F')->setWidth(25);
        $sheet->getColumnDimension('G')->setWidth(30);
        $sheet->getColumnDimension('H')->setWidth(20);
        $sheet->getColumnDimension('I')->setWidth(30);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(18);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(20);
        $sheet->getColumnDimension('O')->setWidth(22);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(60);

        $sheet->getStyle('A1:R1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:R1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:R1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Grupo');
        $sheet->setCellValue("C1", 'Carrera');
        $sheet->setCellValue("D1", 'DNI');
        $sheet->setCellValue("E1", 'A. Paterno');
        $sheet->setCellValue("F1", 'A. Materno');
        $sheet->setCellValue("G1", 'Nombre(s)');
        $sheet->setCellValue("H1", 'Examen');
        $sheet->setCellValue("I1", 'Correo');
        $sheet->setCellValue("J1", 'Celular');
        $sheet->setCellValue("K1", 'Estado');
        $sheet->setCellValue("L1", 'Fecha Envío');
        $sheet->setCellValue("M1", 'Inicio');
        $sheet->setCellValue("N1", 'Evaluación');
        $sheet->setCellValue("O1", 'Evaluación Equivalente');
        $sheet->setCellValue("P1", 'Termino');
        $sheet->setCellValue("Q1", 'Tiempo');
        $sheet->setCellValue("R1", 'Observaciones');

        $contador = 1;

        foreach ($list_postulantes as $list) {
            $contador++;
            $busqueda = in_array($list['id_postulante'], array_column($list_resultados, 'id_postulante'));
            if ($busqueda != false) {
                $posicion = array_search($list['id_postulante'], array_column($list_resultados, 'id_postulante'));
            }
            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("R{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:R{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['codigo']);
            $sheet->setCellValue("B{$contador}", $list['grupo']);
            $sheet->setCellValue("C{$contador}", $list['nom_carrera']);
            $sheet->setCellValue("D{$contador}", $list['nr_documento']);
            $sheet->setCellValue("E{$contador}", $list['apellido_pat']);
            $sheet->setCellValue("F{$contador}", $list['apellido_mat']);
            $sheet->setCellValue("G{$contador}", $list['nombres']);
            $sheet->setCellValue("H{$contador}", "");

            $sheet->setCellValue("I{$contador}", $list['email']);
            $sheet->setCellValue("J{$contador}", $list['celular']);
            $sheet->setCellValue("K{$contador}", $list['nom_status']);

            if ($list['fecha_envio'] == "00/00/0000" || $list['fecha_envio'] == "") {
                $sheet->setCellValue("L{$contador}", "");
            } else {
                $sheet->setCellValue("L{$contador}", Date::PHPToExcel($list['fecha_envio']));
                $sheet->getStyle("L{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            }

            if ($list['estado_postulante'] == 31 || $list['estado_postulante'] == 33) {
                if ($busqueda != false) {
                    if ($list_resultados[$posicion]['tiempo_inicio'] != "") {
                        $mifecha = new DateTime($list_resultados[$posicion]['tiempo_ini']);
                        //$mifecha->modify('+3 hours');
                        //echo $mifecha->format('d/m/Y H:i');

                        if (substr($list_resultados[$posicion]['tiempo_inicio'], 11, 2) >= 12) {
                            $algo = "PM";
                        } else {
                            $algo = "AM";
                        }
                        $list['tiempo_inicio'] = $mifecha->format('d/m/Y H:i:s');
                        $sheet->setCellValue("M{$contador}", substr($list['tiempo_inicio'], 0, 16) . " " . $algo);
                    }
                }
                /*if ($list['tiempo_inicio'] != "") {
                    $mifecha = new DateTime($list['tiempo_ini']);
                    $mifecha->modify('+3 hours');
                    $list['tiempo_inicio']= $mifecha->format('Y-m-d H:i:s');


                    if (substr($list['tiempo_inicio'], 11, 2) >= 12) {
                        $algo = "PM";
                    } else {
                        $algo = "AM";
                    }
                    $list['tiempo_inicio']= $mifecha->format('d/m/Y H:i:s');
                    $sheet->setCellValue("M{$contador}", substr($list['tiempo_inicio'], 0, 16) . " " . $algo);
                }*/
            }

            if ($list['estado_postulante'] == 31 || $list['estado_postulante'] == 33) {
                if ($busqueda != false) {
                    $sheet->setCellValue("N{$contador}", $list_resultados[$posicion]['puntaje']);
                    $sheet->setCellValue("O{$contador}", $list_resultados[$posicion]['puntaje_arpay']);
                }
            }
            if ($list['estado_postulante'] == 31 || $list['estado_postulante'] == 33) {
                if ($busqueda != false) {
                    if ($list_resultados[$posicion]['fecha_termino'] != "") {
                        $mifecha = new DateTime($list_resultados[$posicion]['fec_termino']);
                        //$mifecha->modify('+3 hours');
                        $list['fecha_termino'] = $mifecha->format('Y-m-d H:i:s');
                        if (substr($list['fecha_termino'], 11, 2) >= 12) {
                            $algo = "PM";
                        } else {
                            $algo = "AM";
                        }
                        $list['fecha_termino'] = $mifecha->format('d/m/Y H:i:s');
                        $sheet->setCellValue("P{$contador}", substr($list['fecha_termino'], 0, 16) . " " . $algo);
                    }
                    if ($list_resultados[$posicion]['minutos_t'] != "") {
                        $sheet->setCellValue("Q{$contador}", substr($list_resultados[$posicion]['minutos_t'], 1, 5) . " hr m");
                    }
                }
                /*if ($list['fecha_termino'] != "") {
                    $mifecha = new DateTime($list['fec_termino']);
                    $mifecha->modify('+3 hours');
                    $list['fecha_termino']= $mifecha->format('Y-m-d H:i:s');
                    if (substr($list['fecha_termino'], 11, 2) >= 12) {
                        $algo = "PM";
                    } else {
                        $algo = "AM";
                    }
                    $list['fecha_termino']= $mifecha->format('d/m/Y H:i:s');
                    $sheet->setCellValue("P{$contador}", substr($list['fecha_termino'], 0, 16) . " " . $algo);
                }
                if ($list['minutos_t'] != "") {
                    $sheet->setCellValue("Q{$contador}", substr($list['minutos_t'], 1, 5) . " hr m");
                }*/
                /*if ($list['minutos_t'] != "") {
                    $array = explode(":", $list['minutos_t']);
                    $hr = $array[0];
                    $m = $array[1];
                    $sheet->setCellValue("P{$contador}", (($hr * 60) + ($m)));
                }*/
            }
            $sheet->setCellValue("R{$contador}", $list['observaciones']);
        }

        $writer = new Xlsx($spreadsheet);

        $filename = 'Postulantes (Lista)';

        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //--------------------------------------------------------EXAMEN EFSRT--------------------------------------
    public function Examen_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $this->Model_IFV->actu_estado_examen_efsrt_ifv();

            $dato['limite'] = $this->Model_IFV->cant_area_carrera();

            //$dato['list_examen'] = $this->Model_IFV->get_list_examen_efsrt_ifv();
            //$dato['list_examen2'] = $this->Model_IFV->get_list_examen_efsrt_ifv2();
            //$dato['list_examen3'] = $this->Model_IFV->get_list_examen_efsrt_ifv3();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/examen_adm_efsrt/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Examen_Efsrt_Ifv()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_especialidad'] = $this->Model_IFV->list_especialidad();
            $this->load->view('view_IFV/examen_adm_efsrt/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Examen_Efsrt_IFV()
    {
        $dato['nom_examen'] = $this->input->post("nom_examen");
        $dato['fec_limite'] = $this->input->post("fec_limite") . " 23:59:00";
        $dato['fec_resultados'] = $this->input->post("fec_resultados");

        $dato['mod'] = 1;
        $data = count($this->Model_IFV->valida_examen_efsrt_ifv($dato));
        if ($data > 0) {
            echo "error";
        } else {
            $total = count($this->Model_IFV->cantidad_examen_efsrt_ifv());

            if ($total < 9) {
                $codigo = "EXMP10000" . ($total + 1);
            }
            if ($total > 8 && $total < 99) {
                $codigo = "EXMP1000" . ($total + 1);
            }
            if ($total > 98 && $total < 999) {
                $codigo = "EXMP100" . ($total + 1);
            }
            if ($total > 998 && $total < 9999) {
                $codigo = "EXMP10" . ($total + 1);
            }
            if ($total > 9998 && $total < 99999) {
                $codigo = "EXMP1" . ($total + 1);
            }
            $dato['cod_examen'] = $codigo;
            $this->Model_IFV->insert_examen_efsrt_ifv($dato);
            $carrera = $this->input->post("carrera");
            $ico_col = count($carrera);
            $co = 0;
            $dato['carrera'] = "";
            do {
                //$dato['carrera']=$dato['carrera'].$carrera[$co].",";
                $dato['id_carrera'] = $carrera[$co];
                $this->Model_IFV->insert_carrera_examen_efsrt_ifv($dato);
                $co = $co + 1;
            } while ($co < $ico_col);
            //$dato['carrera']= substr($dato['acceso'],0,-1);
            //
        }

    }

    public function Modal_Update_Examen_Efsrt_IFV($id_examen)
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_estado'] = $this->Model_snappy->get_list_estado();
            $dato['get_id'] = $this->Model_IFV->get_id_examen_efsrt_ifv($id_examen);
            $dato['list_especialidad'] = $this->Model_IFV->list_especialidad();
            $this->load->view('view_IFV/examen_adm_efsrt/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Examen_Efsrt_IFV()
    {
        $dato['id_examen'] = $this->input->post("id_examen");
        $dato['get_id'] = $this->Model_IFV->get_id_examen_efsrt_ifv($dato['id_examen']);
        $dato['nom_examen'] = $this->input->post("nom_examen");
        $dato['fec_limite'] = $this->input->post("fec_limite") . " 23:59:00";
        $dato['fec_resultados'] = $this->input->post("fec_resultados");
        $dato['estado'] = $this->input->post("estado");

        $carrera = $this->input->post("carrerae");
        $dato['carrera_cadena'] = implode(",", $this->input->post("carrerae"));

        $ico_col = count($carrera);
        $co = 0;
        $dato['carrera'] = "";
        $dato['cod_examen'] = $dato['get_id'][0]['cod_examen'];
        $this->Model_IFV->delete_carrera_examen_efsrt_ifv($dato);
        do {
            $dato['id_carrera'] = $carrera[$co];
            $this->Model_IFV->insert_carrera_examen_efsrt_ifv($dato);
            $co = $co + 1;
        } while ($co < $ico_col);

        if ($dato['estado'] == 2) {
            $cant = count($this->Model_IFV->get_examen_efsrt_activo_update($dato));
            if ($cant > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_examen_efsrt_ifv($dato);
            }
        } else {
            $this->Model_IFV->update_examen_efsrt_ifv($dato);
        }
        $dato['consulta'] = $this->Model_IFV->consulta_preguntas_excluidas_efsrt_ifv($dato);

        if (isset($dato['consulta'][0]['respuestas']) && $dato['consulta'][0]['respuestas'] != "") {
            $this->Model_IFV->delete_preguntas_excluidas_efsrt_ifv($dato);
        }


        $data = $this->Model_IFV->get_list_carrera_examen_efsrt($dato['id_examen']);
        $contador = 0;
        $limite = count($data) * 100;
        foreach ($data as $list) {
            $dato['id_carrera'] = $list['id_carrera'];
            $dato['list_pregunta'] = $this->Model_IFV->get_list_preguntas_admision_efsrt($dato['id_carrera'], $dato['id_examen']);
            $contador = $contador + count($dato['list_pregunta']);
        }
        $dato['estado_contenido'] = "0";
        if ($contador >= $limite) {
            $dato['estado_contenido'] = "1";
        }
        $this->Model_IFV->update_examen_efsrt_estado_contenido($dato);
    }

    public function Duplicar_Examen_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            foreach ($_POST['id_examen'] as $list) {
                $dato['id_examen_1'] = $list;
                $id_examen = $list;

                $dato['get_id'] = $this->Model_IFV->get_id_examen_efsrt_ifv($id_examen);

                $dato['nom_examen'] = $dato['get_id'][0]['nom_examen'] . " Duplicado";
                $dato['fec_limite'] = $dato['get_id'][0]['fec_limite'];
                $dato['fec_resultados'] = $dato['get_id'][0]['fec_resultados'];
                $dato['estado_contenido'] = $dato['get_id'][0]['estado_contenido'];

                $total = count($this->Model_IFV->cantidad_examen_efsrt_ifv());

                if ($total < 9) {
                    $codigo = "EXMP10000" . ($total + 1);
                }
                if ($total > 8 && $total < 99) {
                    $codigo = "EXMP1000" . ($total + 1);
                }
                if ($total > 98 && $total < 999) {
                    $codigo = "EXMP100" . ($total + 1);
                }
                if ($total > 998 && $total < 9999) {
                    $codigo = "EXMP10" . ($total + 1);
                }
                if ($total > 9998 && $total < 99999) {
                    $codigo = "EXMP1" . ($total + 1);
                }
                $dato['cod_examen'] = $codigo;


                $this->Model_IFV->insert_examen_efsrt_duplicado_ifv($dato);
                //$dato['pregunta']=$this->Model_IFV->get_preguntas_examen_copia($dato);
                //$this->Model_IFV->insert_respuesta_examen_efsrt_duplicado_ifv($dato);
                //$dato['ultimo'] = $this->Model_IFV->ultimo_examen_efsrt_ifv();
                //$dato['id_examen_nuevo'] = $dato['ultimo'][0]['id_examen'];
                //$this->Model_IFV->duplicar_examen_efsrt_ifv($dato);
                //$this->Model_IFV->copiar_preguntas_examen_efsrt_ifv($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Detalle_Examen_Efsrt($id_examen)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_examen_efsrt_ifv($id_examen);
            $dato['list_carrera'] = $this->Model_IFV->get_list_carrera_examen_efsrt($id_examen);
            $dato['nombre_carrera'] = $this->Model_IFV->list_especialidad();
            //$dato['list_pregunta'] = $this->Model_IFV->get_list_detalle_pregunta_efsrt($id_examen);
            //$dato['list_area'] = $this->Model_IFV->list_carrera_area();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/examen_adm_efsrt/index_detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Preguntas_Efsrt($id_carrera, $id_examen)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_carrera'] = $id_carrera;
            $dato['id_examen'] = $id_examen;
            $dato['get_id'] = $this->Model_IFV->get_id_examen_efsrt_ifv($id_examen);
            $dato['get_carrera'] = $this->Model_IFV->list_especialidad($id_carrera);
            $dato['list_area'] = $this->Model_IFV->list_carrera_area();
            $dato['list_pregunta'] = $this->Model_IFV->get_list_preguntas_admision_efsrt($id_carrera, $id_examen);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/examen_adm_efsrt/detalle_examen/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Pregunta_Efsrt($id_carrera, $id_examen)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_carrera'] = $id_carrera;
            $dato['id_examen'] = $id_examen;
            //$dato['get_id'] = $this->Model_IFV->get_id_carrera_area($id_area);
            $this->load->view('view_IFV/examen_adm_efsrt/detalle_examen/modal_pregunta', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Pregunta_Efsrt()
    {
        $dato['id_carrera'] = $this->input->post("id_carrera");
        $dato['id_examen'] = $this->input->post("id_examen");
        $dato['orden'] = $this->input->post("orden");
        $dato['pregunta'] = $this->input->post("pregunta");
        $dato['alternativa1'] = $this->input->post("alternativa1");
        $dato['alternativa2'] = $this->input->post("alternativa2");
        $dato['alternativa3'] = $this->input->post("alternativa3");
        //$dato['alternativa4'] = $this->input->post("alternativa4");
        $dato['alternativa5'] = $this->input->post("alternativa5");

        $total2 = count($this->Model_IFV->valida_cant_pregunta_admision_efsrt($dato));

        if ($total2 > 99) {
            echo "cant";
        } else {
            $this->Model_IFV->insert_pregunta_admision_efsrt($dato);
            $data = $this->Model_IFV->get_list_carrera_examen_efsrt($dato['id_examen']);
            $contador = 0;
            $limite = count($data) * 100;
            foreach ($data as $list) {
                $dato['id_carrera'] = $list['id_carrera'];
                $dato['list_pregunta'] = $this->Model_IFV->get_list_preguntas_admision_efsrt($dato['id_carrera'], $dato['id_examen']);
                $contador = $contador + count($dato['list_pregunta']);
            }
            $dato['estado_contenido'] = "0";
            if ($contador >= $limite) {
                $dato['estado_contenido'] = "1";
            }
            $this->Model_IFV->update_examen_efsrt_estado_contenido($dato);
        }
    }

    public function Modal_Update_Pregunta_Efsrt($id_pregunta)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_pregunta'] = $id_pregunta;
            $dato['get_id'] = $this->Model_IFV->get_id_pregunta_efsrt_admision($dato);
            $dato['get_id_respuesta'] = $this->Model_IFV->get_id_respuesta_admision_efsrt($dato);
            $this->load->view('view_IFV/examen_adm_efsrt/detalle_examen/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Pregunta_Admision_Efsrt()
    {
        $dato['id_carrera'] = $this->input->post("id_carrerae");
        $dato['id_examen'] = $this->input->post("id_examene");
        $dato['id_pregunta'] = $this->input->post("id_pregunta");
        $dato['get_id'] = $this->Model_IFV->get_id_pregunta_efsrt_admision($dato);
        $dato['orden'] = $this->input->post("ordene");
        $dato['pregunta'] = $this->input->post("preguntae");

        $dato['id_respuesta1'] = $this->input->post("id_respuesta1");
        $dato['id_respuesta2'] = $this->input->post("id_respuesta2");
        $dato['id_respuesta3'] = $this->input->post("id_respuesta3");
        //$dato['id_respuesta4'] = $this->input->post("id_respuesta4");
        $dato['id_respuesta5'] = $this->input->post("id_respuesta5");

        $dato['alternativa1'] = $this->input->post("alternativa1e");
        $dato['alternativa2'] = $this->input->post("alternativa2e");
        $dato['alternativa3'] = $this->input->post("alternativa3e");
        //$dato['alternativa4'] = $this->input->post("alternativa4e");
        $dato['alternativa5'] = $this->input->post("alternativa5e");

        $this->Model_IFV->update_pregunta_admision_efsrt($dato);

        /*$total = count($this->Model_IFV->valida_cant_pregunta_efsrt($dato));
        $dato['limite'] = $this->Model_IFV->cant_area_carrera();
        if ($total >= (count($dato['limite']) * 20)) {
            $dato['estado_contenido'] = "1";
            $this->Model_IFV->update_examen_efsrt_estado_contenido($dato);
        } else {
            $dato['estado_contenido'] = "0";
            $this->Model_IFV->update_examen_efsrt_estado_contenido($dato);
        }*/
        $data = $this->Model_IFV->get_list_carrera_examen_efsrt($dato['id_examen']);
        $contador = 0;
        $limite = count($data) * 100;
        foreach ($data as $list) {
            $dato['id_carrera'] = $list['id_carrera'];
            $dato['list_pregunta'] = $this->Model_IFV->get_list_preguntas_admision_efsrt($dato['id_carrera'], $dato['id_examen']);
            $contador = $contador + count($dato['list_pregunta']);
        }
        $dato['estado_contenido'] = "0";
        if ($contador >= $limite) {
            $dato['estado_contenido'] = "1";
        }
        $this->Model_IFV->update_examen_efsrt_estado_contenido($dato);

    }

    public function Delete_Pregunta_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $id_pregunta = $this->input->post("id_pregunta");
            $dato['id_examen'] = $this->input->post("id_examen");
            $this->Model_IFV->delete_pregunta_efsrt_admision($id_pregunta);

            $data = $this->Model_IFV->get_list_carrera_examen_efsrt($dato['id_examen']);
            $contador = 0;
            $limite = count($data) * 100;
            foreach ($data as $list) {
                $dato['id_carrera'] = $list['id_carrera'];
                $dato['list_pregunta'] = $this->Model_IFV->get_list_preguntas_admision_efsrt($dato['id_carrera'], $dato['id_examen']);
                $contador = $contador + count($dato['list_pregunta']);
            }
            $dato['estado_contenido'] = "0";
            if ($contador >= $limite) {
                $dato['estado_contenido'] = "1";
            }
            $this->Model_IFV->update_examen_efsrt_estado_contenido($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Examen_Efsrt($parametro)
    {
        $data = $this->Model_IFV->get_list_examen_efsrt_ifv2($parametro);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:K1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:K1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Examenes EFSRT');

        $sheet->setAutoFilter('A1:K1');

        $sheet->getColumnDimension('A')->setWidth(40);
        $sheet->getColumnDimension('B')->setWidth(18);
        $sheet->getColumnDimension('C')->setWidth(22);
        $sheet->getColumnDimension('D')->setWidth(18);
        $sheet->getColumnDimension('E')->setWidth(18);
        $sheet->getColumnDimension('F')->setWidth(18);
        $sheet->getColumnDimension('G')->setWidth(18);
        $sheet->getColumnDimension('H')->setWidth(18);
        $sheet->getColumnDimension('I')->setWidth(18);
        $sheet->getColumnDimension('J')->setWidth(18);
        $sheet->getColumnDimension('K')->setWidth(20);

        $sheet->getStyle('A1:K1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:K1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:K1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Descripción');
        $sheet->setCellValue("B1", 'Fecha Envío');
        $sheet->setCellValue("C1", 'Fecha Publicación');
        $sheet->setCellValue("D1", 'Enviados');
        $sheet->setCellValue("E1", 'Sin Iniciar');
        $sheet->setCellValue("F1", 'Sin Concluir');
        $sheet->setCellValue("G1", 'Concluidos');
        $sheet->setCellValue("H1", 'Tiempo');
        $sheet->setCellValue("I1", 'Evaluación');
        $sheet->setCellValue("J1", 'Contenido');
        $sheet->setCellValue("K1", 'Estado');

        $contador = 1;

        foreach ($data as $list) {
            $contador++;

            $sheet->getStyle("B{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:K{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_examen']);
            $sheet->setCellValue("B{$contador}", Date::PHPToExcel($list['fecha_limite']));
            $sheet->getStyle("B{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['fecha_resultados']));
            $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DMYSLASH);
            $sheet->setCellValue("D{$contador}", $list['Enviados']);
            $sheet->setCellValue("E{$contador}", $list['Sin Iniciar']);
            $sheet->setCellValue("F{$contador}", $list['Sin Concluir']);
            $sheet->setCellValue("G{$contador}", $list['Concluido']);

            /*foreach ($list_examen3 as $list1) {
                if ($list1['id_examen'] == $list['id_examen']) {
                    $sheet->setCellValue("H{$contador}", substr($list1['Tiempo'], 0, 8));
                }
            }

            foreach ($list_examen3 as $list1) {
                if ($list1['id_examen'] == $list['id_examen']) {
                    $sheet->setCellValue("I{$contador}", substr($list1['Evaluacion'], 0, 2));
                }
            }*/
            $sheet->setCellValue("I{$contador}", substr($list['promedio'], 0, 2));

            /*foreach ($list_examen as $cant) {
                if ($cant['id_examen'] == $list['id_examen']) {
                    if ($cant['cantidad'] >= (count($limite) * 20)) {
                        $sheet->setCellValue("J{$contador}", "Completo");
                    } else {
                        $sheet->setCellValue("J{$contador}", "Incompleto");
                    }
                }
            }*/
            $sheet->setCellValue("J{$contador}", $list['desc_estado_contenido']);


            if ($list['Concluido'] > 0) {
                $sheet->setCellValue("K{$contador}", $list['nom_status'] . " - Terminado");
            } else {
                $sheet->setCellValue("K{$contador}", $list['nom_status']);
            }
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Examenes de Admisión EFSRT (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------CONTRATO-------------------------------------------
    public function C_Contrato()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/c_contrato/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_C_Contrato()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_c_contrato'] = $this->Model_IFV->get_list_c_contrato();
            $this->load->view('view_IFV/c_contrato/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_C_Contrato()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo'] = $this->Model_IFV->get_list_combo_tipo_c_contrato();
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            $dato['list_mes'] = $this->Model_IFV->get_list_mes();
            $this->load->view('view_IFV/c_contrato/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Alumno_Contrato_I()
    {
        if ($this->session->userdata('usuario')) {
            $dato['alumno'] = $this->input->post("alumno");
            $dato['alumnos'] = "alumnos_i";
            $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_contrato($dato['alumno']);
            $this->load->view('view_IFV/c_contrato/alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Grupo_Contrato_I()
    {
        if ($this->session->userdata('usuario')) {
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_grupo'] = "id_grupo_i";
            $dato['onchange'] = "Traer_Especialidad_Contrato_I();";
            $dato['list_grupo'] = $this->Model_IFV->get_list_grupo_contrato($dato['alumno']);
            $this->load->view('view_IFV/c_contrato/grupo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Especialidad_Contrato_I()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_especialidad'] = "id_especialidad_i";
            $dato['onchange'] = "Traer_Turno_Contrato_I();";
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_contrato($dato['id_grupo'], $dato['alumno']);
            $this->load->view('view_IFV/c_contrato/especialidad', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Turno_Contrato_I()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_turno'] = "id_turno_i";
            $dato['onchange'] = "Traer_Modulo_Contrato_I();";
            $dato['list_turno'] = $this->Model_IFV->get_list_turno_contrato($dato['id_grupo'], $dato['id_especialidad'], $dato['alumno']);
            $this->load->view('view_IFV/c_contrato/turno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Modulo_Contrato_I()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_modulo'] = "id_modulo_i";
            $dato['onchange'] = "Traer_Seccion_Contrato_I();";
            $dato['list_modulo'] = $this->Model_IFV->get_list_modulo_contrato($dato['id_grupo'], $dato['id_especialidad'], $dato['id_turno'], $dato['alumno']);
            $this->load->view('view_IFV/c_contrato/modulo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Seccion_Contrato_I()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_seccion'] = "id_seccion_i";
            $dato['list_seccion'] = $this->Model_IFV->get_list_seccion_contrato($dato['id_grupo'], $dato['id_especialidad'], $dato['id_turno'], $dato['id_modulo'], $dato['alumno']);
            $this->load->view('view_IFV/c_contrato/seccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_C_Contrato()
    {
        $dato['tipo'] = $this->input->post("tipo_i");
        $dato['referencia'] = $this->input->post("referencia_i");
        $dato['mes_anio'] = $this->input->post("mes_anio_i");
        $dato['fecha_envio'] = $this->input->post("fecha_envio_i");
        $dato['descripcion'] = $this->input->post("descripcion_i");
        $dato['asunto'] = $this->input->post("asunto_i");
        $dato['enviar'] = $this->input->post("enviar_i");
        $dato['id_grupo'] = $this->input->post("id_grupo_i");
        $dato['id_especialidad'] = $this->input->post("id_especialidad_i");
        $dato['id_turno'] = $this->input->post("id_turno_i");
        $dato['id_modulo'] = $this->input->post("id_modulo_i");
        $dato['id_seccion'] = $this->input->post("id_seccion_i");
        if ($this->input->post("alumnos_i") != "") {
            $dato['alumnos'] = implode(",", $this->input->post("alumnos_i"));
        } else {
            $dato['alumnos'] = "";
        }
        $dato['texto_correo'] = $this->input->post("texto_correo_i");
        $dato['sms'] = $this->input->post("sms_i");
        $dato['texto_sms'] = $this->input->post("texto_sms_i");
        $dato['documento'] = "";

        $cantidad = $this->Model_IFV->ultimo_id_c_contrato();
        $cantidad = count($cantidad) + 1;

        if ($_FILES["documento_i"]["name"] != "") {
            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["documento_i"]["name"]);
            $config['upload_path'] = './documento_contrato/' . $cantidad;
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./documento_contrato/', 0777);
                chmod('./documento_contrato/' . $cantidad, 0777);
            }
            $config["allowed_types"] = 'pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $path = $_FILES["documento_i"]["name"];
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["documento_i"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["documento_i"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["documento_i"]["error"];
            $_FILES["file"]["size"] = $_FILES["documento_i"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['documento'] = "documento_contrato/" . $cantidad . "/" . $dato['nom_documento'];
            }
        }

        $this->Model_IFV->insert_c_contrato($dato);
    }

    public function Modal_Update_C_Contrato($id_c_contrato)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_c_contrato($id_c_contrato);
            $dato['list_tipo'] = $this->Model_IFV->get_list_combo_tipo_c_contrato();
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            $dato['list_mes'] = $this->Model_IFV->get_list_mes();
            if ($dato['get_id'][0]['enviar'] == 1) {
                $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_contrato($dato['get_id'][0]['alumno']);
            } else {
                $dato['list_grupo'] = $this->Model_IFV->get_list_grupo_contrato($dato['get_id'][0]['alumno']);
                $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_contrato($dato['get_id'][0]['id_grupo'], $dato['get_id'][0]['alumno']);
                $dato['list_turno'] = $this->Model_IFV->get_list_turno_contrato($dato['get_id'][0]['id_grupo'], $dato['get_id'][0]['id_especialidad'], $dato['get_id'][0]['alumno']);
                $dato['list_modulo'] = $this->Model_IFV->get_list_modulo_contrato($dato['get_id'][0]['id_grupo'], $dato['get_id'][0]['id_especialidad'], $dato['get_id'][0]['id_turno'], $dato['get_id'][0]['alumno']);
                $dato['list_seccion'] = $this->Model_IFV->get_list_seccion_contrato($dato['get_id'][0]['id_grupo'], $dato['get_id'][0]['id_especialidad'], $dato['get_id'][0]['id_turno'], $dato['get_id'][0]['id_modulo'], $dato['get_id'][0]['alumno']);
            }
            $dato['list_estado'] = $this->Model_IFV->get_list_status();
            $this->load->view('view_IFV/c_contrato/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Alumno_Contrato_U()
    {
        if ($this->session->userdata('usuario')) {
            $dato['alumno'] = $this->input->post("alumno");
            $dato['alumnos'] = "alumnos_u";
            $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_contrato($dato['alumno']);
            $this->load->view('view_IFV/c_contrato/alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Grupo_Contrato_U()
    {
        if ($this->session->userdata('usuario')) {
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_grupo'] = "id_grupo_u";
            $dato['onchange'] = "Traer_Especialidad_Contrato_U();";
            $dato['list_grupo'] = $this->Model_IFV->get_list_grupo_contrato($dato['alumno']);
            $this->load->view('view_IFV/c_contrato/grupo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Especialidad_Contrato_U()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_especialidad'] = "id_especialidad_u";
            $dato['onchange'] = "Traer_Turno_Contrato_U();";
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_contrato($dato['id_grupo'], $dato['alumno']);
            $this->load->view('view_IFV/c_contrato/especialidad', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Turno_Contrato_U()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_turno'] = "id_turno_u";
            $dato['onchange'] = "Traer_Modulo_Contrato_U();";
            $dato['list_turno'] = $this->Model_IFV->get_list_turno_contrato($dato['id_grupo'], $dato['id_especialidad'], $dato['alumno']);
            $this->load->view('view_IFV/c_contrato/turno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Modulo_Contrato_U()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_modulo'] = "id_modulo_u";
            $dato['onchange'] = "Traer_Seccion_Contrato_U();";
            $dato['list_modulo'] = $this->Model_IFV->get_list_modulo_contrato($dato['id_grupo'], $dato['id_especialidad'], $dato['id_turno'], $dato['alumno']);
            $this->load->view('view_IFV/c_contrato/modulo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Seccion_Contrato_U()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("id_grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['alumno'] = $this->input->post("alumno");
            $dato['id_seccion'] = "id_seccion_u";
            $dato['list_seccion'] = $this->Model_IFV->get_list_seccion_contrato($dato['id_grupo'], $dato['id_especialidad'], $dato['id_turno'], $dato['id_modulo'], $dato['alumno']);
            $this->load->view('view_IFV/c_contrato/seccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_C_Contrato()
    {
        $dato['id_c_contrato'] = $this->input->post("id_c_contrato");
        $dato['tipo'] = $this->input->post("tipo_u");
        $dato['referencia'] = $this->input->post("referencia_u");
        $dato['mes_anio'] = $this->input->post("mes_anio_u");
        $dato['fecha_envio'] = $this->input->post("fecha_envio_u");
        $dato['descripcion'] = $this->input->post("descripcion_u");
        $dato['asunto'] = $this->input->post("asunto_u");
        $dato['enviar'] = $this->input->post("enviar_u");
        $dato['id_grupo'] = $this->input->post("id_grupo_u");
        $dato['id_especialidad'] = $this->input->post("id_especialidad_u");
        $dato['id_turno'] = $this->input->post("id_turno_u");
        $dato['id_modulo'] = $this->input->post("id_modulo_u");
        $dato['id_seccion'] = $this->input->post("id_seccion_u");
        if ($this->input->post("alumnos_u") != "") {
            $dato['alumnos'] = implode(",", $this->input->post("alumnos_u"));
        } else {
            $dato['alumnos'] = "";
        }
        $dato['texto_correo'] = $this->input->post("texto_correo_u");
        $dato['sms'] = $this->input->post("sms_u");
        $dato['texto_sms'] = $this->input->post("texto_sms_u");
        $dato['documento'] = $this->input->post("documento_actual");
        $dato['estado'] = $this->input->post("estado_u");

        if ($_FILES["documento_u"]["name"] != "") {
            if (file_exists($dato['documento'])) {
                unlink($dato['documento']);
            }

            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["documento_u"]["name"]);
            $config['upload_path'] = './documento_contrato/' . $dato['id_c_contrato'];
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./documento_contrato/', 0777);
                chmod('./documento_contrato/' . $dato['id_c_contrato'], 0777);
            }
            $config["allowed_types"] = 'pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $path = $_FILES["documento_u"]["name"];
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["documento_u"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["documento_u"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["documento_u"]["error"];
            $_FILES["file"]["size"] = $_FILES["documento_u"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['documento'] = "documento_contrato/" . $dato['id_c_contrato'] . "/" . $dato['nom_documento'];
            }
        }

        $this->Model_IFV->update_c_contrato($dato);
    }

    public function Delete_C_Contrato()
    {
        $dato['id_c_contrato'] = $this->input->post("id_c_contrato");
        $this->Model_IFV->delete_c_contrato($dato);
    }

    public function Excel_C_Contrato()
    {
        $list_c_contrato = $this->Model_IFV->get_list_c_contrato();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:K1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:K1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Contrato');

        $sheet->setAutoFilter('A1:K1');

        $sheet->getColumnDimension('A')->setWidth(24);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(20);
        $sheet->getColumnDimension('D')->setWidth(50);
        $sheet->getColumnDimension('E')->setWidth(50);
        $sheet->getColumnDimension('F')->setWidth(50);
        $sheet->getColumnDimension('G')->setWidth(50);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);

        $sheet->getStyle('A1:K1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:K1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:K1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Tipo');
        $sheet->setCellValue("B1", 'Ref');
        $sheet->setCellValue("C1", 'Mes/Año');
        $sheet->setCellValue("D1", 'Descripción');
        $sheet->setCellValue("E1", 'Asunto');
        $sheet->setCellValue("F1", 'Texto Correo');
        $sheet->setCellValue("G1", 'Documento');
        $sheet->setCellValue("H1", 'Enviados');
        $sheet->setCellValue("I1", 'Firmados');
        $sheet->setCellValue("J1", 'Por Firmar');
        $sheet->setCellValue("K1", 'Estado');

        $contador = 1;

        foreach ($list_c_contrato as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("C{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:K{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['tipo']);
            $sheet->setCellValue("B{$contador}", $list['referencia']);
            $sheet->setCellValue("C{$contador}", $list['mes_anio']);
            $sheet->setCellValue("D{$contador}", $list['descripcion']);
            $sheet->setCellValue("E{$contador}", $list['asunto']);
            $sheet->setCellValue("F{$contador}", $list['texto_correo']);
            $sheet->setCellValue("G{$contador}", $list['documento']);
            $sheet->setCellValue("H{$contador}", $list['enviados']);
            $sheet->setCellValue("I{$contador}", $list['firmados']);
            $sheet->setCellValue("J{$contador}", $list['por_firmar']);
            $sheet->setCellValue("K{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Contrato (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Descargar_C_Contrato($id_c_contrato)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_list_c_contrato($id_c_contrato);
            $image = $dato['get_file'][0]['documento'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['documento']));
        } else {
            redirect('');
        }
    }

    //---------------------------------------CONTRATO-----------------------------------------
    public function Contrato()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/contrato/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Contrato()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['list_nuevos'] = $this->Model_IFV->get_list_contrato($dato['tipo']);
            $this->load->view('view_IFV/contrato/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Actualizar_Lista_Contrato()
    {
        $this->Model_IFV->truncate_tables_contrato();

        $list_nuevos_fv = $this->Model_IFV->get_list_nuevos_fv_arpay();

        foreach ($list_nuevos_fv as $list) {
            $dato['Id'] = $list['Id'];
            $dato['Codigo'] = $list['Codigo'];
            $dato['Apellido_Paterno'] = $list['Apellido_Paterno'];
            $dato['Apellido_Materno'] = $list['Apellido_Materno'];
            $dato['Nombre'] = $list['Nombre'];
            $dato['Email'] = $list['Email'];
            $dato['Fecha_Cumpleanos'] = $list['Fecha_Cumpleanos'];
            $dato['Celular'] = $list['Celular'];
            $dato['Dni'] = $list['Dni'];
            $dato['Especialidad'] = $list['Especialidad'];
            $dato['Grupo'] = $list['Grupo'];
            $dato['Turno'] = $list['Turno'];

            $this->Model_IFV->insert_nuevos_fv($dato);
        }

        //ENVIO DE CORREOS Y SMS

        include "mcript.php";
        include('application/views/administrador/mensaje/httpPHPAltiria.php');

        $list_contrato = $this->Model_IFV->get_contratos_activos();

        foreach ($list_contrato as $get_contrato) {
            if ($get_contrato['enviar'] == 1) {
                $array = explode(",", $get_contrato['alumnos']);

                if ($get_contrato['v_fecha_envio'] == 1) {
                    if ($get_contrato['fecha_envio'] == date('Y-m-d')) {
                        $i = 0;

                        while ($i < count($array)) {
                            $get_alumno = $this->Model_IFV->get_id_nuevos_fv($array[$i]);
                            $valida = $this->Model_IFV->valida_envio_correo_contrato($get_alumno[0]['Id_Alumno'], $get_alumno[0]['cod_alumno'], $get_contrato['id_c_contrato']);

                            if (count($valida) == 0) {
                                $dato['id_alumno'] = $get_alumno[0]['Id_Alumno'];
                                $dato['cod_alumno'] = $get_alumno[0]['cod_alumno'];
                                $dato['apater_alumno'] = $get_alumno[0]['apater_alumno'];
                                $dato['amater_alumno'] = $get_alumno[0]['amater_alumno'];
                                $dato['nom_alumno'] = $get_alumno[0]['nom_alumno'];
                                $dato['email_alumno'] = $get_alumno[0]['email_alumno'];
                                $dato['celular_alumno'] = $get_alumno[0]['celular_alumno'];
                                $dato['grupo_alumno'] = $get_alumno[0]['grupo_alumno'];
                                $dato['especialidad_alumno'] = $get_alumno[0]['especialidad_alumno'];
                                $dato['turno_alumno'] = $get_alumno[0]['turno_alumno'];
                                $dato['id_contrato'] = $get_contrato['id_c_contrato'];

                                $this->Model_IFV->insert_documento_firma($dato);
                                $ultimo = $this->Model_IFV->ultimo_id_documento_firma();

                                $encryption_id = $encriptar($ultimo[0]['id_documento_firma']);

                                $mail = new PHPMailer(true);
                                $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

                                try {
                                    $mail->SMTPDebug = 0;                      // Enable verbose debug output
                                    $mail->isSMTP();                                            // Send using SMTP
                                    $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                                    $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                                    $mail->Username = 'admision@ifv.edu.pe';                     // usuario de acceso
                                    $mail->Password = $this->config->item('password_fv');                                // SMTP password
                                    $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                                    $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                                    $mail->setFrom('admision@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                                    $mail->addAddress($get_alumno[0]['email_alumno']);

                                    $mail->isHTML(true);                                  // Set email format to HTML

                                    $mail->Subject = $get_contrato['asunto'];

                                    $mail->Body = '<FONT SIZE=3>' . nl2br($get_contrato['texto_correo']) . '<br><br>
                                                                Ingrese al link:' . $link . '
                                                    </FONT SIZE>';

                                    $mail->CharSet = 'UTF-8';
                                    $mail->send();

                                } catch (Exception $e) {
                                    echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                                }

                                if ($get_contrato['sms'] == 1) {
                                    $altiriaSMS = new AltiriaSMS();

                                    $altiriaSMS->setDebug(true);
                                    $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
                                    $altiriaSMS->setPassword('gllg2021');

                                    $sDestination = '51' . $get_alumno[0]['celular_alumno'];
                                    $sMessage = $get_contrato['texto_sms'];
                                    $altiriaSMS->sendSMS($sDestination, $sMessage);
                                }
                            }

                            $i++;
                        }
                    }
                } else {
                    $i = 0;

                    while ($i < count($array)) {
                        $get_alumno = $this->Model_IFV->get_id_nuevos_fv($array[$i]);
                        $valida = $this->Model_IFV->valida_envio_correo_contrato($get_alumno[0]['Id_Alumno'], $get_alumno[0]['cod_alumno'], $get_contrato['id_c_contrato']);

                        if (count($valida) == 0) {
                            $dato['id_alumno'] = $get_alumno[0]['Id_Alumno'];
                            $dato['cod_alumno'] = $get_alumno[0]['cod_alumno'];
                            $dato['apater_alumno'] = $get_alumno[0]['apater_alumno'];
                            $dato['amater_alumno'] = $get_alumno[0]['amater_alumno'];
                            $dato['nom_alumno'] = $get_alumno[0]['nom_alumno'];
                            $dato['email_alumno'] = $get_alumno[0]['email_alumno'];
                            $dato['celular_alumno'] = $get_alumno[0]['celular_alumno'];
                            $dato['grupo_alumno'] = $get_alumno[0]['grupo_alumno'];
                            $dato['especialidad_alumno'] = $get_alumno[0]['especialidad_alumno'];
                            $dato['turno_alumno'] = $get_alumno[0]['turno_alumno'];
                            $dato['id_contrato'] = $get_contrato['id_c_contrato'];

                            $this->Model_IFV->insert_documento_firma($dato);
                            $ultimo = $this->Model_IFV->ultimo_id_documento_firma();

                            $encryption_id = $encriptar($ultimo[0]['id_documento_firma']);

                            $mail = new PHPMailer(true);
                            $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

                            try {
                                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                                $mail->isSMTP();                                            // Send using SMTP
                                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                                $mail->Username = 'admision@ifv.edu.pe';                     // usuario de acceso
                                $mail->Password = $this->config->item('password_fv');                                // SMTP password
                                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                                $mail->setFrom('admision@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                                $mail->addAddress($get_alumno[0]['email_alumno']);

                                $mail->isHTML(true);                                  // Set email format to HTML

                                $mail->Subject = $get_contrato['asunto'];

                                $mail->Body = '<FONT SIZE=3>' . nl2br($get_contrato['texto_correo']) . '<br><br>
                                                            Ingrese al link:' . $link . '
                                                </FONT SIZE>';

                                $mail->CharSet = 'UTF-8';
                                $mail->send();

                            } catch (Exception $e) {
                                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                            }

                            if ($get_contrato['sms'] == 1) {
                                $altiriaSMS = new AltiriaSMS();

                                $altiriaSMS->setDebug(true);
                                $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
                                $altiriaSMS->setPassword('gllg2021');

                                $sDestination = '51' . $get_alumno[0]['celular_alumno'];
                                $sMessage = $get_contrato['texto_sms'];
                                $altiriaSMS->sendSMS($sDestination, $sMessage);
                            }
                        }

                        $i++;
                    }
                }
            } else {
                $list_alumnos = $this->Model_IFV->get_contrato_tipo_1($get_contrato['id_grupo'], $get_contrato['id_especialidad'], $get_contrato['id_turno']);

                if ($get_contrato['v_fecha_envio'] == 1) {
                    if ($get_contrato['fecha_envio'] == date('Y-m-d')) {
                        foreach ($list_alumnos as $list) {
                            $valida = $this->Model_IFV->valida_envio_correo_contrato($list['Id_Alumno'], $list['cod_alumno'], $get_contrato['id_c_contrato']);

                            if (count($valida) == 0) {
                                $dato['id_alumno'] = $list['Id_Alumno'];
                                $dato['cod_alumno'] = $list['cod_alumno'];
                                $dato['apater_alumno'] = $list['apater_alumno'];
                                $dato['amater_alumno'] = $list['amater_alumno'];
                                $dato['nom_alumno'] = $list['nom_alumno'];
                                $dato['email_alumno'] = $list['email_alumno'];
                                $dato['celular_alumno'] = $list['celular_alumno'];
                                $dato['grupo_alumno'] = $list['grupo_alumno'];
                                $dato['especialidad_alumno'] = $list['especialidad_alumno'];
                                $dato['turno_alumno'] = $list['turno_alumno'];
                                $dato['id_contrato'] = $get_contrato['id_c_contrato'];

                                $this->Model_IFV->insert_documento_firma($dato);
                                $ultimo = $this->Model_IFV->ultimo_id_documento_firma();

                                $encryption_id = $encriptar($ultimo[0]['id_documento_firma']);

                                $mail = new PHPMailer(true);
                                $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

                                try {
                                    $mail->SMTPDebug = 0;                      // Enable verbose debug output
                                    $mail->isSMTP();                                            // Send using SMTP
                                    $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                                    $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                                    $mail->Username = 'admision@ifv.edu.pe';                     // usuario de acceso
                                    $mail->Password = $this->config->item('password_fv');                                // SMTP password
                                    $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                                    $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                                    $mail->setFrom('admision@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                                    $mail->addAddress($list['email_alumno']);

                                    $mail->isHTML(true);                                  // Set email format to HTML

                                    $mail->Subject = $get_contrato['asunto'];

                                    $mail->Body = '<FONT SIZE=3>' . nl2br($get_contrato['texto_correo']) . '<br><br>
                                                                Ingrese al link:' . $link . '
                                                    </FONT SIZE>';

                                    $mail->CharSet = 'UTF-8';
                                    $mail->send();

                                } catch (Exception $e) {
                                    echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                                }

                                if ($get_contrato['sms'] == 1) {
                                    $altiriaSMS = new AltiriaSMS();

                                    $altiriaSMS->setDebug(true);
                                    $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
                                    $altiriaSMS->setPassword('gllg2021');

                                    $sDestination = '51' . $list['celular_alumno'];
                                    $sMessage = $get_contrato['texto_sms'];
                                    $altiriaSMS->sendSMS($sDestination, $sMessage);
                                }
                            }
                        }
                    }
                } else {
                    foreach ($list_alumnos as $list) {
                        $valida = $this->Model_IFV->valida_envio_correo_contrato($list['Id_Alumno'], $list['cod_alumno'], $get_contrato['id_c_contrato']);

                        if (count($valida) == 0) {
                            $dato['id_alumno'] = $list['Id_Alumno'];
                            $dato['cod_alumno'] = $list['cod_alumno'];
                            $dato['apater_alumno'] = $list['apater_alumno'];
                            $dato['amater_alumno'] = $list['amater_alumno'];
                            $dato['nom_alumno'] = $list['nom_alumno'];
                            $dato['email_alumno'] = $list['email_alumno'];
                            $dato['celular_alumno'] = $list['celular_alumno'];
                            $dato['grupo_alumno'] = $list['grupo_alumno'];
                            $dato['especialidad_alumno'] = $list['especialidad_alumno'];
                            $dato['turno_alumno'] = $list['turno_alumno'];
                            $dato['id_contrato'] = $get_contrato['id_c_contrato'];

                            $this->Model_IFV->insert_documento_firma($dato);
                            $ultimo = $this->Model_IFV->ultimo_id_documento_firma();

                            $encryption_id = $encriptar($ultimo[0]['id_documento_firma']);

                            $mail = new PHPMailer(true);
                            $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

                            try {
                                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                                $mail->isSMTP();                                            // Send using SMTP
                                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                                $mail->Username = 'admision@ifv.edu.pe';//$mail->Username   = 'admision@ifv.edu.pe';                     // usuario de acceso
                                $mail->Password = $this->config->item('password_fv');// SMTP password
                                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                                $mail->setFrom('admision@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                                $mail->addAddress($list['email_alumno']);

                                $mail->isHTML(true);                                  // Set email format to HTML

                                $mail->Subject = $get_contrato['asunto'];

                                $mail->Body = '<FONT SIZE=3>' . nl2br($get_contrato['texto_correo']) . '<br><br>
                                                            Ingrese al link:' . $link . '
                                                </FONT SIZE>';

                                $mail->CharSet = 'UTF-8';
                                $mail->send();

                            } catch (Exception $e) {
                                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                            }

                            if ($get_contrato['sms'] == 1) {
                                $altiriaSMS = new AltiriaSMS();

                                $altiriaSMS->setDebug(true);
                                $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
                                $altiriaSMS->setPassword('gllg2021');

                                $sDestination = '51' . $list['celular_alumno'];
                                $sMessage = $get_contrato['texto_sms'];
                                $altiriaSMS->sendSMS($sDestination, $sMessage);
                            }
                        }
                    }
                }
            }
        }
    }

    public function Modal_Update_Email_Contrato($id_documento_firma)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_contrato($id_documento_firma);
            $this->load->view('view_IFV/contrato/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Email_Contrato()
    {
        $dato['id_documento_firma'] = $this->input->post("id_documento_firma");
        $dato['email_alumno'] = $this->input->post("email_alumno_u");
        $this->Model_IFV->update_email_contrato($dato);
    }

    public function Reenviar_Email()
    {
        include "mcript.php";

        $dato['id_documento_firma'] = $this->input->post("id_documento_firma");
        $get_id = $this->Model_IFV->get_id_contrato($dato['id_documento_firma']);
        $get_correo = $this->Model_IFV->get_list_c_contrato($get_id[0]['id_contrato']);

        $dato['id_alumno'] = $get_id[0]['id_alumno'];
        $dato['cod_alumno'] = $get_id[0]['cod_alumno'];
        $dato['apater_alumno'] = $get_id[0]['apater_alumno'];
        $dato['amater_alumno'] = $get_id[0]['amater_alumno'];
        $dato['nom_alumno'] = $get_id[0]['nom_alumno'];
        $dato['email_alumno'] = $get_id[0]['email_alumno'];
        $dato['celular_alumno'] = $get_id[0]['celular_alumno'];
        $dato['grupo_alumno'] = $get_id[0]['grupo_alumno'];
        $dato['especialidad_alumno'] = $get_id[0]['especialidad_alumno'];
        $dato['turno_alumno'] = $get_id[0]['turno_alumno'];
        $dato['id_contrato'] = $get_correo[0]['id_c_contrato'];

        $this->Model_IFV->update_documento_firma($dato);

        $encryption_id = $encriptar($get_id[0]['id_documento_firma']);

        $mail = new PHPMailer(true);
        $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

        try {
            $mail->SMTPDebug = 0;                      // Enable verbose debug output
            $mail->isSMTP();                                            // Send using SMTP
            $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
            $mail->SMTPAuth = true;                                   // Enable SMTP authentication
            $mail->Username = 'admision@ifv.edu.pe';                     // usuario de acceso
            $mail->Password = $this->config->item('password_fv');                                // SMTP password
            $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
            $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
            $mail->setFrom('admision@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

            $mail->addAddress($get_id[0]['email_alumno']);

            $mail->isHTML(true);                                  // Set email format to HTML

            $mail->Subject = $get_correo[0]['asunto'];

            $mail->Body = '<FONT SIZE=3>' . nl2br($get_correo[0]['texto_correo']) . '<br><br>
                                        Ingrese al link:' . $link . '
                            </FONT SIZE>';

            $mail->CharSet = 'UTF-8';
            $mail->send();

        } catch (Exception $e) {
            echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
        }
    }

    public function Validar_Arpay()
    {
        $dato['id_documento_firma'] = $this->input->post("id_documento_firma");
        $this->Model_IFV->validar_arpay_documento_firma($dato);
    }

    public function Delete_Contrato()
    {
        $dato['id_documento_firma'] = $this->input->post("id_documento_firma");
        $this->Model_IFV->delete_documento_firma($dato);
    }

    public function Excel_Contrato($tipo)
    {
        $list_nuevos = $this->Model_IFV->get_list_contrato($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:M1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:M1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Contrato');

        $sheet->setAutoFilter('A1:M1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(30);
        $sheet->getColumnDimension('E')->setWidth(30);
        $sheet->getColumnDimension('F')->setWidth(35);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(18);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(18);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(15);

        $sheet->getStyle('A1:M1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:M1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:M1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Contrato');
        $sheet->setCellValue("B1", 'Código');
        $sheet->setCellValue("C1", 'Apellido Paterno');
        $sheet->setCellValue("D1", 'Apellido Materno');
        $sheet->setCellValue("E1", 'Nombre(s)');
        $sheet->setCellValue("F1", 'Email');
        $sheet->setCellValue("G1", 'Celular');
        $sheet->setCellValue("H1", 'Fecha Envío');
        $sheet->setCellValue("I1", 'Hora Envío');
        $sheet->setCellValue("J1", 'Fecha Firma');
        $sheet->setCellValue("K1", 'Hora Firma');
        $sheet->setCellValue("L1", 'Arpay');
        $sheet->setCellValue("M1", 'Status');

        $contador = 1;

        foreach ($list_nuevos as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:M{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:M{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['referencia']);
            $sheet->setCellValue("B{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("C{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("D{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("E{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("F{$contador}", $list['email_alumno']);
            $sheet->setCellValue("G{$contador}", $list['celular_alumno']);
            if ($list['fec_envio'] != "") {
                $sheet->setCellValue("H{$contador}", Date::PHPToExcel($list['fec_envio']));
                $sheet->getStyle("H{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("H{$contador}", "");
            }
            $sheet->setCellValue("I{$contador}", $list['hora_envio']);
            if ($list['fec_firma'] != "") {
                $sheet->setCellValue("J{$contador}", Date::PHPToExcel($list['fec_firma']));
                $sheet->getStyle("J{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("J{$contador}", "");
            }
            $sheet->setCellValue("K{$contador}", $list['hora_firma']);
            $sheet->setCellValue("L{$contador}", $list['v_arpay']);
            $sheet->setCellValue("M{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Contrato (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Uniformes()
    {
        if ($this->session->userdata('usuario')) {
            /*$dato['list_grupo'] = $this->Model_IFV->get_list_grupo_c_total();
            $dato['list_matriculados'] = $this->Model_IFV->get_list_matriculados_c_total();
            $dato['cantidadnulos1'] = $this->Model_IFV->get_list_matriculadosnulosst(2);*/

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/uniformes/index', $dato);
        } else {
            redirect('');
        }
    }

    public function Lista_Uniforme()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['list_matriculado'] = $this->Model_IFV->get_list_uniformes($dato['tipo']);
            //$dato['list_recomendado'] = $this->Model_IFV->get_dni_alumno_recomendados();
            $this->load->view('view_IFV/uniformes/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Modal_Uniforme_Fuera($id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_matriculados($id_alumno);
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();

            $this->load->view('view_IFV/uniformes/modal_registrar_fuera', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Obs_Uniforme($id_alumno, $codigo, $tipo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $id_alumno;
            $dato['tipo'] = $tipo;
            $dato['codigo'] = $codigo;
            $dato['get_id'] = $this->Model_IFV->valida_alumno_retirado($id_alumno);
            $this->load->view('view_IFV/uniformes/modal_obs_retiro', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Detalle_Uniforme_C($id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_matriculados($id_alumno);
            //$dato['list_documento'] = $this->Model_IFV->get_list_documento_matriculados($id_alumno);
            $dato['get_foto'] = $this->Model_IFV->get_list_foto_matriculados($id_alumno);
            $dato['list_registro_ingreso'] = $this->Model_IFV->get_list_registro_ingreso_matriculados($id_alumno);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/uniformes/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    //------horario

    public function Horario()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_carrera'] = $this->Model_IFV->list_carrera();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/horario/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Horario()
    {
        if ($this->session->userdata('usuario')) {
            $dato['user_reg'] = $this->input->post("user_reg");
            $dato['user_reg'] = $this->input->post("user_reg");
            $dato['list_horario'] = $this->Model_IFV->get_list_horario_fv();
            $this->load->view('view_IFV/horario/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Horario()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_horario();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/horario/registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Busca_Modulo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['list_modulo'] = $this->Model_IFV->valida_modulo_disponible($dato['id_especialidad']);
            $this->load->view('view_IFV/horario/cmb_modulo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Horario()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['id_tipo_horario'] = $this->input->post("id_tipo_horario");
            $dato['ch_semana'] = $this->input->post("ch_semana");
            $dato['semana'] = $this->input->post("semana");
            $dato['del_dia'] = $this->input->post("del_dia");
            $dato['hasta'] = $this->input->post("hasta");
            $dato['mod'] = 1;
            $total = count($this->Model_IFV->valida_horario($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_horario($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Editar_Horario($id_horario)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_horario_fv($id_horario);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_horario();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad();

            $dato['list_modulo'] = $this->Model_IFV->valida_modulo_disponible($dato['get_id'][0]['id_especialidad']);
            $dato['list_grupo'] = $this->Model_IFV->busca_grupo_xespecialidad($dato['get_id'][0]['id_especialidad']);
            $dato['get_turno'] = $this->Model_IFV->get_id_grupo_c($dato['get_id'][0]['grupo']);
            if (count($dato['get_turno']) > 0) {
                $dato['id_turno'] = $dato['get_turno'][0]['id_turno'];
                if ($dato['get_turno'][0]['id_turno'] != "") {
                    $dato['list_turno'] = $this->Model_IFV->get_list_turno_xid($dato);
                }
            }

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/horario/editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Horario()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario'] = $this->input->post("id_horario");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['id_tipo_horario'] = $this->input->post("id_tipo_horario");
            $dato['ch_semana'] = $this->input->post("ch_semana");
            $dato['semana'] = $this->input->post("semana");
            $dato['del_dia'] = $this->input->post("del_dia");
            $dato['hasta'] = $this->input->post("hasta");
            $dato['mod'] = 2;
            $total = count($this->Model_IFV->valida_horario($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_horario($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_Horario()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario'] = $this->input->post("id_horario");
            $this->Model_IFV->delete_horario($dato);

        } else {
            redirect('/login');
        }
    }

    public function Modal_Horario_Detalle($id_horario)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_horario_fv($id_horario);
            $dato['list_unidad'] = $this->Model_IFV->get_list_unidad_didactica_xespecialidad($dato['get_id'][0]['id_especialidad']);
            $dato['list_hora'] = $this->Model_IFV->get_list_hora_xturno($dato);
            $dato['list_salon'] = $this->Model_IFV->get_list_salon();
            $this->load->view('view_IFV/horario/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Horario_Detalle()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario'] = $this->input->post("id_horarior");
            $dato['id_hora'] = $this->input->post("id_hora");
            $dato['id_unidad_didactica'] = $this->input->post("id_unidad_didactica");
            $dato['id_profesor'] = $this->input->post("id_profesor");
            $dato['id_salon'] = $this->input->post("id_salon");
            $dato['mod'] = 1;
            $total = count($this->Model_IFV->valida_horario_detalle($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_horario_detalle($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Update_Horario_Detalle()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle");
            $dato['id_horario'] = $this->input->post("id_horariore");
            $dato['id_hora'] = $this->input->post("id_horae");
            $dato['id_unidad_didactica'] = $this->input->post("id_unidad_didacticae");
            $dato['id_profesor'] = $this->input->post("id_profesore");
            $dato['id_salon'] = $this->input->post("id_salone");
            $dato['mod'] = 2;
            $total = count($this->Model_IFV->valida_horario_detalle($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_horario_detalle($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function List_Horario_Detalle()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario'] = $this->input->post("id_horario");
            $dato['list_horario_detalle'] = $this->Model_IFV->list_horario_detalle($dato['id_horario']);
            $this->load->view('view_IFV/horario/lista_horario_detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Horario_Detalle($id_horario_detalle)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_horario_detalle($id_horario_detalle);
            $dato['list_unidad'] = $this->Model_IFV->get_list_unidad_didactica_xespecialidad($dato['get_id'][0]['id_especialidad']);
            $dato['list_hora'] = $this->Model_IFV->get_list_hora_xturno($dato);
            $dato['list_salon'] = $this->Model_IFV->get_list_salon();
            $this->load->view('view_IFV/horario/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Horario_Detalle()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle");
            $this->Model_IFV->delete_horario_detalle($dato);
        } else {
            redirect('/login');
        }
    }

    //----------------------------------------------------------HORA-------------------------------------
    public function C_Hora()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/hora/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_C_Hora()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_hora'] = $this->Model_IFV->get_list_hora();
            $this->load->view('view_IFV/hora/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_C_Hora()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/hora/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_C_Hora()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad_i");
            $dato['nom_turno'] = $this->input->post("nom_turno_i");
            $dato['desde'] = $this->input->post("desde_i");
            $dato['hasta'] = $this->input->post("hasta_i");
            $dato['tolerancia'] = $this->input->post("tolerancia_i");
            $this->Model_IFV->insert_hora($dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_C_Hora($id_hora)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_hora($id_hora);
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/hora/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_C_Hora()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_hora'] = $this->input->post("id_hora");
            $dato['id_especialidad'] = $this->input->post("id_especialidad_u");
            $dato['nom_turno'] = $this->input->post("nom_turno_u");
            $dato['desde'] = $this->input->post("desde_u");
            $dato['hasta'] = $this->input->post("hasta_u");
            $dato['tolerancia'] = $this->input->post("tolerancia_u");
            $this->Model_IFV->update_hora($dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_C_Hora()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_hora'] = $this->input->post("id_hora");
            $this->Model_IFV->delete_hora($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_C_Hora()
    {
        $list_hora = $this->Model_IFV->get_list_hora();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:E1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:E1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Hora');

        $sheet->setAutoFilter('A1:E1');

        $sheet->getColumnDimension('A')->setWidth(40);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);

        $sheet->getStyle('A1:E1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:E1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:E1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Especialidad');
        $sheet->setCellValue("B1", 'Turno');
        $sheet->setCellValue("C1", 'Desde');
        $sheet->setCellValue("D1", 'Hasta');
        $sheet->setCellValue("E1", 'Tolerancia');

        $contador = 1;

        foreach ($list_hora as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:E{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:E{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("B{$contador}", $list['nom_turno']);
            $sheet->setCellValue("C{$contador}", $list['desde']);
            $sheet->setCellValue("D{$contador}", $list['hasta']);
            $sheet->setCellValue("E{$contador}", $list['tolerancia']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Hora (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Busca_Grupo()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['list_grupo'] = $this->Model_IFV->busca_grupo_xespecialidad($dato['id_especialidad']);
            $this->load->view('view_IFV/horario/cmb_grupo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Busca_Turno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_grupo'] = $this->input->post("grupo");
            $dato['get_id'] = $this->Model_IFV->get_id_grupo_c($dato['id_grupo']);
            if (count($dato['get_id']) > 0) {
                $dato['id_turno'] = $dato['get_id'][0]['id_turno'];
                if ($dato['get_id'][0]['id_turno'] != "") {
                    $dato['list_turno'] = $this->Model_IFV->get_list_turno_xid($dato);
                }
            }
            $this->load->view('view_IFV/horario/cmb_turno', $dato);
        } else {
            redirect('/login');
        }
    }

    //------motivo contactenos
    public function C_Motivo_Contactenos()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/motivo_contactenos/index', $dato);
    }

    //esto es dee contactenos ifv
    public function Modal_C_Motivo_Contactenos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_motivo_contactanos();
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_evento();
            $this->load->view('view_IFV/motivo_contactenos/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function List_C_Motivo_Contactenos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_motivo'] = $this->Model_IFV->get_list_motivo_contactenos();
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_evento();
            $this->load->view('view_IFV/motivo_contactenos/list_motivo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_C_Motivo_Contactenos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['titulo'] = $this->input->post("titulo");
            //$dato['de'] = $this->input->post("de");
            $dato['para'] = $this->input->post("para");
            $dato['mod'] = 1;

            if ($this->input->post("usuarios") != "") {
                $dato['usuarios'] = implode(",", $this->input->post("usuarios"));
            } else {
                $dato['usuarios'] = "";
            }

            $total = count($this->Model_IFV->valida_motivo_contactenos($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_motivo_contactenos($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_C_Motivo_Contactenos($id_motivo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_motivo_contactenos($id_motivo);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_motivo_contactanos();
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_evento();
            $this->load->view('view_IFV/motivo_contactenos/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_C_Motivo_Contactenos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_motivo'] = $this->input->post("id_motivo");
            $dato['tipo'] = $this->input->post("tipoe");
            $dato['titulo'] = $this->input->post("tituloe");
            //$dato['de'] = $this->input->post("dee");
            $dato['para'] = $this->input->post("parae");
            $dato['mod'] = 2;

            if ($this->input->post("usuarios") != "") {
                $dato['usuarios'] = implode(",", $this->input->post("usuarios"));
            } else {
                $dato['usuarios'] = "";
            }

            $total = count($this->Model_IFV->valida_motivo_contactenos($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_motivo_contactenos($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_C_Motivo_Contactenos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_motivo'] = $this->input->post("id_motivo");
            $this->Model_IFV->delete_motivo_contactenos($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_C_Motivo_Contactenos()
    {
        $data = $this->Model_IFV->get_list_motivo_contactenos();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        //$sheet->getStyle("A1:D1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        //$sheet->getStyle("A1:D1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Motivo Contactenos');

        $sheet->setAutoFilter('A1:C1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(40);
        //$sheet->getColumnDimension('D')->setWidth(25);

        $sheet->getStyle('A1:C1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:C1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:C1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Tipo');
        $sheet->setCellValue("B1", 'Titulo');
        //$sheet->setCellValue("C1", 'De');
        $sheet->setCellValue("C1", 'Para');

        $contador = 1;

        foreach ($data as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_tipo']);
            $sheet->setCellValue("B{$contador}", $list['titulo']);
            $sheet->setCellValue("C{$contador}", $list['para']);
            //$sheet->setCellValue("D{$contador}", $list['para']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Motivo Contactenos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //----------------------------------------COLABORADORES------------------------------------------
    public function Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/colaborador/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            $tipo = $this->input->post("tipo");
            $dato['list_colaborador'] = $this->Model_IFV->get_list_colaborador($tipo);
            $this->load->view('view_IFV/colaborador/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_departamento'] = $this->Model_IFV->get_list_departamento();
            $dato['list_perfil'] = $this->Model_IFV->get_list_combo_perfil();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/colaborador/registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Provincia_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            $id_departamento = $this->input->post("id_departamento");
            $dato['list_provincia'] = $this->Model_IFV->get_list_provincia($id_departamento);
            $this->load->view('view_IFV/colaborador/provincia', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Distrito_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            $id_provincia = $this->input->post("id_provincia");
            $dato['list_distrito'] = $this->Model_IFV->get_list_distrito($id_provincia);
            $this->load->view('view_IFV/colaborador/distrito', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Colaborador()
    {
        $dato['id_perfil'] = $this->input->post("id_perfil");
        $dato['nombres'] = $this->input->post("nombres");
        $dato['apellido_paterno'] = $this->input->post("apellido_paterno");
        $dato['apellido_materno'] = $this->input->post("apellido_materno");
        $dato['dni'] = $this->input->post("dni");
        $dato['correo_personal'] = $this->input->post("correo_personal");
        $dato['fec_nacimiento'] = $this->input->post("fec_nacimiento");
        $dato['correo_corporativo'] = $this->input->post("correo_corporativo");
        $dato['celular'] = $this->input->post("celular");
        $dato['direccion'] = $this->input->post("direccion");
        $dato['id_departamento'] = $this->input->post("id_departamento");
        $dato['id_provincia'] = $this->input->post("id_provincia");
        $dato['id_distrito'] = $this->input->post("id_distrito");
        $dato['codigo_gll'] = $this->input->post("codigo_gll");
        $dato['nickname'] = $this->input->post("nickname");
        $dato['usuario'] = $this->input->post("usuario");
        $dato['password'] = password_hash($this->input->post("password"), PASSWORD_DEFAULT);
        $dato['password_desencriptado'] = $this->input->post("password");
        $dato['foto'] = "";
        $dato['observaciones'] = $this->input->post("observaciones");

        if ($dato['usuario'] == "") {
            if ($_FILES["foto"]["name"] != "") {
                $cantidad = (count($this->Model_IFV->get_cantidad_colaborador())) + 1;

                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto"]["name"]);
                $config['upload_path'] = './foto_colaborador/' . $cantidad;
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./foto_colaborador/', 0777);
                    chmod('./foto_colaborador/' . $cantidad, 0777);
                }
                $config["allowed_types"] = 'jpeg|png|jpg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["foto"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["foto"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["foto"]["error"];
                $_FILES["file"]["size"] = $_FILES["foto"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['foto'] = "foto_colaborador/" . $cantidad . "/" . $dato['nom_documento'];
                }
            }
            $this->Model_IFV->insert_colaborador($dato);
        } else {
            $valida = $this->Model_IFV->valida_insert_usuario_colaborador($dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                if ($_FILES["foto"]["name"] != "") {
                    $cantidad = (count($this->Model_IFV->get_cantidad_colaborador())) + 1;

                    $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto"]["name"]);
                    $config['upload_path'] = './foto_colaborador/' . $cantidad;
                    if (!file_exists($config['upload_path'])) {
                        mkdir($config['upload_path'], 0777, true);
                        chmod($config['upload_path'], 0777);
                        chmod('./foto_colaborador/', 0777);
                        chmod('./foto_colaborador/' . $cantidad, 0777);
                    }
                    $config["allowed_types"] = 'jpeg|png|jpg';
                    $this->load->library('upload', $config);
                    $this->upload->initialize($config);
                    $_FILES["file"]["name"] = $dato['nom_documento'];
                    $_FILES["file"]["type"] = $_FILES["foto"]["type"];
                    $_FILES["file"]["tmp_name"] = $_FILES["foto"]["tmp_name"];
                    $_FILES["file"]["error"] = $_FILES["foto"]["error"];
                    $_FILES["file"]["size"] = $_FILES["foto"]["size"];
                    if ($this->upload->do_upload('file')) {
                        $data = $this->upload->data();
                        $dato['foto'] = "foto_colaborador/" . $cantidad . "/" . $dato['nom_documento'];
                    }
                }
                $this->Model_IFV->insert_colaborador($dato);
                $ultimo = $this->Model_IFV->ultimo_id_colaborador();
                $dato['id_externo'] = $ultimo[0]['id_colaborador'];
                $this->Model_IFV->insert_usuario_colaborador($dato);
            }
        }
    }

    public function Editar_Colaborador($id_colaborador)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_colaborador($id_colaborador);
            $dato['list_perfil'] = $this->Model_IFV->get_list_combo_perfil();
            $dato['list_departamento'] = $this->Model_IFV->get_list_departamento();
            $dato['list_provincia'] = $this->Model_IFV->get_list_provincia($dato['get_id'][0]['id_departamento']);
            $dato['list_distrito'] = $this->Model_IFV->get_list_distrito($dato['get_id'][0]['id_provincia']);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/colaborador/editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Colaborador()
    {
        $dato['id_colaborador'] = $this->input->post("id_colaborador");
        $dato['id_perfil'] = $this->input->post("id_perfil");
        $dato['nombres'] = $this->input->post("nombres");
        $dato['apellido_paterno'] = $this->input->post("apellido_paterno");
        $dato['apellido_materno'] = $this->input->post("apellido_materno");
        $dato['dni'] = $this->input->post("dni");
        $dato['fec_nacimiento'] = $this->input->post("fec_nacimiento");
        $dato['correo_personal'] = $this->input->post("correo_personal");
        $dato['correo_corporativo'] = $this->input->post("correo_corporativo");
        $dato['celular'] = $this->input->post("celular");
        $dato['direccion'] = $this->input->post("direccion");
        $dato['id_departamento'] = $this->input->post("id_departamento");
        $dato['id_provincia'] = $this->input->post("id_provincia");
        $dato['id_distrito'] = $this->input->post("id_distrito");
        $dato['codigo_gll'] = $this->input->post("codigo_gll");
        $dato['nickname'] = $this->input->post("nickname");
        $dato['usuario'] = $this->input->post("usuario");
        if ($this->input->post("password") != "") {
            $dato['password'] = password_hash($this->input->post("password"), PASSWORD_DEFAULT);
            $dato['password_desencriptado'] = $this->input->post("password");
        } else {
            $dato['password'] = "";
        }
        $dato['foto'] = $this->input->post("foto_actual");
        $dato['estado'] = $this->input->post("estado");
        $dato['observaciones'] = $this->input->post("observaciones");

        if ($dato['usuario'] == "") {
            if ($_FILES["foto"]["name"] != "") {
                if (file_exists($dato['foto'])) {
                    unlink($dato['foto']);
                }
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto"]["name"]);
                $config['upload_path'] = './foto_colaborador/' . $dato['id_colaborador'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./foto_colaborador/', 0777);
                    chmod('./foto_colaborador/' . $dato['id_colaborador'], 0777);
                }
                $config["allowed_types"] = 'jpeg|png|jpg';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["foto"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["foto"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["foto"]["error"];
                $_FILES["file"]["size"] = $_FILES["foto"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['foto'] = "foto_colaborador/" . $dato['id_colaborador'] . "/" . $dato['nom_documento'];
                }
            }

            $this->Model_IFV->update_colaborador($dato);
        } else {
            $valida = $this->Model_IFV->valida_update_usuario_colaborador($dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                if ($_FILES["foto"]["name"] != "") {
                    if (file_exists($dato['foto'])) {
                        unlink($dato['foto']);
                    }
                    $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto"]["name"]);
                    $config['upload_path'] = './foto_colaborador/' . $dato['id_colaborador'];
                    if (!file_exists($config['upload_path'])) {
                        mkdir($config['upload_path'], 0777, true);
                        chmod($config['upload_path'], 0777);
                        chmod('./foto_colaborador/', 0777);
                        chmod('./foto_colaborador/' . $dato['id_colaborador'], 0777);
                    }
                    $config["allowed_types"] = 'jpeg|png|jpg';
                    $this->load->library('upload', $config);
                    $this->upload->initialize($config);
                    $_FILES["file"]["name"] = $dato['nom_documento'];
                    $_FILES["file"]["type"] = $_FILES["foto"]["type"];
                    $_FILES["file"]["tmp_name"] = $_FILES["foto"]["tmp_name"];
                    $_FILES["file"]["error"] = $_FILES["foto"]["error"];
                    $_FILES["file"]["size"] = $_FILES["foto"]["size"];
                    if ($this->upload->do_upload('file')) {
                        $data = $this->upload->data();
                        $dato['foto'] = "foto_colaborador/" . $dato['id_colaborador'] . "/" . $dato['nom_documento'];
                    }
                }

                $this->Model_IFV->update_colaborador($dato);
                $dato['id_externo'] = $dato['id_colaborador'];

                $valida = $this->Model_IFV->valida_insert_users_colaborador($dato);

                if (count($valida) > 0) {
                    $this->Model_IFV->update_usuario_colaborador($dato);
                } else {
                    $this->Model_IFV->insert_usuario_colaborador($dato);
                }
            }
        }
    }

    public function Descargar_Foto_Colaborador($id_colaborador)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_colaborador($id_colaborador);
            $image = $dato['get_file'][0]['foto'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['foto']));
        } else {
            redirect('');
        }
    }

    public function Delete_Colaborador()
    {
        $dato['id_colaborador'] = $this->input->post("id_colaborador");
        $this->Model_IFV->delete_colaborador($dato);
    }

    public function Excel_Colaborador($tipo)
    {
        $list_colaborador = $this->Model_IFV->get_list_colaborador($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:Y1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:Y1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Colaboradores');

        $sheet->setAutoFilter('A1:Y1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(30);
        $sheet->getColumnDimension('E')->setWidth(30);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(30);
        $sheet->getColumnDimension('H')->setWidth(30);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(22);
        $sheet->getColumnDimension('K')->setWidth(40);
        $sheet->getColumnDimension('L')->setWidth(30);
        $sheet->getColumnDimension('M')->setWidth(30);
        $sheet->getColumnDimension('N')->setWidth(30);
        $sheet->getColumnDimension('O')->setWidth(18);
        $sheet->getColumnDimension('P')->setWidth(20);
        $sheet->getColumnDimension('Q')->setWidth(20);
        $sheet->getColumnDimension('R')->setWidth(20);
        $sheet->getColumnDimension('S')->setWidth(20);
        $sheet->getColumnDimension('T')->setWidth(15);
        $sheet->getColumnDimension('U')->setWidth(15);
        $sheet->getColumnDimension('V')->setWidth(15);
        $sheet->getColumnDimension('W')->setWidth(15);
        $sheet->getColumnDimension('X')->setWidth(18);
        $sheet->getColumnDimension('Y')->setWidth(60);

        $sheet->getStyle('A1:Y1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:Y1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:Y1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Foto');
        $sheet->setCellValue("B1", 'Perfil');
        $sheet->setCellValue("C1", 'Apellido Paterno');
        $sheet->setCellValue("D1", 'Apellido Materno');
        $sheet->setCellValue("E1", 'Nombre(s)');
        $sheet->setCellValue("F1", 'DNI');
        $sheet->setCellValue("G1", 'Correo Personal');
        $sheet->setCellValue("H1", 'Correo Corporativo');
        $sheet->setCellValue("I1", 'Celular');
        $sheet->setCellValue("J1", 'Fecha Nacimiento');
        $sheet->setCellValue("K1", 'Dirección');
        $sheet->setCellValue("L1", 'Departamento');
        $sheet->setCellValue("M1", 'Provincia');
        $sheet->setCellValue("N1", 'Distrito');
        $sheet->setCellValue("O1", 'Código GLL');
        $sheet->setCellValue("P1", 'Inicio Funciones');
        $sheet->setCellValue("Q1", 'Fin Funciones');
        $sheet->setCellValue("R1", 'Nickname');
        $sheet->setCellValue("S1", 'Usuario');
        $sheet->setCellValue("T1", 'Estado');
        $sheet->setCellValue("U1", 'CV');
        $sheet->setCellValue("V1", 'CT');
        $sheet->setCellValue("W1", 'FT');
        $sheet->setCellValue("X1", 'Documentos');
        $sheet->setCellValue("Y1", 'Observaciones');

        $contador = 1;

        foreach ($list_colaborador as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:Y{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("K{$contador}:N{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("R{$contador}:S{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("Y{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:Y{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:Y{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['ft']);
            $sheet->setCellValue("B{$contador}", $list['perfil']);
            $sheet->setCellValue("C{$contador}", $list['apellido_paterno']);
            $sheet->setCellValue("D{$contador}", $list['apellido_materno']);
            $sheet->setCellValue("E{$contador}", $list['nombres']);
            $sheet->setCellValue("F{$contador}", $list['dni']);
            $sheet->setCellValue("G{$contador}", $list['correo_personal']);
            $sheet->setCellValue("H{$contador}", $list['correo_corporativo']);
            $sheet->setCellValue("I{$contador}", $list['celular']);
            if ($list['fec_nacimiento'] != "") {
                $sheet->setCellValue("J{$contador}", Date::PHPToExcel($list['fec_nacimiento']));
                $sheet->getStyle("J{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }
            $sheet->setCellValue("K{$contador}", $list['direccion']);
            $sheet->setCellValue("L{$contador}", $list['nombre_departamento']);
            $sheet->setCellValue("M{$contador}", $list['nombre_provincia']);
            $sheet->setCellValue("N{$contador}", $list['nombre_distrito']);
            $sheet->setCellValue("O{$contador}", $list['codigo_gll']);
            if ($list['inicio_funciones'] != "") {
                $sheet->setCellValue("P{$contador}", Date::PHPToExcel($list['inicio_funciones']));
                $sheet->getStyle("P{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }
            if ($list['fin_funciones'] != "") {
                $sheet->setCellValue("Q{$contador}", Date::PHPToExcel($list['fin_funciones']));
                $sheet->getStyle("Q{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }
            $sheet->setCellValue("R{$contador}", $list['nickname']);
            $sheet->setCellValue("S{$contador}", $list['usuario']);
            $sheet->setCellValue("T{$contador}", $list['nom_status']);
            $sheet->setCellValue("U{$contador}", $list['cv']);
            $sheet->setCellValue("V{$contador}", $list['ct']);
            $sheet->setCellValue("W{$contador}", $list['ft']);
            $sheet->setCellValue("X{$contador}", $list['doc']);
            $sheet->setCellValue("Y{$contador}", $list['observaciones']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Colaboradores (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Detalle_Colaborador($id_colaborador)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_colaborador($id_colaborador);
            //$dato['id_colaborador_l20'] = $this->Model_IFV->get_id_todos_l20_colaborador($dato);
            $id_colaborador2 = $dato['get_id'][0]['codigo_gll'];
            $dato['list_tipo_obs'] = $this->Model_IFV->get_list_tipo_obs(2);
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_observacion();
            $dato['list_anios_ingreso'] = $this->Model_IFV->get_ingresos_años($id_colaborador2);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/colaborador/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Cv_Colaborador()
    {
        $dato['id_colaborador'] = $this->input->post("id_colaborador");
        $dato['archivo_dni'] = $this->input->post("dni_actual");
        $dato['cv'] = $this->input->post("cv_actual");

        if ($_FILES["archivo_dni"]["name"] != "") {
            if (file_exists($dato['archivo_dni'])) {
                unlink($dato['archivo_dni']);
            }
            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["archivo_dni"]["name"]);
            $config['upload_path'] = './dni_colaborador/' . $dato['id_colaborador'];
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./dni_colaborador/', 0777);
                chmod('./dni_colaborador/' . $dato['id_colaborador'], 0777);
            }
            $config["allowed_types"] = 'pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["archivo_dni"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["archivo_dni"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["archivo_dni"]["error"];
            $_FILES["file"]["size"] = $_FILES["archivo_dni"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['archivo_dni'] = "dni_colaborador/" . $dato['id_colaborador'] . "/" . $dato['nom_documento'];
            }
        }

        if ($_FILES["cv"]["name"] != "") {
            if (file_exists($dato['cv'])) {
                unlink($dato['cv']);
            }
            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["cv"]["name"]);
            $config['upload_path'] = './cv_colaborador/' . $dato['id_colaborador'];
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./cv_colaborador/', 0777);
                chmod('./cv_colaborador/' . $dato['id_colaborador'], 0777);
            }
            $config["allowed_types"] = 'pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["cv"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["cv"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["cv"]["error"];
            $_FILES["file"]["size"] = $_FILES["cv"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['cv'] = "cv_colaborador/" . $dato['id_colaborador'] . "/" . $dato['nom_documento'];
            }
        }

        $this->Model_IFV->update_cv_colaborador($dato);
    }

    public function Descargar_Archivo_Colaborador($id_colaborador, $orden)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_colaborador($id_colaborador);
            if ($orden == 1) {
                $image = $dato['get_file'][0]['archivo_dni'];
            } else {
                $image = $dato['get_file'][0]['cv'];
            }
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            if ($orden == 1) {
                force_download($name, file_get_contents($dato['get_file'][0]['archivo_dni']));
            } else {
                force_download($name, file_get_contents($dato['get_file'][0]['cv']));
            }
        } else {
            redirect('');
        }
    }

    public function Lista_Contrato_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            $id_colaborador = $this->input->post("id_colaborador");
            $dato['list_contrato'] = $this->Model_IFV->get_list_contrato_colaborador($id_colaborador);
            $this->load->view('view_IFV/colaborador/lista_contrato', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Contrato_Colaborador($id_colaborador)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_colaborador'] = $id_colaborador;
            $dato['get_colab'] = $this->Model_IFV->get_id_colaborador($id_colaborador);
            $dato['get_cant'] = $this->Model_IFV->get_list_cant_contrato_colaborador($id_colaborador);
            $dato['list_perfil'] = $this->Model_IFV->get_list_combo_perfil();
            $dato['list_tipo_contrato'] = $this->Model_IFV->get_tipo_contrato_rrhh();
            $dato['list_estado'] = $this->Model_IFV->get_list_estado_contrato_ifv_rrhh();
            $this->load->view('view_IFV/colaborador/modal_registrar_contrato', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Contrato_Colaborador()
    {
        $dato['id_colaborador'] = $this->input->post("id_colaborador_i");
        $dato['referencia'] = $this->input->post("referencia_i");
        $dato['id_perfil'] = $this->input->post("id_perfil_i");
        $dato['inicio_funciones'] = $this->input->post("inicio_funciones_i");
        $dato['fin_funciones'] = $this->input->post("fin_funciones_i");
        $dato['id_tipo_contrato1'] = $this->input->post("id_tipo_contrato1_i");
        $dato['sueldo1'] = $this->input->post("sueldo1_i");
        $dato['id_tipo_contrato2'] = $this->input->post("id_tipo_contrato2_i");
        $dato['sueldo2'] = $this->input->post("sueldo2_i");
        $dato['estado_contrato'] = $this->input->post("estado_contrato_i");
        $dato['observaciones'] = $this->input->post("observaciones_i");
        $dato['archivo'] = "";

        $valida = $this->Model_IFV->valida_insert_contrato_colaborador($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            if ($_FILES["archivo_i"]["name"] != "") {
                $cantidad = (count($this->Model_IFV->get_cantidad_contrato_colaborador())) + 1;

                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["archivo_i"]["name"]);
                $config['upload_path'] = './contrato_colaborador/' . $cantidad;
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./contrato_colaborador/', 0777);
                    chmod('./contrato_colaborador/' . $cantidad, 0777);
                }
                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["archivo_i"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["archivo_i"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["archivo_i"]["error"];
                $_FILES["file"]["size"] = $_FILES["archivo_i"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['archivo'] = "contrato_colaborador/" . $cantidad . "/" . $dato['nom_documento'];
                }
            }

            $this->Model_IFV->insert_contrato_colaborador($dato);
        }
    }

    public function Modal_Update_Contrato_Colaborador($id_contrato)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_contrato_colaborador($id_contrato);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado_contrato_ifv_rrhh();
            $dato['list_perfil'] = $this->Model_IFV->get_list_combo_perfil();
            $dato['list_tipo_contrato'] = $this->Model_IFV->get_tipo_contrato_rrhh();
            $this->load->view('view_IFV/colaborador/modal_editar_contrato', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Contrato_Colaborador()
    {
        $dato['id_contrato'] = $this->input->post("id_contrato");
        $dato['id_colaborador'] = $this->input->post("id_colaborador_u");
        $dato['id_perfil'] = $this->input->post("id_perfil_u");
        $dato['inicio_funciones'] = $this->input->post("inicio_funciones_u");
        $dato['fin_funciones'] = $this->input->post("fin_funciones_u");
        $dato['id_tipo_contrato1'] = $this->input->post("id_tipo_contrato1_u");
        $dato['sueldo1'] = $this->input->post("sueldo1_u");
        $dato['id_tipo_contrato2'] = $this->input->post("id_tipo_contrato2_u");
        $dato['sueldo2'] = $this->input->post("sueldo2_u");
        $dato['estado_contrato'] = $this->input->post("estado_contrato_u");
        $dato['observaciones'] = $this->input->post("observaciones_u");
        $dato['archivo'] = $this->input->post("archivo_actual");

        $valida = $this->Model_IFV->valida_update_contrato_colaborador($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            if ($_FILES["archivo_u"]["name"] != "") {
                if (file_exists($dato['archivo'])) {
                    unlink($dato['archivo']);
                }
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["archivo_u"]["name"]);
                $config['upload_path'] = './contrato_colaborador/' . $dato['id_contrato'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./contrato_colaborador/', 0777);
                    chmod('./contrato_colaborador/' . $dato['id_contrato'], 0777);
                }
                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["archivo_u"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["archivo_u"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["archivo_u"]["error"];
                $_FILES["file"]["size"] = $_FILES["archivo_u"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['archivo'] = "contrato_colaborador/" . $dato['id_contrato'] . "/" . $dato['nom_documento'];
                }
            }

            $this->Model_IFV->update_contrato_colaborador($dato);
        }
    }

    public function Descargar_Contrato_Colaborador($id_contrato)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_contrato_colaborador($id_contrato);
            $image = $dato['get_file'][0]['archivo'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['archivo']));
        } else {
            redirect('');
        }
    }

    public function Delete_Contrato_Colaborador()
    {
        $dato['id_contrato'] = $this->input->post("id_contrato");
        $this->Model_IFV->delete_contrato_colaborador($dato);
    }

    public function Lista_Pago_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            $id_colaborador = $this->input->post("id_colaborador");
            $dato['list_pago'] = $this->Model_IFV->get_list_pago_colaborador($id_colaborador);
            $this->load->view('view_IFV/colaborador/lista_pago', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Pago_Colaborador($id_colaborador)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_colaborador'] = $id_colaborador;
            $this->load->view('view_IFV/colaborador/modal_registrar_pago', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Pago_Colaborador()
    {
        $dato['id_colaborador'] = $this->input->post("id_colaborador");
        $dato['id_banco'] = $this->input->post("id_banco_i");
        $dato['cuenta_bancaria'] = $this->input->post("cuenta_bancaria_i");

        $valida = $this->Model_IFV->valida_insert_pago_colaborador($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_pago_colaborador($dato);
        }
    }

    public function Modal_Update_Pago_Colaborador($id_pago)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_pago_colaborador($id_pago);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/colaborador/modal_editar_pago', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Pago_Colaborador()
    {
        $dato['id_pago'] = $this->input->post("id_pago");
        $dato['id_banco'] = $this->input->post("id_banco_u");
        $dato['cuenta_bancaria'] = $this->input->post("cuenta_bancaria_u");
        $dato['estado'] = $this->input->post("estado_u");

        $valida = $this->Model_IFV->valida_update_pago_colaborador($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_pago_colaborador($dato);
        }
    }

    public function Delete_Pago_Colaborador()
    {
        $dato['id_pago'] = $this->input->post("id_pago");
        $this->Model_IFV->delete_pago_colaborador($dato);
    }

    public function Lista_Horario_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            $id_colaborador = $this->input->post("id_colaborador");
            $dato['list_horario'] = $this->Model_IFV->get_list_horario_colaborador($id_colaborador, null);
            $this->load->view('view_IFV/colaborador/lista_horario', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Horario_Colaborador($id_colaborador)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_colaborador'] = $id_colaborador;
            //$valida = $this->Model_IFV->get_list_horario_colaborador($id_colaborador,null);
            //$dato['list_contrato'] = $this->Model_IFV->get_list_contrato_colaborador($id_colaborador);
            /*if(count($valida)>0){
                $dato['get_detalle'] = $this->Model_IFV->get_list_horario_colaborador($id_colaborador,null);
                $this->load->view('view_IFV/colaborador/modal_editar_horario',$dato);
            }else{*/
            $this->load->view('view_IFV/colaborador/modal_registrar_horario', $dato);
            //}
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Horario_Colaborador($id_horario)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_horario_colaborador_v2($id_horario);
            $dato['get_dia'] = $this->Model_IFV->get_dia_horario_colaborador_v2($id_horario);
            $this->load->view('view_IFV/colaborador/modal_editar_horario', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Horario_Colaborador($tipo)
    {
        if ($this->session->userdata('usuario')) {
            if ($tipo == 1) {
                $dato['id_contrato'] = $this->input->post("id_contrato_i");
            } else {
                $dato['id_contrato'] = $this->input->post("id_contrato_u");
            }
            $horario_tipo = $this->input->post("horario_tipo");
            $dato['id_colaborador'] = $this->input->post("id_colaborador");

            $this->Model_IFV->truncate_horario_dia($dato);

            $dato['ch_lunes'] = $this->input->post("ch_lunes_" . $horario_tipo);
            if ($dato['ch_lunes'] == 1) {
                $dato['dia'] = 1;
                $dato['nom_dia'] = "Lunes";
                $dato['hora_entrada'] = $this->input->post("hora_entrada_lu_" . $horario_tipo);
                $dato['hora_salida'] = $this->input->post("hora_salida_lu_" . $horario_tipo);
                $dato['no_aplica'] = $this->input->post("no_aplica_lu_" . $horario_tipo);
                $dato['hora_descanso_e'] = $this->input->post("hora_descanso_e_lu_" . $horario_tipo);
                $dato['hora_descanso_s'] = $this->input->post("hora_descanso_s_lu_" . $horario_tipo);

                $this->Model_IFV->insert_horario_dia($dato);
            }

            $dato['ch_martes'] = $this->input->post("ch_martes_" . $horario_tipo);
            if ($dato['ch_martes'] == 1) {
                $dato['dia'] = 2;
                $dato['nom_dia'] = "Martes";
                $dato['hora_entrada'] = $this->input->post("hora_entrada_ma_" . $horario_tipo);
                $dato['hora_salida'] = $this->input->post("hora_salida_ma_" . $horario_tipo);
                $dato['no_aplica'] = $this->input->post("no_aplica_ma_" . $horario_tipo);
                $dato['hora_descanso_e'] = $this->input->post("hora_descanso_e_ma_" . $horario_tipo);
                $dato['hora_descanso_s'] = $this->input->post("hora_descanso_s_ma_" . $horario_tipo);

                $this->Model_IFV->insert_horario_dia($dato);
            }

            $dato['ch_miercoles'] = $this->input->post("ch_miercoles_" . $horario_tipo);
            if ($dato['ch_miercoles'] == 1) {
                $dato['dia'] = 3;
                $dato['nom_dia'] = "Miércoles";
                $dato['hora_entrada'] = $this->input->post("hora_entrada_mi_" . $horario_tipo);
                $dato['hora_salida'] = $this->input->post("hora_salida_mi_" . $horario_tipo);
                $dato['no_aplica'] = $this->input->post("no_aplica_mi_" . $horario_tipo);
                $dato['hora_descanso_e'] = $this->input->post("hora_descanso_e_mi_" . $horario_tipo);
                $dato['hora_descanso_s'] = $this->input->post("hora_descanso_s_mi_" . $horario_tipo);

                $this->Model_IFV->insert_horario_dia($dato);
            }

            $dato['ch_jueves'] = $this->input->post("ch_jueves_" . $horario_tipo);
            if ($dato['ch_jueves'] == 1) {
                $dato['dia'] = 4;
                $dato['nom_dia'] = "Jueves";
                $dato['hora_entrada'] = $this->input->post("hora_entrada_ju_" . $horario_tipo);
                $dato['hora_salida'] = $this->input->post("hora_salida_ju_" . $horario_tipo);
                $dato['no_aplica'] = $this->input->post("no_aplica_ju_" . $horario_tipo);
                $dato['hora_descanso_e'] = $this->input->post("hora_descanso_e_ju_" . $horario_tipo);
                $dato['hora_descanso_s'] = $this->input->post("hora_descanso_s_ju_" . $horario_tipo);

                $this->Model_IFV->insert_horario_dia($dato);
            }

            $dato['ch_viernes'] = $this->input->post("ch_viernes_" . $horario_tipo);
            if ($dato['ch_viernes'] == 1) {
                $dato['dia'] = 5;
                $dato['nom_dia'] = "Viernes";
                $dato['hora_entrada'] = $this->input->post("hora_entrada_vi_" . $horario_tipo);
                $dato['hora_salida'] = $this->input->post("hora_salida_vi_" . $horario_tipo);
                $dato['no_aplica'] = $this->input->post("no_aplica_vi_" . $horario_tipo);
                $dato['hora_descanso_e'] = $this->input->post("hora_descanso_e_vi_" . $horario_tipo);
                $dato['hora_descanso_s'] = $this->input->post("hora_descanso_s_vi_" . $horario_tipo);

                $this->Model_IFV->insert_horario_dia($dato);
            }

            $dato['ch_sabado'] = $this->input->post("ch_sabado_" . $horario_tipo);
            if ($dato['ch_sabado'] == 1) {
                $dato['dia'] = 6;
                $dato['nom_dia'] = "Sábado";
                $dato['hora_entrada'] = $this->input->post("hora_entrada_sa_" . $horario_tipo);
                $dato['hora_salida'] = $this->input->post("hora_salida_sa_" . $horario_tipo);
                $dato['no_aplica'] = $this->input->post("no_aplica_sa_" . $horario_tipo);
                $dato['hora_descanso_e'] = $this->input->post("hora_descanso_e_sa_" . $horario_tipo);
                $dato['hora_descanso_s'] = $this->input->post("hora_descanso_s_sa_" . $horario_tipo);

                $this->Model_IFV->insert_horario_dia($dato);
            }

            $dato['ch_domingo'] = $this->input->post("ch_domingo_" . $horario_tipo);
            if ($dato['ch_domingo'] == 1) {
                $dato['dia'] = 7;
                $dato['nom_dia'] = "Domingo";
                $dato['hora_entrada'] = $this->input->post("hora_entrada_do_" . $horario_tipo);
                $dato['hora_salida'] = $this->input->post("hora_salida_do_" . $horario_tipo);
                $dato['no_aplica'] = $this->input->post("no_aplica_do_" . $horario_tipo);
                $dato['hora_descanso_e'] = $this->input->post("hora_descanso_e_do_" . $horario_tipo);
                $dato['hora_descanso_s'] = $this->input->post("hora_descanso_s_do_" . $horario_tipo);

                $this->Model_IFV->insert_horario_dia($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Lista_Asistencia_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            $id_colaborador = $this->input->post("id_colaborador");
            $dato['list_asistencia'] = $this->Model_IFV->get_list_asistencia_colaborador($id_colaborador);
            $this->load->view('view_IFV/colaborador/lista_asistencia', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Observacion_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            $id_colaborador = $this->input->post("id_colaborador");
            $dato['list_observacion'] = $this->Model_IFV->get_list_observacion_colaborador($id_colaborador);
            $this->load->view('view_IFV/colaborador/lista_observacion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Observacion_Colaborador()
    {
        $dato['id_colaborador'] = $this->input->post("id_colaborador");
        $dato['id_tipo'] = $this->input->post("id_tipo_o");
        $id_tipo = $this->input->post("id_tipo_o");
        $dato['fecha'] = $this->input->post("fecha_o");
        $dato['usuario'] = $this->input->post("usuario_o");
        $dato['observacion'] = $this->input->post("observacion_o");
        $dato['comentariog'] = $this->input->post("comentariog_o");
        if ($_FILES["observacion_archivo"]["name"] != "") {

            $dato['path'] = $_FILES['observacion_archivo']['name'];
            $fecha = date('Y-m-d');
            $path = $_FILES['observacion_archivo']['name'];

            $ext = pathinfo($path, PATHINFO_EXTENSION);

            $mi_archivo = 'observacion_archivo';

            $dato['nom_documento'] = "obs_historial" . $dato['id_colaborador'] . $fecha . "_" . rand(1, 200) . "." . $ext;
            $config['upload_path'] = './colaborador/observacion/' . $dato['id_colaborador'];
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./colaborador/observacion/', 0777);
                chmod('./colaborador/observacion/' . $dato['id_colaborador'], 0777);
            }
            $config["allowed_types"] = 'pdf|pdf|jpg|JPG|jpeg|JPEG|mp4|png|PNG';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["observacion_archivo"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["observacion_archivo"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["observacion_archivo"]["error"];
            $_FILES["file"]["size"] = $_FILES["observacion_archivo"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['observacion_archivo'] = "colaborador/observacion/" . $dato['id_colaborador'] . "/" . $dato['nom_documento'];
            }
        } else {
            $dato['observacion_archivo'] = "";
        }

        if ($id_tipo != 0) {
            $valida = $this->Model_IFV->valida_insert_observacion_colaborador($dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_observacion_colaborador($dato);
            }
        }

        $this->Model_IFV->update_comentario_colaborador($dato);
    }

    public function Delete_Observacion_Colaborador()
    {
        $dato['id_observacion'] = $this->input->post("id_observacion");
        $dato['get_id'] = $this->Model_IFV->get_id_obscimg($dato['id_observacion']);

        if (file_exists($dato['get_id'][0]['observacion_archivo'])) {
            unlink($dato['get_id'][0]['observacion_archivo']);
        }
        $this->Model_IFV->delete_observacion_colaborador($dato);
    }

    //---------------------------------RETIRADOS----------------------------
    public function Retirados()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/retirados/index', $dato);

        } else {
            redirect('');
        }
    }

    public function Lista_Retirados()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_retirados'] = $this->Model_IFV->get_list_retirados();
            $this->load->view('view_IFV/retirados/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Retirados()
    {
        $list_retirados = $this->Model_IFV->get_list_retirados($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:T1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:T1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Retirados');

        $sheet->setAutoFilter('A1:T1');

        $sheet->getColumnDimension('A')->setWidth(22);
        $sheet->getColumnDimension('B')->setWidth(22);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(30);
        $sheet->getColumnDimension('F')->setWidth(40);
        $sheet->getColumnDimension('G')->setWidth(60);
        $sheet->getColumnDimension('H')->setWidth(20);
        $sheet->getColumnDimension('I')->setWidth(60);
        $sheet->getColumnDimension('J')->setWidth(20);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(22);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(40);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(60);
        $sheet->getColumnDimension('S')->setWidth(60);
        $sheet->getColumnDimension('T')->setWidth(34);

        $sheet->getStyle('A1:T1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:T1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:T1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Codigo');
        $sheet->setCellValue("E1", '¿Desde cuando no asiste?');
        $sheet->setCellValue("F1", 'Motivo Arpay');
        $sheet->setCellValue("G1", 'Observaciones Arpay');
        $sheet->setCellValue("H1", 'Motivo Snappy');
        $sheet->setCellValue("I1", '¿Cual sería?');
        $sheet->setCellValue("J1", '¿FUT de retiro?');
        $sheet->setCellValue("K1", 'Recibo');
        $sheet->setCellValue("L1", 'Fecha');
        $sheet->setCellValue("M1", '¿Pago Pendientes?');
        $sheet->setCellValue("N1", 'Valor');
        $sheet->setCellValue("O1", '¿Alumno contactado telefonicamente?');
        $sheet->setCellValue("P1", 'Fecha');
        $sheet->setCellValue("Q1", 'Hora');
        $sheet->setCellValue("R1", 'Resumen de contacto');
        $sheet->setCellValue("S1", 'Observación de Retiro');
        $sheet->setCellValue("T1", 'Posibilidad de reincorporación');

        $contador = 1;

        foreach ($list_retirados as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:T{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("N{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("R{$contador}:S{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:T{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:T{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("N{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("C{$contador}", $list['Nombre']);
            $sheet->setCellValue("D{$contador}", $list['Codigo']);

            if ($list['fecha_no_asiste'] != "") {
                $sheet->setCellValue("E{$contador}", Date::PHPToExcel($list['fecha_no_asiste']));
                $sheet->getStyle("E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("E{$contador}", "");
            }

            $sheet->setCellValue("F{$contador}", $list['Motivo_Arpay']);
            $sheet->setCellValue("G{$contador}", $list['Observaciones_Arpay']);
            $sheet->setCellValue("H{$contador}", $list['nom_motivo']);
            $sheet->setCellValue("I{$contador}", $list['otro_motivo']);
            $sheet->setCellValue("J{$contador}", $list['fut']);
            $sheet->setCellValue("K{$contador}", $list['tkt_boleta']);

            if ($list['fecha_fut'] != "") {
                $sheet->setCellValue("L{$contador}", Date::PHPToExcel($list['fecha_fut']));
                $sheet->getStyle("L{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("L{$contador}", "");
            }

            $sheet->setCellValue("M{$contador}", $list['pago_pendiente']);
            $sheet->setCellValue("N{$contador}", $list['monto']);
            $sheet->setCellValue("O{$contador}", $list['contacto']);
            $sheet->setCellValue("P{$contador}", $list['fecha_contacto']);
            $sheet->setCellValue("Q{$contador}", $list['hora_contacto']);
            $sheet->setCellValue("R{$contador}", $list['resumen']);
            $sheet->setCellValue("S{$contador}", $list['obs_retiro']);
            $sheet->setCellValue("T{$contador}", $list['reincorporacion']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Retirados (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-----------------------------------TIPO VENTA-------------------------------------
    public function Tipo_Venta()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/ventas/tipo/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Tipo_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo_venta'] = $this->Model_IFV->get_list_tipo_venta();
            $this->load->view('view_IFV/ventas/tipo/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Tipo_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $this->load->view('view_IFV/ventas/tipo/modal_registrar');
        } else {
            redirect('/login');
        }
    }

    public function Insert_Tipo_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['cod_tipo'] = $this->input->post("cod_tipo_i");
            $dato['descripcion'] = $this->input->post("descripcion_i");
            $dato['foto'] = "";

            $validar = $this->Model_IFV->valida_insert_tipo_venta($dato);

            if (count($validar) > 0) {
                echo "error";
            } else {
                /*$cantidad = $this->Model_IFV->ultimo_id_tipo_venta();
                $cantidad = count($cantidad)+1;

                if($_FILES["foto_i"]["name"] != ""){
                    $dato['nom_documento'] = str_replace(' ','_',$_FILES["foto_i"]["name"]);
                    $config['upload_path'] = './foto_tipo_FV/'.$cantidad;
                    if (!file_exists($config['upload_path'])) {
                        mkdir($config['upload_path'], 0777, true);
                        chmod($config['upload_path'], 0777);
                        chmod('./foto_tipo_FV/', 0777);
                        chmod('./foto_tipo_FV/'.$cantidad, 0777);
                    }
                    $config["allowed_types"] = 'jpeg|png|jpg';
                    $this->load->library('upload', $config);
                    $this->upload->initialize($config);
                    $path = $_FILES["foto_i"]["name"];
                    $_FILES["file"]["name"] =  $dato['nom_documento'];
                    $_FILES["file"]["type"] = $_FILES["foto_i"]["type"];
                    $_FILES["file"]["tmp_name"] = $_FILES["foto_i"]["tmp_name"];
                    $_FILES["file"]["error"] = $_FILES["foto_i"]["error"];
                    $_FILES["file"]["size"] = $_FILES["foto_i"]["size"];
                    if($this->upload->do_upload('file')){
                        $data = $this->upload->data();
                        $dato['foto'] = "foto_tipo_FV/".$cantidad."/".$dato['nom_documento'];
                    }
                }*/

                $this->Model_IFV->insert_tipo_venta($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Tipo_Venta($id_tipo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_tipo_venta($id_tipo);
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();
            $this->load->view('view_IFV/ventas/tipo/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Tipo_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_tipo'] = $this->input->post("id_tipo");
            $dato['cod_tipo'] = $this->input->post("cod_tipo_u");
            $dato['descripcion'] = $this->input->post("descripcion_u");
            //$dato['foto']= $this->input->post("foto_actual");
            $dato['estado'] = $this->input->post("estado_u");

            $validar = $this->Model_IFV->valida_update_tipo_venta($dato);

            if (count($validar) > 0) {
                echo "error";
            } else {
                /*if($_FILES["foto_u"]["name"] != ""){
                    if (file_exists($dato['foto'])) {
                        unlink($dato['foto']);
                    }

                    $dato['nom_documento'] = str_replace(' ','_',$_FILES["foto_u"]["name"]);
                    $config['upload_path'] = './foto_tipo_FV/'.$dato['id_tipo'];
                    if (!file_exists($config['upload_path'])) {
                        mkdir($config['upload_path'], 0777, true);
                        chmod($config['upload_path'], 0777);
                        chmod('./foto_tipo_FV/', 0777);
                        chmod('./foto_tipo_FV/'.$dato['id_tipo'], 0777);
                    }
                    $config["allowed_types"] = 'jpeg|png|jpg';
                    $this->load->library('upload', $config);
                    $this->upload->initialize($config);
                    $path = $_FILES["foto_u"]["name"];
                    $_FILES["file"]["name"] =  $dato['nom_documento'];
                    $_FILES["file"]["type"] = $_FILES["foto_u"]["type"];
                    $_FILES["file"]["tmp_name"] = $_FILES["foto_u"]["tmp_name"];
                    $_FILES["file"]["error"] = $_FILES["foto_u"]["error"];
                    $_FILES["file"]["size"] = $_FILES["foto_u"]["size"];
                    if($this->upload->do_upload('file')){
                        $data = $this->upload->data();
                        $dato['foto'] = "foto_tipo_FV/".$dato['id_tipo']."/".$dato['nom_documento'];
                    }
                }*/

                $this->Model_IFV->update_tipo_venta($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_Tipo_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_tipo'] = $this->input->post("id_tipo");
            $this->Model_IFV->delete_tipo_venta($dato);
        } else {
            redirect('/login');
        }
    }

    public function Descargar_Foto_Tipo_Venta($id_tipo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_list_tipo_venta($id_tipo);
            $image = $dato['get_file'][0]['foto'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['foto']));
        } else {
            redirect('');
        }
    }

    public function Excel_Tipo_Venta()
    {
        $list_tipo_venta = $this->Model_IFV->get_list_tipo_venta();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:C1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:C1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Tipo');

        $sheet->setAutoFilter('A1:C1');

        $sheet->getColumnDimension('A')->setWidth(40);
        $sheet->getColumnDimension('B')->setWidth(60);
        $sheet->getColumnDimension('C')->setWidth(15);

        $sheet->getStyle('A1:C1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:C1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:C1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Descripción');
        $sheet->setCellValue("C1", 'Estado');

        $contador = 1;

        foreach ($list_tipo_venta as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['cod_tipo']);
            $sheet->setCellValue("B{$contador}", $list['descripcion']);
            $sheet->setCellValue("C{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Tipo (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-----------------------------------PRODUCTO VENTA-------------------------------------
    public function Producto_Venta()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/ventas/producto/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Producto_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['list_producto_venta'] = $this->Model_IFV->get_list_producto_venta($id_producto = null, $dato);
            $this->load->view('view_IFV/ventas/producto/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Producto_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_venta_combo();
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/ventas/producto/registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Producto_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['cod_producto'] = $this->input->post("cod_producto");
            $dato['id_tipo'] = $this->input->post("id_tipo");
            $dato['id_anio'] = $this->input->post("id_anio");
            $dato['nom_sistema'] = $this->input->post("nom_sistema");
            $dato['nom_documento'] = $this->input->post("nom_documento");
            $dato['fec_inicio'] = $this->input->post("fec_inicio");
            $dato['fec_fin'] = $this->input->post("fec_fin");
            $dato['monto'] = $this->input->post("monto");
            $dato['descuento'] = $this->input->post("descuento");
            $dato['validado'] = $this->input->post("validado");
            $dato['codigo'] = $this->input->post("codigo");
            $dato['pago_automatizado'] = $this->input->post("pago_automatizado");

            $valida = $this->Model_IFV->valida_insert_producto_venta($dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_producto_venta($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Editar_Producto_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $id_producto = $this->input->post("id_producto");
            $dato['get_id'] = $this->Model_IFV->get_list_producto_venta($id_producto, $dato = null);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_venta_combo();
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/ventas/producto/editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Producto_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_producto'] = $this->input->post("id_producto");
            $dato['cod_producto'] = $this->input->post("cod_producto");
            $dato['id_tipo'] = $this->input->post("id_tipo");
            $dato['id_anio'] = $this->input->post("id_anio");
            $dato['nom_sistema'] = $this->input->post("nom_sistema");
            $dato['nom_documento'] = $this->input->post("nom_documento");
            $dato['fec_inicio'] = $this->input->post("fec_inicio");
            $dato['fec_fin'] = $this->input->post("fec_fin");
            $dato['monto'] = $this->input->post("monto");
            $dato['descuento'] = $this->input->post("descuento");
            $dato['validado'] = $this->input->post("validado");
            $dato['codigo'] = $this->input->post("codigo");
            $dato['pago_automatizado'] = $this->input->post("pago_automatizado");
            $dato['estado'] = $this->input->post("estado");

            $valida = $this->Model_IFV->valida_update_producto_venta($dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_producto_venta($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_Producto_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_producto'] = $this->input->post("id_producto");
            $this->Model_IFV->delete_producto_venta($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Producto_Venta($tipo)
    {
        $dato['tipo'] = $tipo;
        $list_producto_venta = $this->Model_IFV->get_list_producto_venta($id_prod = null, $dato);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:U1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:U1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Producto');

        $sheet->setAutoFilter('A1:U1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(40);
        $sheet->getColumnDimension('E')->setWidth(40);
        $sheet->getColumnDimension('F')->setWidth(22);
        $sheet->getColumnDimension('G')->setWidth(22);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(24);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(20);
        $sheet->getColumnDimension('Q')->setWidth(20);
        $sheet->getColumnDimension('R')->setWidth(26);
        $sheet->getColumnDimension('S')->setWidth(15);
        $sheet->getColumnDimension('T')->setWidth(20);
        $sheet->getColumnDimension('U')->setWidth(15);

        $sheet->getStyle('A1:U1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:U1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:U1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Año');
        $sheet->setCellValue("C1", 'Tipo');
        $sheet->setCellValue("D1", 'Nombre Sistema');
        $sheet->setCellValue("E1", 'Nombre Documento');
        $sheet->setCellValue("F1", 'Fecha Inicio Pago');
        $sheet->setCellValue("G1", 'Fecha Fin Pago');
        $sheet->setCellValue("H1", 'Monto');
        $sheet->setCellValue("I1", 'Descuento');
        $sheet->setCellValue("J1", 'Total');
        $sheet->setCellValue("K1", 'Validado');
        $sheet->setCellValue("L1", 'Código');
        $sheet->setCellValue("M1", 'Pago Automatizado');
        $sheet->setCellValue("N1", 'Asignado');
        $sheet->setCellValue("O1", 'Ventas');
        $sheet->setCellValue("P1", 'Ventas (Monto)');
        $sheet->setCellValue("Q1", 'Devoluciones');
        $sheet->setCellValue("R1", 'Devoluciones (Monto)');
        $sheet->setCellValue("S1", 'Total');
        $sheet->setCellValue("T1", 'Total (Monto)');
        $sheet->setCellValue("U1", 'Estado');

        $contador = 1;

        foreach ($list_producto_venta as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:U{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}:J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("P{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("R{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("T{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("A{$contador}:U{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:U{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("H{$contador}:J{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);
            $sheet->getStyle("P{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);
            $sheet->getStyle("R{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);
            $sheet->getStyle("T{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", $list['cod_producto']);
            $sheet->setCellValue("B{$contador}", $list['nom_anio']);
            $sheet->setCellValue("C{$contador}", $list['cod_tipo']);
            $sheet->setCellValue("D{$contador}", $list['nom_sistema']);
            $sheet->setCellValue("E{$contador}", $list['nom_documento']);
            $sheet->setCellValue("F{$contador}", Date::PHPToExcel($list['fec_ini']));
            $sheet->getStyle("F{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("G{$contador}", Date::PHPToExcel($list['fec_fin']));
            $sheet->getStyle("G{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("H{$contador}", $list['monto']);
            $sheet->setCellValue("I{$contador}", $list['descuento']);
            $sheet->setCellValue("J{$contador}", ($list['monto'] - $list['descuento']));
            $sheet->setCellValue("K{$contador}", $list['validado']);
            $sheet->setCellValue("L{$contador}", $list['codigo']);
            $sheet->setCellValue("M{$contador}", $list['pago_automatizado']);
            $sheet->setCellValue("N{$contador}", $list['ventas']);
            $sheet->setCellValue("O{$contador}", $list['ventas']);
            $sheet->setCellValue("P{$contador}", $list['ventas_monto']);
            $sheet->setCellValue("Q{$contador}", $list['devoluciones']);
            $sheet->setCellValue("R{$contador}", $list['devoluciones_monto']);
            $sheet->setCellValue("S{$contador}", ($list['ventas'] - $list['devoluciones']));
            $sheet->setCellValue("T{$contador}", ($list['ventas_monto'] - $list['devoluciones_monto']));
            $sheet->setCellValue("U{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Producto (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Detalle_Producto_Venta($id_producto)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_producto_venta($id_producto);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_venta_combo();
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            $dato['list_estado'] = $this->Model_IFV->get_list_estado();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/ventas/producto/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Venta_Producto_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $cod_producto = $this->input->post("cod_producto");
            $dato['list_venta'] = $this->Model_IFV->get_list_venta_producto_venta($cod_producto);
            $this->load->view('view_IFV/ventas/producto/lista_venta', $dato);
        } else {
            redirect('/login');
        }
    }

    //-----------------------------------NUEVA VENTA-------------------------------------
    public function Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $valida = $this->Model_IFV->valida_insert_nueva_venta();

            if (count($valida) == 0) {
                $this->Model_IFV->insert_nueva_venta();
            } else {
                $this->Model_IFV->resetear_nueva_venta();
            }

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/ventas/nueva/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Alumno_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_nueva_venta();
            $dato['get_id'] = $this->Model_IFV->get_list_nueva_venta();

            $get_id = $this->Model_IFV->valida_insert_nueva_venta();

            if ($get_id[0]['id_alumno'] > 0) {
                $dato['valida_alumno'] = 1;
                $dato['get_alumno'] = $this->Model_IFV->get_list_alumno_nueva_venta($get_id[0]['id_alumno']);
            } else {
                $dato['valida_alumno'] = 0;
            }

            $this->load->view('view_IFV/ventas/nueva/alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Producto_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_nueva_venta'] = $this->Model_IFV->get_list_producto_nueva_venta();
            $this->load->view('view_IFV/ventas/nueva/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Botones_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $list_nueva_venta = $this->Model_IFV->get_list_producto_nueva_venta();
            $subtotal = 0;
            foreach ($list_nueva_venta as $list) {
                $subtotal = $subtotal + ($list['cantidad'] * ($list['precio'] - $list['descuento']));
            }
            $dato['subtotal'] = $subtotal;
            $this->load->view('view_IFV/ventas/nueva/botones', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Detalle_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_nueva_venta();
            $this->load->view('view_IFV/ventas/nueva/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Alumno_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $this->Model_IFV->update_alumno_nueva_venta($dato['id_alumno']);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Alumno_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $this->Model_IFV->delete_alumno_nueva_venta();
        } else {
            redirect('/login');
        }
    }

    public function Insert_Producto_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $cod_producto = $this->input->post("cod_producto");
            $get_id = $this->Model_IFV->get_cod_producto_nueva_venta($cod_producto);

            if (count($get_id) > 0) {
                $dato['cod_producto'] = $get_id[0]['cod_producto'];
                $dato['precio'] = $get_id[0]['monto'];
                $dato['descuento'] = $get_id[0]['descuento'];

                $valida = $this->Model_IFV->valida_insert_nueva_venta_producto($dato);

                if (count($valida) > 0) {
                    echo "cantidad";
                } else {
                    $this->Model_IFV->insert_nueva_venta_producto($dato);
                }
                /*if(count($valida)>0){
                    $dato['cantidad'] = $valida[0]['cantidad']+1;
                    $this->Model_IFV->update_nueva_venta_producto($dato);
                }else{
                    $this->Model_IFV->insert_nueva_venta_producto($dato);
                }*/
            } else {
                echo "error";
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_Producto_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_nueva_venta_producto'] = $this->input->post("id_nueva_venta_producto");
            $this->Model_IFV->delete_nueva_venta_producto($dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Producto_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_producto'] = $this->Model_IFV->get_list_combo_producto_venta();
            $dato['list_nueva_venta'] = $this->Model_IFV->get_list_producto_nueva_venta();
            $this->load->view('view_IFV/ventas/nueva/modal_producto', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Botones_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $list_nueva_venta = $this->Model_IFV->get_list_producto_nueva_venta();
            $subtotal = 0;
            $cantidad = 0;
            foreach ($list_nueva_venta as $list) {
                $subtotal = $subtotal + ($list['cantidad'] * ($list['precio'] - $list['descuento']));
                $cantidad = $cantidad + $list['cantidad'];
            }
            $dato['subtotal'] = $subtotal;
            $dato['cantidad'] = $cantidad;
            $this->load->view('view_IFV/ventas/nueva/modal_botones', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Modal_Producto_Nueva_Venta()
    {
        if ($this->session->userdata('usuario')) {

            $dato['cod_producto'] = $this->input->post("cod_producto");
            $get_id = $this->Model_IFV->get_cod_producto_nueva_venta($dato['cod_producto']);
            $dato['nom_sistema'] = $get_id[0]['nom_sistema'];
            $dato['id_tipo'] = $get_id[0]['id_tipo'];
            $dato['cod_producto'] = $get_id[0]['cod_producto'];
            $dato['precio'] = $get_id[0]['monto'];
            $dato['descuento'] = $get_id[0]['descuento'];

            if ($dato['id_tipo'] == 1) {
                $validar1 = $this->Model_IFV->valida_insert_nueva_venta_id($dato);
                if (count($validar1) > 0) {
                    echo "error2";
                } else {
                    $this->Model_IFV->insert_nueva_venta_producto($dato);
                }
            } else {
                $this->Model_IFV->insert_nueva_venta_producto($dato);
            }

            /*$validar2 = $this->Model_IFV->valida_insert_nueva_venta_producto($dato);*/
            /*if(count($validar2)>0){
                echo "error";
            }
            else*/
            /*if(count($validar)>0){
                $dato['cantidad'] = $validar[0]['cantidad']+1;
                $this->Model_IFV->update_nueva_venta_producto($dato);
            }else{
                $this->Model_IFV->insert_nueva_venta_producto($dato);
            }*/
        } else {
            redirect('/login');
        }
    }

    public function Modal_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $list_nueva_venta = $this->Model_IFV->get_list_producto_nueva_venta();

            $subtotal = 0;
            if (count($list_nueva_venta) > 0) {
                foreach ($list_nueva_venta as $list) {
                    $subtotal = $subtotal + ($list['cantidad'] * ($list['precio'] - $list['descuento']));
                }
            }

            $dato['subtotal'] = $subtotal;

            $this->load->view('view_IFV/ventas/nueva/modal_detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Venta()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_tipo_pago'] = $this->input->post("id_tipo_pago");
            $dato['monto_entregado'] = $this->input->post("monto_entregado");

            if ($dato['monto_entregado'] == "") {
                $dato['monto_entregado'] = 0;
            }

            $list_nueva_venta = $this->Model_IFV->get_list_producto_nueva_venta();

            if (count($list_nueva_venta) > 0) {
                $subtotal = 0;
                foreach ($list_nueva_venta as $list) {
                    $subtotal = $subtotal + ($list['cantidad'] * ($list['precio'] - $list['descuento']));
                }

                $dato['cambio'] = $dato['monto_entregado'] - $subtotal;

                $get_id = $this->Model_IFV->get_list_nueva_venta();

                if ($get_id[0]['id_alumno'] > 0) {
                    $valida_cierre_caja = $this->Model_IFV->valida_cierre_caja();

                    if (count($valida_cierre_caja) == 0) {
                        $cantidad_recibo = $this->Model_IFV->cantidad_recibo();
                        $totalRows_t = count($cantidad_recibo);
                        $aniof = substr(date('Y'), 2, 2);

                        if ($totalRows_t < 9) {
                            $codigo = $aniof . "R-FV10000" . ($totalRows_t + 1);
                        }
                        if ($totalRows_t > 8 && $totalRows_t < 99) {
                            $codigo = $aniof . "R-FV1000" . ($totalRows_t + 1);
                        }
                        if ($totalRows_t > 98 && $totalRows_t < 999) {
                            $codigo = $aniof . "R-FV100" . ($totalRows_t + 1);
                        }
                        if ($totalRows_t > 998 && $totalRows_t < 9999) {
                            $codigo = $aniof . "R-FV10" . ($totalRows_t + 1);
                        }
                        if ($totalRows_t > 9998 && $totalRows_t < 99999) {
                            $codigo = $aniof . "R-FV1" . ($totalRows_t + 1);
                        }

                        $dato['cod_venta'] = $codigo;

                        //---
                        $dato['code'] = "";
                        $get_tipo_prod = $this->Model_IFV->valida_venta_detalle();
                        /*echo($get_tipo_prod[0]['cod_producto']);*/

                        if (count($get_tipo_prod) > 0 && $get_tipo_prod[0]['id_tipo'] == "1") {
                            //if($get_tipo_prod[0]['id_tipo']=="1"){19490
                            $caracteres = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                            $longitud = strlen($caracteres);
                            while (true) {
                                for ($i = 0; $i < 6; $i++) {
                                    $dato['code'] .= $caracteres[mt_rand(0, $longitud - 1)];
                                }
                                // Verificar si el código ya existe en la base de datos
                                $data = $this->Model_IFV->valida_cod_aleatorio_venta_ifv($dato);
                                if (count($data) == 0) {
                                    break;
                                }
                            }
                            $dato['code'] = $aniof . strtolower($dato['code']);
                            //}
                        }

                        $this->Model_IFV->insert_venta($dato);
                        $get_id = $this->Model_IFV->ultimo_id_venta();
                        $dato['id_venta'] = $get_id[0]['id_venta'];
                        $this->Model_IFV->insert_venta_detalle($dato);
                        $get_id_detalle = $this->Model_IFV->get_venta_detalle_xproducto($dato);
                        if (count($get_id_detalle) > 0) {
                            $dato['id_alumno'] = $get_id_detalle[0]['id_alumno'];
                            $dato['monto'] = $get_id_detalle[0]['monto'];
                            $dato['cod_venta'] = $get_id_detalle[0]['cod_venta'];
                            $this->Model_IFV->insert_fotocheck($dato);

                            $get_alumno = $this->Model_IFV->get_id_matriculados($get_id[0]['id_alumno']);

                            $mail = new PHPMailer(true);

                            try {
                                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                                $mail->isSMTP();                                            // Send using SMTP
                                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                                $mail->Username = 'dcomunicacion@ifv.edu.pe';                     // usuario de acceso
                                $mail->Password = 'graficoifv00';                                // SMTP password
                                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                                $mail->setFrom('dcomunicacion@ifv.edu.pe', "Instituto Federico Villarreal"); //desde donde se envia

                                $mail->addAddress($get_alumno[0]['Email']);

                                $mail->isHTML(true);                                  // Set email format to HTML

                                $mail->Subject = "Pago de Fotocheck";

                                $mail->Body = '<FONT SIZE=3>
                                                    ¡Hola!<br><br>
                                                    Recibimos el pago de tu fotocheck.<br><br>
                                                    Por favor contacta lo antes posible al departamento de Comunicación <br>
                                                    IFV para que puedas sacar tu foto. Sin ella no podemos avanzar. <br>
                                                    Acuerdate que el fotocheck es obligatorio para que puedas ingresar <br>
                                                    en nuestras instalaciones y hacer tus prácticas. <br><br>
                                                    Que tengas un excelente dia.<br>
                                                    Instituto Federico Villarreal<br>
                                                </FONT SIZE>';

                                $mail->CharSet = 'UTF-8';
                                $mail->send();

                            } catch (Exception $e) {
                                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                            }

                            if ($get_alumno[0]['Celular'] != '' && $get_alumno[0]['Celular'] !== NULL) {
                                $curl = curl_init();

                                curl_setopt_array($curl, array(
                                    CURLOPT_URL => 'https://www.altiria.net:8443/api/http',
                                    CURLOPT_RETURNTRANSFER => true,
                                    CURLOPT_ENCODING => '',
                                    CURLOPT_MAXREDIRS => 10,
                                    CURLOPT_TIMEOUT => 0,
                                    CURLOPT_FOLLOWLOCATION => true,
                                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                                    CURLOPT_CUSTOMREQUEST => 'POST',
                                    CURLOPT_POSTFIELDS => 'cmd=sendsms&login=vanessa.hilario%40gllg.edu.pe&passwd=gllg2021&dest=51' . $get_alumno[0]['Celular'] . '&msg=¡Hola!%0ARecibimos%20el%20pago%20de%20tu%20fotocheck.%0APor%20favor%20contacta%20lo%20antes%20posible%20al%20departamento%20de%20Comunicaci%C3%B3n%20IFV%20para%20que%20puedas%20sacar%20tu%20foto.%0AInstituto%20Federico%20Villarreal&concat=true',
                                    CURLOPT_HTTPHEADER => array(
                                        'Content-Type: application/x-www-form-urlencoded;charset=utf-8'
                                    ),
                                ));

                                $response = curl_exec($curl);

                                curl_close($curl);
                            }
                        }
                        $this->Model_IFV->delete_nueva_venta($dato);

                        echo "correcto*" . $dato['id_venta'];
                    } else {
                        echo "cierre_caja*0";
                    }
                } else {
                    echo "alumno*0";
                }
            } else {
                echo "producto*0";
            }
        } else {
            redirect('/login');
        }
    }

    public function Recibo_Venta($id_venta)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_venta($id_venta);
            $dato['list_detalle'] = $this->Model_IFV->get_list_venta_detalle($id_venta);
            $dato['validacion'] = count($this->Model_IFV->get_valida_detalle($id_venta));
            $dato['fut'] = "";
            if ($dato['validacion'] > 0) {
                $dato['fut'] = "Código FUT:   " . $dato['get_id'][0]['codigo'];
            }
            $cantidad_filas = 30 * count($dato['list_detalle']);
            $dato['altura'] = 500 + $cantidad_filas;

            $mpdf = new \Mpdf\Mpdf([
                "format" => "A4",
                'default_font' => 'gothic',
            ]);
            $html = $this->load->view('view_IFV/ventas/nueva/recibo', $dato, true);
            $mpdf->WriteHTML($html);
            $mpdf->Output();
        } else {
            redirect('');
        }
    }

    public function Descargar_Adjunto_Horario($id_grupo)
    {
        if ($this->session->userdata('usuario')) {
            $data = explode("_", $id_grupo);
            $id_grupo = $data[0];
            $dato['get_id'] = $this->Model_IFV->get_id_grupo_c($id_grupo);
            if ($data[1] == "1") {
                $name = basename($dato['get_id'][0]['horario_grupo']);
                $ext = pathinfo($dato['get_id'][0]['horario_grupo'], PATHINFO_EXTENSION);
                force_download($name, file_get_contents($dato['get_id'][0]['horario_grupo']));
            } else if ($data[1] == "2") {
                $name = basename($dato['get_id'][0]['horario_grupo_cel']);
                $ext = pathinfo($dato['get_id'][0]['horario_grupo_cel'], PATHINFO_EXTENSION);
                force_download($name, file_get_contents($dato['get_id'][0]['horario_grupo_cel']));
            } else {
                $name = basename($dato['get_id'][0]['horario_pdf']);
                $ext = pathinfo($dato['get_id'][0]['horario_pdf'], PATHINFO_EXTENSION);
                force_download($name, file_get_contents($dato['get_id'][0]['horario_pdf']));
            }
        } else {
            redirect('');
        }
    }

    //-----------------------------------CIERRES DE CAJA-------------------------------------
    public function Cierre_Caja()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/ventas/cierre_caja/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Cierre_Caja()
    {
        if ($this->session->userdata('usuario')) {
            $tipo = $this->input->post("tipo");
            $dato['list_cierre_caja'] = $this->Model_IFV->get_list_cierre_caja($tipo);
            $this->load->view('view_IFV/ventas/cierre_caja/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Cierre_Caja()
    {
        if ($this->session->userdata('usuario')) {
            $fecha = date('Y-m-d');
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_codigo();
            $dato['get_saldo'] = $this->Model_IFV->get_saldo_automatico($_SESSION['usuario'][0]['id_usuario'], $fecha);
            $dato['get_producto'] = $this->Model_IFV->get_productos($_SESSION['usuario'][0]['id_usuario'], $fecha);
            $this->load->view('view_IFV/ventas/cierre_caja/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Saldo_Fecha()
    {
        if ($this->session->userdata('usuario')) {
            $id_vendedor = $this->input->post("id_vendedor");
            $fecha = $this->input->post("fecha");
            $dato['get_saldo'] = $this->Model_IFV->get_saldo_automatico($id_vendedor, $fecha);
            $this->load->view('view_IFV/ventas/cierre_caja/saldo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Productos_Fecha()
    {
        if ($this->session->userdata('usuario')) {
            $id_vendedor = $this->input->post("id_vendedor");
            $fecha = $this->input->post("fecha");
            $get_producto = $this->Model_IFV->get_productos($id_vendedor, $fecha);
            echo $get_producto[0]['productos'];
        } else {
            redirect('/login');
        }
    }

    public function Insert_Cierre_Caja()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_vendedor'] = $this->input->post("id_vendedor_i");
            $dato['fecha'] = $this->input->post("fecha_i");
            $dato['saldo_automatico'] = $this->input->post("saldo_automatico_i");
            $dato['monto_entregado'] = $this->input->post("monto_entregado_i");
            $dato['id_entrega'] = $this->input->post("id_entrega_i");
            $dato['cofre'] = $this->input->post("cofre_i");
            $dato['productos'] = $this->input->post("productos_i");

            $validar = $this->Model_IFV->valida_insert_cierre_caja($dato);

            if (count($validar) > 0) {
                $dato['id_cierre_caja'] = $validar[0]['id_cierre_caja'];
                $this->Model_IFV->update_cierre_caja($dato);
                echo $dato['id_cierre_caja'];
            } else {
                $dato['fecha_valida'] = $this->input->post("fecha_i");
                $valida_movimiento = $this->Model_IFV->valida_venta_cierre_caja($dato);

                if ($valida_movimiento[0]['cantidad'] > 0) {
                    $dato['fecha_valida'] = date("Y-m-d", strtotime($dato['fecha'] . "- 1 day"));
                    $cantidad = $this->Model_IFV->valida_venta_cierre_caja($dato);

                    if ($cantidad[0]['cantidad'] > 0) {
                        $validar = $this->Model_IFV->valida_ultimo_cierre_caja($dato);

                        if (count($validar) > 0) {
                            $this->Model_IFV->insert_cierre_caja($dato);
                            $get_id = $this->Model_IFV->ultimo_id_cierre_caja();
                            echo $get_id[0]['id_cierre_caja'];
                        } else {
                            $fecha_anterior = date("d-m-Y", strtotime($dato['fecha'] . "- 1 day"));
                            echo "no_cierre*" . $fecha_anterior;
                        }
                    } else {
                        $this->Model_IFV->insert_cierre_caja($dato);
                        $get_id = $this->Model_IFV->ultimo_id_cierre_caja();
                        echo $get_id[0]['id_cierre_caja'];
                    }
                } else {
                    echo "movimiento";
                }
            }
        } else {
            redirect('/login');
        }
    }

    public function Pdf_Cierre_Caja($id_cierre_caja)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_cierre_caja($id_cierre_caja);

            $mpdf = new \Mpdf\Mpdf([
                "format" => "A4",
                'default_font' => 'gothic',
            ]);
            $html = $this->load->view('view_IFV/ventas/cierre_caja/recibo', $dato, true);
            $mpdf->WriteHTML($html);
            $mpdf->Output();
        } else {
            redirect('');
        }
    }

    public function Delete_Adjunto_Horario()
    {
        $id_grupo = $this->input->post('id_grupo');
        $data = explode("_", $id_grupo);
        $id_grupo = $data[0];
        $dato['get_id'] = $this->Model_IFV->get_id_grupo_c($id_grupo);

        if ($data[1] == "1") {
            if (file_exists($dato['get_id'][0]['horario_grupo'])) {
                unlink($dato['get_id'][0]['horario_grupo']);
            }
        } elseif ($data[1] == "2") {
            if (file_exists($dato['get_id'][0]['horario_grupo_cel'])) {
                unlink($dato['get_id'][0]['horario_grupo_cel']);
            }
        } else {
            if (file_exists($dato['get_id'][0]['horario_pdf'])) {
                unlink($dato['get_id'][0]['horario_pdf']);
            }
        }
        $this->Model_IFV->delete_archivo_adjunto_horario($id_grupo, $data[1]);

    }

    public function Delete_Cierre_Caja()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_cierre_caja'] = $this->input->post("id_cierre_caja");
            $this->Model_IFV->delete_cierre_caja($dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Asignar_Cofre_Cierre_Caja()
    {
        if ($this->session->userdata('usuario')) {
            $this->load->view('view_IFV/ventas/cierre_caja/modal_asignar_cofre');
        } else {
            redirect('/login');
        }
    }

    public function Asignar_Cofre_Cierre_Caja()
    {
        if ($this->session->userdata('usuario')) {
            $cadena = substr($this->input->post("cadena"), 0, -1);
            $cantidad = $this->input->post("cantidad");
            $dato['cofre'] = $this->input->post("cofre");

            if ($cantidad > 0) {
                $array = explode(",", $cadena);
                $i = 0;

                while ($i < count($array)) {
                    $dato['id_cierre_caja'] = $array[$i];
                    $this->Model_IFV->update_cofre_cierre_caja($dato);
                    $i++;
                }
            }
        } else {
            redirect('/login');
        }
    }

    public function Excel_Cierre_Caja($tipo)
    {
        $list_cierre_caja = $this->Model_IFV->get_list_cierre_caja($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:L1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:L1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Cierre de Caja');

        $sheet->setAutoFilter('A1:L1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(20);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(22);
        $sheet->getColumnDimension('E')->setWidth(22);
        $sheet->getColumnDimension('F')->setWidth(20);
        $sheet->getColumnDimension('G')->setWidth(20);
        $sheet->getColumnDimension('H')->setWidth(20);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(20);
        $sheet->getColumnDimension('K')->setWidth(40);
        $sheet->getColumnDimension('L')->setWidth(15);

        $sheet->getStyle('A1:L1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:L1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:L1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Mes');
        $sheet->setCellValue("B1", 'Vendedor');
        $sheet->setCellValue("C1", 'Caja');
        $sheet->setCellValue("D1", 'Saldo Automático');
        $sheet->setCellValue("E1", 'Monto Entregado');
        $sheet->setCellValue("F1", 'Productos');
        $sheet->setCellValue("G1", 'Diferencia');
        $sheet->setCellValue("H1", 'Recibe');
        $sheet->setCellValue("I1", 'Fecha');
        $sheet->setCellValue("J1", 'Usuario');
        $sheet->setCellValue("K1", 'Cofre');
        $sheet->setCellValue("L1", 'Estado');

        $contador = 1;

        foreach ($list_cierre_caja as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:L{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("D{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("J{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:L{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:L{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("D{$contador}:E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);
            $sheet->getStyle("G{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", Date::PHPToExcel($list['mes_anio']));
            $sheet->getStyle("A{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("B{$contador}", $list['cod_vendedor']);
            $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['caja']));
            $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("D{$contador}", $list['saldo_automatico']);
            $sheet->setCellValue("E{$contador}", $list['monto_entregado']);
            $sheet->setCellValue("F{$contador}", $list['productos']);
            $sheet->setCellValue("G{$contador}", $list['diferencia']);
            $sheet->setCellValue("H{$contador}", $list['cod_entrega']);
            $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['fecha_registro']));
            $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("J{$contador}", $list['cod_registro']);
            $sheet->setCellValue("K{$contador}", $list['cofre']);
            $sheet->setCellValue("L{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Cierre de Caja (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Detalle_Cierre_Caja($id_cierre_caja)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_cierre_caja($id_cierre_caja);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/ventas/cierre_caja/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Detalle_Cierre_Caja()
    {
        if ($this->session->userdata('usuario')) {
            $fecha = $this->input->post("fecha");
            $dato['list_detalle_cierre_caja'] = $this->Model_IFV->get_list_detalle_cierre_caja($fecha);
            $this->load->view('view_IFV/ventas/cierre_caja/lista_detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Cierre_Caja($id_cierre_caja)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_cierre_caja($id_cierre_caja);
            $this->load->view('view_IFV/ventas/cierre_caja/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Cierre_Caja()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_cierre_caja'] = $this->input->post("id_cierre_caja");
            $dato['cofre'] = $this->input->post("cofre_u");
            $this->Model_IFV->update_cofre_cierre_caja($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Detalle_Cierre_Caja($fecha)
    {
        $fecha = substr($fecha, 0, 4) . "-" . substr($fecha, 4, 2) . "-" . substr($fecha, -2);
        $list_detalle_cierre_caja = $this->Model_IFV->get_list_detalle_cierre_caja($fecha);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:I1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:I1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Ingreso - Ventas Directas');

        $sheet->setAutoFilter('A1:I1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(30);
        $sheet->getColumnDimension('E')->setWidth(20);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(22);
        $sheet->getColumnDimension('H')->setWidth(18);
        $sheet->getColumnDimension('I')->setWidth(18);

        $sheet->getStyle('A1:I1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:I1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:I1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Apellido Paterno');
        $sheet->setCellValue("C1", 'Apelido Materno');
        $sheet->setCellValue("D1", 'Nombre(s)');
        $sheet->setCellValue("E1", 'Descripción');
        $sheet->setCellValue("F1", 'Total');
        $sheet->setCellValue("G1", 'Recibo Electrónico');
        $sheet->setCellValue("H1", 'Fecha Pago');
        $sheet->setCellValue("I1", 'Efectuado Por');

        $contador = 1;

        foreach ($list_detalle_cierre_caja as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:I{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:I{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("F{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", $list['Codigo']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("C{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("D{$contador}", $list['Nombre']);
            $sheet->setCellValue("E{$contador}", $list['cod_producto']);
            $sheet->setCellValue("F{$contador}", $list['total']);
            $sheet->setCellValue("G{$contador}", $list['cod_venta']);
            $sheet->setCellValue("H{$contador}", Date::PHPToExcel($list['fecha_pago']));
            $sheet->getStyle("H{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("I{$contador}", $list['usuario_codigo']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Ingreso - Ventas Directas (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //----ifv documentos configuracion
    public function Documento_Configuracion_Ifv()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/documento_configuracion/index', $dato);
    }

    public function Listar_Documento_Configuracion()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_documento'] = $this->Model_IFV->get_list_documento_configuracion();
            $this->load->view('view_IFV/documento_configuracion/list_documento', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Registrar_Documento_Configuracion()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list'] = $this->Model_IFV->get_list_tipo_documento($id_motivo = null);
            $this->load->view('view_IFV/documento_configuracion/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Documento_Configuracion()
    {
        if ($this->session->userdata('usuario')) {
            $dato['codigo'] = $this->input->post("codigo");
            $dato['nombre'] = $this->input->post("nombre");
            $dato['asunto'] = $this->input->post("asunto");
            $dato['id_tipo'] = $this->input->post("tipo");
            $dato['texto'] = $this->input->post("texto");
            $dato['mod'] = 1;
            $total = count($this->Model_IFV->valida_documento_configuracion($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_documento_configuracion($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Actualizar_Documento_Configuracion($id_motivo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_documento_configuracion($id_motivo);
            $dato['list'] = $this->Model_IFV->get_list_tipo_documento($id_motivo = null);
            $this->load->view('view_IFV/documento_configuracion/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Actualizar_Documento_Configuracion()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_documento'] = $this->input->post("id_documento");
            $dato['codigo'] = $this->input->post("codigo_e");
            $dato['nombre'] = $this->input->post("nombre_e");
            $dato['asunto'] = $this->input->post("asunto_e");
            $dato['id_tipo'] = $this->input->post("tipo_e");
            $dato['texto'] = $this->input->post("texto_e");
            $dato['mod'] = 2;
            $total = count($this->Model_IFV->valida_documento_configuracion($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_documento_configuracion($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Eliminar_Documento_Configuracion()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_documento'] = $this->input->post("id_documento");
            $this->Model_IFV->delete_documento_configuracion($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Documento_Configuracion()
    {
        $data = $this->Model_IFV->get_list_documento_configuracion();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        //$sheet->getStyle("A1:D1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        //$sheet->getStyle("A1:D1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Documentos IFV Online');

        $sheet->setAutoFilter('A1:B1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(40);

        $sheet->getStyle('A1:B1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:B1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:B1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Codigo');
        $sheet->setCellValue("B1", 'Nombre');

        $contador = 1;

        foreach ($data as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['codigo']);
            $sheet->setCellValue("B{$contador}", $list['nombre']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Documentos IFV Online';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //texto fut
    public function Documento_Configuracion_Texto()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/texto_fut_configuracion/index', $dato);
    }

    public function Listar_Texto_Fut()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list'] = $this->Model_IFV->get_list_texto_fut();
            $this->load->view('view_IFV/texto_fut_configuracion/list_texto_fut', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Registrar_Texto_Fut()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list'] = $this->Model_IFV->get_list_producto_venta_fut();
            $this->load->view('view_IFV/texto_fut_configuracion/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Texto_Fut()
    {
        if ($this->session->userdata('usuario')) {
            $dato['producto'] = $this->input->post("producto");
            $dato['asunto'] = $this->input->post("asunto");
            $dato['texto'] = $this->input->post("texto");
            $dato['id_producto'] = $this->input->post("id_producto");
            $dato['mod'] = 1;
            $total = count($this->Model_IFV->valida_texto_fut($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_texto_fut($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Actualizar_Texto_Fut($id_motivo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_texto_fut($id_motivo);
            $dato['productos'] = $this->Model_IFV->get_list_producto_venta_fut();
            $this->load->view('view_IFV/texto_fut_configuracion/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Actualizar_Texto_Fut()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_texto'] = $this->input->post("id_texto_e");
            $dato['asunto'] = $this->input->post("asunto_e");
            $dato['id_producto'] = $this->input->post("id_producto_e");
            $dato['producto'] = $this->input->post("producto_e");
            $dato['texto'] = $this->input->post("texto_e");
            $dato['mod'] = 2;
            $total = count($this->Model_IFV->valida_texto_fut($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_texto_fut($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Eliminar_Texto_Fut()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_texto'] = $this->input->post("id_texto");
            $this->Model_IFV->delete_texto_fut($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Texto_Fut()
    {
        $data = $this->Model_IFV->get_list_texto_fut();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $spreadsheet->getActiveSheet()->setTitle('Texto FUT (Lista)');

        $sheet->setAutoFilter('A1:B1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(90);

        $sheet->getStyle('A1:B1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:B1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:B1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Producto');
        $sheet->setCellValue("B1", 'Texto');

        $contador = 1;

        foreach ($data as $list) {
            $contador++;

            //$sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            //$sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_sistema']);
            $sheet->setCellValue("B{$contador}", $list['texto']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Texto FUT (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-------------------------------------------Lista Ventas Ifv------------------------------------------//
    public function Lista_Venta()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/ventas/lista/index', $dato);
    }

    public function Listar_Ventas()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_venta'] = $this->Model_IFV->get_list_venta_ifv();
            $this->load->view('view_IFV/ventas/lista/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Lista_Ventas()
    {
        $list_venta = $this->Model_IFV->get_list_venta_ifv();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:M1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:M1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Venta');

        $sheet->setAutoFilter('A1:M1');

        $sheet->getColumnDimension('A')->setWidth(20);
        $sheet->getColumnDimension('B')->setWidth(40);
        $sheet->getColumnDimension('C')->setWidth(60);
        $sheet->getColumnDimension('D')->setWidth(22);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(25);
        $sheet->getColumnDimension('G')->setWidth(25);
        $sheet->getColumnDimension('H')->setWidth(40);
        $sheet->getColumnDimension('I')->setWidth(40);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(22);
        $sheet->getColumnDimension('M')->setWidth(18);

        $sheet->getStyle('A1:M1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:M1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:M1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Codigo');
        $sheet->setCellValue("B1", 'Tipo(s) Producto(s)');
        $sheet->setCellValue("C1", 'Producto(s)');
        $sheet->setCellValue("D1", 'Codigo Aleatorio');
        $sheet->setCellValue("E1", 'Codigo');
        $sheet->setCellValue("F1", 'Ap. Paterno');
        $sheet->setCellValue("G1", 'Ap. Materno');
        $sheet->setCellValue("H1", 'Nombre(s)');
        $sheet->setCellValue("I1", 'Especialidad');
        $sheet->setCellValue("J1", 'Grupo');
        $sheet->setCellValue("K1", 'Sección');
        $sheet->setCellValue("L1", 'Monto Entregado');
        $sheet->setCellValue("M1", 'Fecha de Pago');

        $contador = 1;

        foreach ($list_venta as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:M{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}:I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("L{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("A{$contador}:M{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("L{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", $list['cod_venta']);
            $sheet->setCellValue("B{$contador}", $list['tipos']);
            $sheet->setCellValue("C{$contador}", $list['productos']);
            $sheet->setCellValue("D{$contador}", $list['cod_aleatorio']);
            $sheet->setCellValue("E{$contador}", $list['Codigo']);
            $sheet->setCellValue("F{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("G{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("H{$contador}", $list['Nombre']);
            $sheet->setCellValue("I{$contador}", $list['Especialidad']);
            $sheet->setCellValue("J{$contador}", $list['Grupo']);
            $sheet->setCellValue("K{$contador}", $list['Seccion']);
            $sheet->setCellValue("L{$contador}", $list['monto_entregado']);
            $sheet->setCellValue("M{$contador}", Date::PHPToExcel($list['fecha_pago']));
            $sheet->getStyle("M{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);

        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Venta (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-------------------------------------------Lista Fut Recibido------------------------------------------//
    public function Fut_Recibido()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/fut_recibido/index', $dato);
    }

    public function Listar_Fut_Recibidos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['cod_val'] = $this->input->post("id");
            $dato['list'] = $this->Model_IFV->get_fut_recibidos($dato);
            $this->load->view('view_IFV/fut_recibido/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Fut_Recibido($dat)
    {
        $dato['cod_val'] = $dat;
        $data = $this->Model_IFV->get_fut_recibidos($dato);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $spreadsheet->getActiveSheet()->setTitle('FUT Recibidos (Lista)');

        $sheet->setAutoFilter('A1:M1');

        $sheet->getColumnDimension('A')->setWidth(20);
        $sheet->getColumnDimension('B')->setWidth(20);
        $sheet->getColumnDimension('C')->setWidth(20);
        $sheet->getColumnDimension('D')->setWidth(25);
        $sheet->getColumnDimension('E')->setWidth(50);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(50);
        $sheet->getColumnDimension('I')->setWidth(25);
        $sheet->getColumnDimension('J')->setWidth(25);
        $sheet->getColumnDimension('K')->setWidth(25);
        $sheet->getColumnDimension('L')->setWidth(35);
        $sheet->getColumnDimension('M')->setWidth(30);


        $sheet->getStyle('A1:M1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:M1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:J1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código FUT');
        $sheet->setCellValue("B1", 'Producto');
        $sheet->setCellValue("C1", 'Asunto');
        $sheet->setCellValue("D1", 'Fecha Envio');
        $sheet->setCellValue("E1", 'Texto');
        $sheet->setCellValue("F1", 'Código');
        $sheet->setCellValue("G1", 'DNI');
        $sheet->setCellValue("H1", 'Nombre del Alumno');
        $sheet->setCellValue("I1", 'Apellido Paterno');
        $sheet->setCellValue("J1", 'Apellido Materno');
        $sheet->setCellValue("K1", 'Especialidad');
        $sheet->setCellValue("L1", 'Correo');
        $sheet->setCellValue("M1", 'Estado');

        $contador = 1;

        foreach ($data as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['cod_fut']);
            $sheet->setCellValue("B{$contador}", $list['nom_producto']);
            $sheet->setCellValue("C{$contador}", $list['asunto']);
            $sheet->setCellValue("D{$contador}", $list['Fecha_envio']);
            $sheet->setCellValue("E{$contador}", $list['texto_fut']);
            $sheet->setCellValue("F{$contador}", $list['Codigo']);
            $sheet->setCellValue("G{$contador}", $list['Dni']);
            $sheet->setCellValue("H{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("I{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("J{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("K{$contador}", $list['Especialidad']);
            $sheet->setCellValue("L{$contador}", $list['email']);
            $sheet->setCellValue("M{$contador}", $list['nom_status']);
        }


        $writer = new Xlsx($spreadsheet);
        $filename = 'FUT Recibidos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-----------------------------------CALENDARIO-------------------------------------
    public function Calendario()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/calendario/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Calendario()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['list_festivo'] = $this->Model_IFV->get_list_calendario($dato['tipo']);
            $this->load->view('view_IFV/calendario/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Calendario($tipo)
    {
        $list_calendario = $this->Model_IFV->get_list_calendario($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:H1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:H1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Calendario');

        $sheet->setAutoFilter('A1:H1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(20);
        $sheet->getColumnDimension('D')->setWidth(50);
        $sheet->getColumnDimension('E')->setWidth(30);
        $sheet->getColumnDimension('F')->setWidth(10);
        $sheet->getColumnDimension('G')->setWidth(80);
        $sheet->getColumnDimension('H')->setWidth(15);

        $sheet->getStyle('A1:H1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:H1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:H1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Año');
        $sheet->setCellValue("B1", 'Fecha');
        $sheet->setCellValue("C1", 'Día de la Semana');
        $sheet->setCellValue("D1", 'Descripción');
        $sheet->setCellValue("E1", 'Tipo');
        $sheet->setCellValue("F1", 'F/V');
        $sheet->setCellValue("G1", 'Observaciones');
        $sheet->setCellValue("H1", 'Estado');

        $contador = 1;

        foreach ($list_calendario as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("D{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:H{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['anio']);
            $sheet->setCellValue("B{$contador}", Date::PHPToExcel($list['inicio']));
            $sheet->getStyle("B{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("C{$contador}", $list['nom_dia']);
            $sheet->setCellValue("D{$contador}", $list['descripcion']);
            $sheet->setCellValue("E{$contador}", $list['nom_tipo_fecha']);
            $sheet->setCellValue("F{$contador}", $list['f_v']);
            $sheet->setCellValue("G{$contador}", $list['observaciones']);
            $sheet->setCellValue("H{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Calendario (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function List_Pregunta_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_carrera'] = $this->input->post("id_carrera");
            $dato['id_examen'] = $this->input->post("id_examen");

            $dato['list_pregunta'] = $this->Model_IFV->get_list_preguntas_admision_efsrt($dato['id_carrera'], $dato['id_examen']);

            $this->load->view('view_IFV/examen_adm_efsrt/detalle_examen/list_preguntas', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Img_Pregunta_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_pregunta'] = $this->input->post('id_pregunta');
            $dato['get_id'] = $this->Model_IFV->get_id_pregunta_efsrt_admision($dato);
            if (file_exists($dato['get_id'][0]['img'])) {
                unlink($dato['get_id'][0]['img']);
            }
            $this->Model_IFV->delete_archivo_pregunta_efsrt($dato);
        } else {
            redirect('/login');
        }
    }

    //---------------------------------------CONTRATO EFSRT-----------------------------------------
    public function Contrato_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/contrato_efsrt/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Contrato_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['list_nuevos'] = $this->Model_IFV->get_list_contrato_efsrt($dato['tipo']);
            $this->load->view('view_IFV/contrato_efsrt/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Actualizar_Lista_Contrato_Efsrt()
    {
        include "mcript.php";
        include('application/views/administrador/mensaje/httpPHPAltiria.php');

        $list_contrato = $this->Model_IFV->get_contratos_activos_efsrt();

        foreach ($list_contrato as $get_contrato) {
            if ($get_contrato['enviar'] == 1) {
                $array = explode(",", $get_contrato['alumnos']);

                if ($get_contrato['v_fecha_envio'] == 1) {
                    if ($get_contrato['fecha_envio'] == date('Y-m-d')) {
                        $i = 0;

                        while ($i < count($array)) {
                            $get_alumno = $this->Model_IFV->get_id_todos_l20($array[$i]);
                            $valida = $this->Model_IFV->valida_envio_correo_contrato($get_alumno[0]['Id_Alumno'], $get_alumno[0]['cod_alumno'], $get_contrato['id_c_contrato']);

                            if (count($valida) == 0) {
                                $dato['id_alumno'] = $get_alumno[0]['Id_Alumno'];
                                $dato['cod_alumno'] = $get_alumno[0]['cod_alumno'];
                                $dato['apater_alumno'] = $get_alumno[0]['apater_alumno'];
                                $dato['amater_alumno'] = $get_alumno[0]['amater_alumno'];
                                $dato['nom_alumno'] = $get_alumno[0]['nom_alumno'];
                                $dato['email_alumno'] = $get_alumno[0]['email_alumno'];
                                $dato['celular_alumno'] = $get_alumno[0]['celular_alumno'];
                                $dato['grupo_alumno'] = $get_alumno[0]['grupo_alumno'];
                                $dato['especialidad_alumno'] = $get_alumno[0]['especialidad_alumno'];
                                $dato['turno_alumno'] = $get_alumno[0]['turno_alumno'];
                                $dato['modulo_alumno'] = $get_alumno[0]['modulo_alumno'];
                                $dato['seccion_alumno'] = $get_alumno[0]['seccion_alumno'];
                                $dato['id_contrato'] = $get_contrato['id_c_contrato'];

                                $this->Model_IFV->insert_documento_firma_efsrt($dato);
                                $ultimo = $this->Model_IFV->ultimo_id_documento_firma();

                                $encryption_id = $encriptar($ultimo[0]['id_documento_firma']);

                                $mail = new PHPMailer(true);
                                $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

                                try {
                                    $mail->SMTPDebug = 0;                      // Enable verbose debug output
                                    $mail->isSMTP();                                            // Send using SMTP
                                    $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                                    $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                                    $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                                    $mail->Password = 'ifvc2022';
                                    $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                                    $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                                    $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                                    $mail->addAddress($get_alumno[0]['email_alumno']);

                                    $mail->isHTML(true);                                  // Set email format to HTML

                                    $mail->Subject = $get_contrato['asunto'];

                                    $mail->Body = '<FONT SIZE=3>' . nl2br($get_contrato['texto_correo']) . '<br><br>
                                                                Ingrese al link:' . $link . '
                                                    </FONT SIZE>';

                                    $mail->CharSet = 'UTF-8';
                                    $mail->send();

                                } catch (Exception $e) {
                                    echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                                }

                                if ($get_contrato['sms'] == 1) {
                                    $altiriaSMS = new AltiriaSMS();

                                    $altiriaSMS->setDebug(true);
                                    $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
                                    $altiriaSMS->setPassword('gllg2021');

                                    $sDestination = '51' . $get_alumno[0]['celular_alumno'];
                                    $sMessage = $get_contrato['texto_sms'];
                                    $altiriaSMS->sendSMS($sDestination, $sMessage);
                                }
                            }

                            $i++;
                        }
                    }
                } else {
                    $i = 0;

                    while ($i < count($array)) {
                        $get_alumno = $this->Model_IFV->get_id_todos_l20($array[$i]);
                        $valida = $this->Model_IFV->valida_envio_correo_contrato($get_alumno[0]['Id_Alumno'], $get_alumno[0]['cod_alumno'], $get_contrato['id_c_contrato']);

                        if (count($valida) == 0) {
                            $dato['id_alumno'] = $get_alumno[0]['Id_Alumno'];
                            $dato['cod_alumno'] = $get_alumno[0]['cod_alumno'];
                            $dato['apater_alumno'] = $get_alumno[0]['apater_alumno'];
                            $dato['amater_alumno'] = $get_alumno[0]['amater_alumno'];
                            $dato['nom_alumno'] = $get_alumno[0]['nom_alumno'];
                            $dato['email_alumno'] = $get_alumno[0]['email_alumno'];
                            $dato['celular_alumno'] = $get_alumno[0]['celular_alumno'];
                            $dato['grupo_alumno'] = $get_alumno[0]['grupo_alumno'];
                            $dato['especialidad_alumno'] = $get_alumno[0]['especialidad_alumno'];
                            $dato['turno_alumno'] = $get_alumno[0]['turno_alumno'];
                            $dato['modulo_alumno'] = $get_alumno[0]['modulo_alumno'];
                            $dato['seccion_alumno'] = $get_alumno[0]['seccion_alumno'];
                            $dato['id_contrato'] = $get_contrato['id_c_contrato'];

                            $this->Model_IFV->insert_documento_firma_efsrt($dato);
                            $ultimo = $this->Model_IFV->ultimo_id_documento_firma();

                            $encryption_id = $encriptar($ultimo[0]['id_documento_firma']);

                            $mail = new PHPMailer(true);
                            $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

                            try {
                                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                                $mail->isSMTP();                                            // Send using SMTP
                                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                                $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                                $mail->Password = 'ifvc2022';
                                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                                $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                                $mail->addAddress($get_alumno[0]['email_alumno']);

                                $mail->isHTML(true);                                  // Set email format to HTML

                                $mail->Subject = $get_contrato['asunto'];

                                $mail->Body = '<FONT SIZE=3>' . nl2br($get_contrato['texto_correo']) . '<br><br>
                                                            Ingrese al link:' . $link . '
                                                </FONT SIZE>';

                                $mail->CharSet = 'UTF-8';
                                $mail->send();

                            } catch (Exception $e) {
                                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                            }

                            if ($get_contrato['sms'] == 1) {
                                $altiriaSMS = new AltiriaSMS();

                                $altiriaSMS->setDebug(true);
                                $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
                                $altiriaSMS->setPassword('gllg2021');

                                $sDestination = '51' . $get_alumno[0]['celular_alumno'];
                                $sMessage = $get_contrato['texto_sms'];
                                $altiriaSMS->sendSMS($sDestination, $sMessage);
                            }
                        }

                        $i++;
                    }
                }
            } else {
                $list_alumnos = $this->Model_IFV->get_contrato_tipo_2($get_contrato['id_grupo'], $get_contrato['id_especialidad'], $get_contrato['id_turno'], $get_contrato['id_modulo'], $get_contrato['id_seccion_fv']);

                if ($get_contrato['v_fecha_envio'] == 1) {
                    if ($get_contrato['fecha_envio'] == date('Y-m-d')) {
                        foreach ($list_alumnos as $list) {
                            $valida = $this->Model_IFV->valida_envio_correo_contrato($list['Id_Alumno'], $list['cod_alumno'], $get_contrato['id_c_contrato']);

                            if (count($valida) == 0) {
                                $dato['id_alumno'] = $list['Id_Alumno'];
                                $dato['cod_alumno'] = $list['cod_alumno'];
                                $dato['apater_alumno'] = $list['apater_alumno'];
                                $dato['amater_alumno'] = $list['amater_alumno'];
                                $dato['nom_alumno'] = $list['nom_alumno'];
                                $dato['email_alumno'] = $list['email_alumno'];
                                $dato['celular_alumno'] = $list['celular_alumno'];
                                $dato['grupo_alumno'] = $list['grupo_alumno'];
                                $dato['especialidad_alumno'] = $list['especialidad_alumno'];
                                $dato['turno_alumno'] = $list['turno_alumno'];
                                $dato['modulo_alumno'] = $list['modulo_alumno'];
                                $dato['seccion_alumno'] = $list['seccion_alumno'];
                                $dato['id_contrato'] = $get_contrato['id_c_contrato'];

                                $this->Model_IFV->insert_documento_firma_efsrt($dato);
                                $ultimo = $this->Model_IFV->ultimo_id_documento_firma();

                                $encryption_id = $encriptar($ultimo[0]['id_documento_firma']);

                                $mail = new PHPMailer(true);
                                $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

                                try {
                                    $mail->SMTPDebug = 0;                      // Enable verbose debug output
                                    $mail->isSMTP();                                            // Send using SMTP
                                    $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                                    $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                                    $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                                    $mail->Password = 'ifvc2022';
                                    $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                                    $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                                    $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                                    $mail->addAddress($list['email_alumno']);

                                    $mail->isHTML(true);                                  // Set email format to HTML

                                    $mail->Subject = $get_contrato['asunto'];

                                    $mail->Body = '<FONT SIZE=3>' . nl2br($get_contrato['texto_correo']) . '<br><br>
                                                                Ingrese al link:' . $link . '
                                                    </FONT SIZE>';

                                    $mail->CharSet = 'UTF-8';
                                    $mail->send();

                                } catch (Exception $e) {
                                    echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                                }

                                if ($get_contrato['sms'] == 1) {
                                    $altiriaSMS = new AltiriaSMS();

                                    $altiriaSMS->setDebug(true);
                                    $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
                                    $altiriaSMS->setPassword('gllg2021');

                                    $sDestination = '51' . $list['celular_alumno'];
                                    $sMessage = $get_contrato['texto_sms'];
                                    $altiriaSMS->sendSMS($sDestination, $sMessage);
                                }
                            }
                        }
                    }
                } else {
                    foreach ($list_alumnos as $list) {
                        $valida = $this->Model_IFV->valida_envio_correo_contrato($list['Id_Alumno'], $list['cod_alumno'], $get_contrato['id_c_contrato']);

                        if (count($valida) == 0) {
                            $dato['id_alumno'] = $list['Id_Alumno'];
                            $dato['cod_alumno'] = $list['cod_alumno'];
                            $dato['apater_alumno'] = $list['apater_alumno'];
                            $dato['amater_alumno'] = $list['amater_alumno'];
                            $dato['nom_alumno'] = $list['nom_alumno'];
                            $dato['email_alumno'] = $list['email_alumno'];
                            $dato['celular_alumno'] = $list['celular_alumno'];
                            $dato['grupo_alumno'] = $list['grupo_alumno'];
                            $dato['especialidad_alumno'] = $list['especialidad_alumno'];
                            $dato['turno_alumno'] = $list['turno_alumno'];
                            $dato['modulo_alumno'] = $list['modulo_alumno'];
                            $dato['seccion_alumno'] = $list['seccion_alumno'];
                            $dato['id_contrato'] = $get_contrato['id_c_contrato'];

                            $this->Model_IFV->insert_documento_firma_efsrt($dato);
                            $ultimo = $this->Model_IFV->ultimo_id_documento_firma();

                            $encryption_id = $encriptar($ultimo[0]['id_documento_firma']);

                            $mail = new PHPMailer(true);
                            $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

                            try {
                                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                                $mail->isSMTP();                                            // Send using SMTP
                                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                                $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                                $mail->Password = 'ifvc2022';
                                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                                $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                                $mail->addAddress($list['email_alumno']);

                                $mail->isHTML(true);                                  // Set email format to HTML

                                $mail->Subject = $get_contrato['asunto'];

                                $mail->Body = '<FONT SIZE=3>' . nl2br($get_contrato['texto_correo']) . '<br><br>
                                                            Ingrese al link:' . $link . '
                                                </FONT SIZE>';

                                $mail->CharSet = 'UTF-8';
                                $mail->send();

                            } catch (Exception $e) {
                                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                            }

                            if ($get_contrato['sms'] == 1) {
                                $altiriaSMS = new AltiriaSMS();

                                $altiriaSMS->setDebug(true);
                                $altiriaSMS->setLogin('vanessa.hilario@gllg.edu.pe');
                                $altiriaSMS->setPassword('gllg2021');

                                $sDestination = '51' . $list['celular_alumno'];
                                $sMessage = $get_contrato['texto_sms'];
                                $altiriaSMS->sendSMS($sDestination, $sMessage);
                            }
                        }
                    }
                }
            }
        }
    }

    public function Modal_Update_Email_Contrato_Efsrt($id_documento_firma)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_contrato($id_documento_firma);
            $this->load->view('view_IFV/contrato_efsrt/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Email_Contrato_Efsrt()
    {
        $dato['id_documento_firma'] = $this->input->post("id_documento_firma");
        $dato['email_alumno'] = $this->input->post("email_alumno_u");
        $this->Model_IFV->update_email_contrato($dato);
    }

    public function Reenviar_Email_Efsrt()
    {
        include "mcript.php";

        $dato['id_documento_firma'] = $this->input->post("id_documento_firma");
        $get_id = $this->Model_IFV->get_id_contrato($dato['id_documento_firma']);
        $get_correo = $this->Model_IFV->get_list_c_contrato($get_id[0]['id_contrato']);

        $dato['id_alumno'] = $get_id[0]['id_alumno'];
        $dato['cod_alumno'] = $get_id[0]['cod_alumno'];
        $dato['apater_alumno'] = $get_id[0]['apater_alumno'];
        $dato['amater_alumno'] = $get_id[0]['amater_alumno'];
        $dato['nom_alumno'] = $get_id[0]['nom_alumno'];
        $dato['email_alumno'] = $get_id[0]['email_alumno'];
        $dato['celular_alumno'] = $get_id[0]['celular_alumno'];
        $dato['grupo_alumno'] = $get_id[0]['grupo_alumno'];
        $dato['especialidad_alumno'] = $get_id[0]['especialidad_alumno'];
        $dato['turno_alumno'] = $get_id[0]['turno_alumno'];
        $dato['modulo_alumno'] = $get_id[0]['modulo_alumno'];
        $dato['seccion_alumno'] = $get_id[0]['seccion_fv_alumno'];
        $dato['id_contrato'] = $get_correo[0]['id_c_contrato'];

        $this->Model_IFV->update_documento_firma($dato);

        $encryption_id = $encriptar($get_id[0]['id_documento_firma']);

        $mail = new PHPMailer(true);
        $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/index_fv/" . $encryption_id;

        try {
            $mail->SMTPDebug = 0;                      // Enable verbose debug output
            $mail->isSMTP();                                            // Send using SMTP
            $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
            $mail->SMTPAuth = true;                                   // Enable SMTP authentication
            $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
            $mail->Password = 'ifvc2022';                                // SMTP password
            $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
            $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
            $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

            $mail->addAddress($get_id[0]['email_alumno']);

            $mail->isHTML(true);                                  // Set email format to HTML

            $mail->Subject = $get_correo[0]['asunto'];

            $mail->Body = '<FONT SIZE=3>' . nl2br($get_correo[0]['texto_correo']) . '<br><br>
                                        Ingrese al link:' . $link . '
                            </FONT SIZE>';

            $mail->CharSet = 'UTF-8';
            $mail->send();

        } catch (Exception $e) {
            echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
        }
    }

    public function Excel_Contrato_Efsrt($tipo)
    {
        $list_nuevos = $this->Model_IFV->get_list_contrato_efsrt($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:R1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:R1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Contrato');

        $sheet->setAutoFilter('A1:R1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(30);
        $sheet->getColumnDimension('E')->setWidth(30);
        $sheet->getColumnDimension('F')->setWidth(35);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(40);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(18);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(18);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(15);

        $sheet->getStyle('A1:R1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:R1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:R1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Contrato');
        $sheet->setCellValue("B1", 'Código');
        $sheet->setCellValue("C1", 'Apellido Paterno');
        $sheet->setCellValue("D1", 'Apellido Materno');
        $sheet->setCellValue("E1", 'Nombre(s)');
        $sheet->setCellValue("F1", 'Email');
        $sheet->setCellValue("G1", 'Celular');
        $sheet->setCellValue("H1", 'Especialidad');
        $sheet->setCellValue("I1", 'Grupo');
        $sheet->setCellValue("J1", 'Turno');
        $sheet->setCellValue("K1", 'Módulo');
        $sheet->setCellValue("L1", 'Sección');
        $sheet->setCellValue("M1", 'Fecha Envío');
        $sheet->setCellValue("N1", 'Hora Envío');
        $sheet->setCellValue("O1", 'Fecha Firma');
        $sheet->setCellValue("P1", 'Hora Firma');
        $sheet->setCellValue("Q1", 'Arpay');
        $sheet->setCellValue("R1", 'Status');

        $contador = 1;

        foreach ($list_nuevos as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:R{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['referencia']);
            $sheet->setCellValue("B{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("C{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("D{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("E{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("F{$contador}", $list['email_alumno']);
            $sheet->setCellValue("G{$contador}", $list['celular_alumno']);
            $sheet->setCellValue("H{$contador}", $list['especialidad_alumno']);
            $sheet->setCellValue("I{$contador}", $list['grupo_alumno']);
            $sheet->setCellValue("J{$contador}", $list['turno_alumno']);
            $sheet->setCellValue("K{$contador}", $list['modulo_alumno']);
            $sheet->setCellValue("L{$contador}", $list['seccion_fv_alumno']);
            if ($list['fec_envio'] != "") {
                $sheet->setCellValue("M{$contador}", Date::PHPToExcel($list['fec_envio']));
                $sheet->getStyle("M{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("M{$contador}", "");
            }
            $sheet->setCellValue("N{$contador}", $list['hora_envio']);
            if ($list['fec_firma'] != "") {
                $sheet->setCellValue("O{$contador}", Date::PHPToExcel($list['fec_firma']));
                $sheet->getStyle("O{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("O{$contador}", "");
            }
            $sheet->setCellValue("P{$contador}", $list['hora_firma']);
            $sheet->setCellValue("Q{$contador}", $list['v_arpay']);
            $sheet->setCellValue("R{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Contrato (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Modal_Invitar_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['null'] = 0;
            $dato['list_grupo'] = $this->Model_IFV->get_list_grupo_contrato(2);

            $this->load->view('view_IFV/postulantes_efsrt/modal_invitar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Busca_Especialidad_Invitar()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['list_especialidad'] = $this->Model_IFV->get_list_grupo_c_activo(2, $dato);
            $this->load->view('view_IFV/postulantes_efsrt/cmb_especialidad', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Busca_Modulo_Invitar()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['list_modulo'] = $this->Model_IFV->get_list_grupo_c_activo(3, $dato);
            $this->load->view('view_IFV/postulantes_efsrt/cmb_modulo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Busca_Ciclo_Invitar()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['modulo'] = $this->input->post("modulo");
            $dato['list_ciclo'] = $this->Model_IFV->get_list_grupo_c_activo(4, $dato);
            $this->load->view('view_IFV/postulantes_efsrt/cmb_ciclo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Busca_Turno_Invitar()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['modulo'] = $this->input->post("modulo");
            $dato['ciclo'] = $this->input->post("ciclo");
            $dato['list_turno'] = $this->Model_IFV->get_list_grupo_c_activo(5, $dato);
            $dato['list_turno_bd'] = $this->Model_IFV->get_list_todo_turno();
            $this->load->view('view_IFV/postulantes_efsrt/cmb_turno2', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Busca_Seccion_Invitar()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['modulo'] = $this->input->post("modulo");
            $dato['ciclo'] = $this->input->post("ciclo");
            $dato['turno'] = $this->input->post("turno");
            $dato['list_seccion'] = $this->Model_IFV->get_list_grupo_c_activo(6, $dato);
            $this->load->view('view_IFV/postulantes_efsrt/cmb_seccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Busca_Alumno_Invitar()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['modulo'] = $this->input->post("modulo");
            $dato['ciclo'] = $this->input->post("ciclo");
            $dato['turno'] = $this->input->post("turno");
            $dato['seccion'] = $this->input->post("seccion");
            //$dato['alumno'] = $this->input->post("alumno");
            $dato['todos'] = $this->input->post("todos");
            $dato['get_especialidad'] = $this->Model_IFV->list_especialidad($dato['especialidad']);
            $dato['especialidad'] = $dato['get_especialidad'][0]['nom_especialidad'];
            $dato['alumno'] = "";
            $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_grupo_c_invitar($dato);
            $this->load->view('view_IFV/postulantes_efsrt/cmb_alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Examen_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['parametro'] = $this->input->post("parametro");
            $dato['list_examen2'] = $this->Model_IFV->get_list_examen_efsrt_ifv2($dato['parametro']);

            $this->load->view('view_IFV/examen_adm_efsrt/list_examen', $dato);
        } else {
            redirect('');
        }
    }

    //---------------------------------------------TIPO CONTRATO-------------------------------------------
    public function Tipo_C_Contrato()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/tipo_c_contrato/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Tipo_C_Contrato()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo_c_contrato'] = $this->Model_IFV->get_list_tipo_c_contrato();
            $this->load->view('view_IFV/tipo_c_contrato/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Tipo_C_Contrato()
    {
        if ($this->session->userdata('usuario')) {
            $this->load->view('view_IFV/tipo_c_contrato/modal_registrar');
        } else {
            redirect('/login');
        }
    }

    public function Insert_Tipo_C_Contrato()
    {
        $dato['nom_tipo'] = $this->input->post("nom_tipo_i");
        $dato['alumno'] = $this->input->post("alumno_i");
        $dato['fecha_envio'] = $this->input->post("fecha_envio_i");

        $valida = $this->Model_IFV->valida_insert_tipo_c_contrato($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            $this->Model_IFV->insert_tipo_c_contrato($dato);
        }
    }

    public function Modal_Update_Tipo_C_Contrato($id_tipo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_tipo_c_contrato($id_tipo);
            $dato['list_estado'] = $this->Model_IFV->get_list_status();
            $this->load->view('view_IFV/tipo_c_contrato/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Tipo_C_Contrato()
    {
        $dato['id_tipo'] = $this->input->post("id_tipo");
        $dato['nom_tipo'] = $this->input->post("nom_tipo_u");
        $dato['alumno'] = $this->input->post("alumno_u");
        $dato['fecha_envio'] = $this->input->post("fecha_envio_u");
        $dato['estado'] = $this->input->post("estado_u");

        $valida = $this->Model_IFV->valida_update_tipo_c_contrato($dato);

        if (count($valida) > 0) {
            echo "error";
        } else {
            $this->Model_IFV->update_tipo_c_contrato($dato);
        }
    }

    public function Delete_Tipo_C_Contrato()
    {
        $dato['id_tipo'] = $this->input->post("id_tipo");
        $this->Model_IFV->delete_tipo_c_contrato($dato);
    }

    public function Excel_Tipo_C_Contrato()
    {
        $list_tipo_c_contrato = $this->Model_IFV->get_list_tipo_c_contrato();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:D1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:D1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Tipo Contrato');

        $sheet->setAutoFilter('A1:D1');

        $sheet->getColumnDimension('A')->setWidth(30);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);

        $sheet->getStyle('A1:D1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:D1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:D1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Nombre');
        $sheet->setCellValue("B1", 'Alumno');
        $sheet->setCellValue("C1", 'Fecha Envío');
        $sheet->setCellValue("D1", 'Estado');

        $contador = 1;

        foreach ($list_tipo_c_contrato as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:D{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_tipo']);
            $sheet->setCellValue("B{$contador}", $list['alumno']);
            $sheet->setCellValue("C{$contador}", $list['fecha_envio']);
            $sheet->setCellValue("D{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Tipo Contrato (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-------------------------------------------------ASISTENCIA COLABORADOR----------------------------------
    public function Asistencia_Colaborador()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            $dato['list_mes'] = $this->Model_IFV->get_list_mes();
            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/asistencia_colaborador/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Asistencia_Colaborador_Lista()
    {
        if ($this->session->userdata('usuario')) {
            $anio = $this->input->post("anio");
            $mes = $this->input->post("mes");
            $tipo = $this->input->post("tipo");

            $dato['list_registro_ingreso'] = $this->Model_IFV->get_list_registro_ingreso_c($anio, $mes);

            $this->load->view('view_IFV/asistencia_colaborador/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Asistencia_Colaborador_Lista_V2()
    {
        if ($this->session->userdata('usuario')) {
            $anio = $this->input->post("anio");
            $mes = $this->input->post("mes");
            $tipo = $this->input->post("tipo");

            $dato['list_registro_ingreso'] = $this->Model_IFV->get_list_registro_ingreso_c_v2($anio, $mes);

            $this->load->view('view_IFV/asistencia_colaborador/lista_v2', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Asistencia_Colaborador($anio, $mes)
    {
        //$fec_in = substr($fec_in,0,4)."-".substr($fec_in,4,2)."-".substr($fec_in,-2);
        //$fec_fi = substr($fec_fi,0,4)."-".substr($fec_fi,4,2)."-".substr($fec_fi,-2);

        $list_registro_ingreso = $this->Model_IFV->excel_registro_ingreso_c($anio, $mes);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:O1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:O1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Asistencia');

        $sheet->setAutoFilter('A1:O1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(25);
        $sheet->getColumnDimension('E')->setWidth(25);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(18);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(20);
        $sheet->getColumnDimension('K')->setWidth(18);
        $sheet->getColumnDimension('L')->setWidth(18);
        $sheet->getColumnDimension('M')->setWidth(18);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(18);

        $sheet->getStyle('A1:O1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:O1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:O1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Fecha');
        $sheet->setCellValue("B1", 'Código');
        $sheet->setCellValue("C1", 'Apellido Paterno');
        $sheet->setCellValue("D1", 'Apellido Materno');
        $sheet->setCellValue("E1", 'Nombre(s)');
        $sheet->setCellValue("F1", 'Usuario');
        $sheet->setCellValue("G1", 'Estado');
        $sheet->setCellValue("H1", 'Registro');
        $sheet->setCellValue("I1", 'Usuario');
        $sheet->setCellValue("J1", 'Hora');
        $sheet->setCellValue("K1", 'Registro');
        $sheet->setCellValue("L1", 'Observaciones');
        $sheet->setCellValue("M1", 'Observación');
        $sheet->setCellValue("N1", 'Autorización');
        $sheet->setCellValue("O1", 'Hora Salida');

        $contador = 1;

        foreach ($list_registro_ingreso as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:O{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("M{$contador}:N{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("Q{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:O{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:O{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", Date::PHPToExcel($list['fecha_ingreso']));
            $sheet->getStyle("A{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("B{$contador}", $list['codigo']);
            $sheet->setCellValue("C{$contador}", $list['apater']);
            $sheet->setCellValue("D{$contador}", $list['amater']);
            $sheet->setCellValue("E{$contador}", $list['nombre']);
            $sheet->setCellValue("F{$contador}", $list['nom_tipo_acceso']);
            $sheet->setCellValue("G{$contador}", $list['nom_estado_reporte']);
            $sheet->setCellValue("H{$contador}", $list['reg_automatico']);
            $sheet->setCellValue("I{$contador}", $list['usuario_registro']);
            $sheet->setCellValue("J{$contador}", $list['hora_ingreso']);
            $sheet->setCellValue("K{$contador}", $list['estado_ing']);
            $sheet->setCellValue("L{$contador}", $list['obs']);
            $sheet->setCellValue("M{$contador}", $list['obs_historial']);
            $sheet->setCellValue("N{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("O{$contador}", $list['hora_salida']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Asistencia (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Delete_Postulante_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_postulante'] = $this->input->post("id_postulante");
            $this->Model_IFV->delete_postulante_efsrt($dato);
        } else {
            redirect('/login');
        }
    }

    public function Historial_Fut_Recibido($id_envio)
    {


        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $dato['id_envio'] = $id_envio;

        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['get_id'] = $this->Model_IFV->get_fut_recibido_id($dato);
        $dato['list_detalle_fut'] = $this->Model_IFV->get_list_detalle_fut($dato);

        $this->load->view('view_IFV/fut_recibido/detalle', $dato);
    }

    public function Modal_Detalle_Fut($id_envio)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_envio'] = $id_envio;
            $dato['get_id'] = $this->Model_IFV->get_fut_recibido_id($dato);
            $dato['list_estados'] = $this->Model_IFV->get_list_estados();
            $this->load->view('view_IFV/fut_recibido/modal_historial', $dato);
        } else {
            redirect('/login');
        }
    }


    public function Insert_Detalle_Fut()
    {
        $dato['id_estado_i'] = $this->input->post("id_estado_i");
        $dato['observacion_i'] = $this->input->post("observacion_i");
        $dato['id_envio'] = $this->input->post("id_envio");
        $dato['list'] = $this->Model_IFV->get_fut_recibido_id($dato);
        $dato['Email'] = $dato['list'][0]['email'];
        if ($dato['list'][0]['Grupo'] == '23/3') {
            $dato['Email'] = $dato['list'][0]['Correo_Institucional'];
        }

        $dato['img_comuimg'] = $this->input->post("img_comuimg");
        //var_dump($dato['observacion_i']);
        /*$valida = $this->Model_IFV->valida_insert_tipo_c_contrato($dato);

        if(count($valida)>0){
            echo "error";
        }else{*/


        $this->Model_IFV->insert_detalle_fut($dato);
        //}

        if ($dato['Email'] != "") {
            $mail = new PHPMailer(true);
            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                $mail->Password = 'ifvc2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;     // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto'); //desde donde se envia
                /*
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host       = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth   = true;                                   // Enable SMTP authentication
                $mail->Username   = 'admision@ifv.edu.pe';                     // usuario de acceso
                $mail->Password   = 'lxruwiqijszzomar';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port       = 587;
                $mail->setFrom('admision@ifv.edu.pe', "IFV Online");*/

                $mail->addAddress($dato['Email']);
                $mail->isHTML(true);                                  // Set email format to HTML
                $mail->Subject = "Documentos Recibidos - IGB ";

                if ($dato['id_estado_i'] == "66") {
                    $mail->Body = '<FONT SIZE=4>Hola<br>
                    Te informamos que el FUT que haz presentado se encuentra APROBADO , por lo que se procederá a notificar  a las áreas<br>
                    correspondientes para su conocimiento y atención respectiva.</FONT SIZE>';
                } elseif ($dato['id_estado_i'] == "69") {
                    $mail->Body = '<FONT SIZE=4>Hola<br>
                    Te informamos que el FUT que haz presentado se encuentra OBSERVADO , por lo que deberás comunicarte con<br>
                    secretaría académica al 942301990.</FONT SIZE>';
                } elseif ($dato['id_estado_i'] == "67") {
                    $mail->Body = '<FONT SIZE=4>Hola<br>
                    Te informamos que el FUT que haz presentado se encuentra RECHAZADO , la documentación adjunta no CALIFICA como<br>
                    evidencia por lo que se procederá a notificar  a las áreas correspondientes.<br>
                    Se recomienda presentar nuevo FUT con una explicación más detallada y evidencias más específicas.<br>
                    Mayor información al 942301990.</FONT SIZE>';
                }
                $mail->CharSet = 'UTF-8';
                $mail->send();
            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
            echo "1enviado";
        }
    }


    public function Modal_Update_Detalle_Fut($id_envio_det)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_envio_det'] = $id_envio_det;
            //echo($dato['id_envio']);
            $dato['get_id'] = $this->Model_IFV->get_list_detalle_fut_id($dato);
            $dato['list_estados'] = $this->Model_IFV->get_list_estados();
            $this->load->view('view_IFV/fut_recibido/modal_historial_upd', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Detalle_Fut()
    {
        $dato['id_estado_e'] = $this->input->post("id_estado_e");
        $dato['observacion_e'] = $this->input->post("observacion_e");
        $dato['id_envio_det'] = $this->input->post("id_envio_det");
        $dato['id_envio'] = $this->input->post("id_envio");
        $dato['list'] = $this->Model_IFV->get_fut_recibido_id($dato);
        $dato['Email'] = $dato['list'][0]['email'];
        $dato['img_comuimge'] = $this->input->post("img_comuimge");

        if ($dato['list'][0]['Grupo'] == '23/3') {
            $dato['Email'] = $dato['list'][0]['Correo_Institucional'];
        }
        //var_dump($dato['img_comuimge']);
        /*$valida = $this->Model_IFV->valida_insert_tipo_c_contrato($dato);

        if(count($valida)>0){
            echo "error";
        }else{*/
        $this->Model_IFV->update_detalle_fut($dato);
        //}

        if ($dato['Email'] != "") {
            $mail = new PHPMailer(true);
            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                $mail->Password = 'ifvc2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;     // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia
                /*
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host       = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth   = true;                                   // Enable SMTP authentication
                $mail->Username   = 'admision@ifv.edu.pe';                     // usuario de acceso
                $mail->Password   = 'lxruwiqijszzomar';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port       = 587;
                $mail->setFrom('admision@ifv.edu.pe', "IFV Online");*/

                $mail->addAddress($dato['Email']);
                $mail->isHTML(true);                                  // Set email format to HTML
                $mail->Subject = "Documentos Recibidos - IFV ";

                if ($dato['id_estado_e'] == "66") {
                    $mail->Body = '<FONT SIZE=4>Hola<br>
                    Te informamos que el FUT que haz presentado se encuentra APROBADO , por lo que se procederá a notificar  a las áreas.<br>
                    correspondientes para su conocimiento y atención respectiva.</FONT SIZE>';
                } elseif ($dato['id_estado_e'] == "69") {
                    $mail->Body = '<FONT SIZE=4>Hola<br>
                    Te informamos que el FUT que haz presentado se encuentra OBSERVADO , por lo que deberás adjuntar nuevas evidencias<br>
                    correspondientes para su conocimiento y atención respectiva.<br>
                    contactarse al 942301990.</FONT SIZE>';
                } elseif ($dato['id_estado_e'] == "67") {
                    $mail->Body = '<FONT SIZE=4>Hola<br>
                    Te informamos que el FUT que haz presentado se encuentra RECHAZADO , la documentación adjunta no CALIFICA como<br>
                    evidencia por lo que se procederá a notificar  a las áreas correspondientes.<br>
                    Se recomienda presentar nuevo FUT con una explicación más detallada y evidencias más específicas.<br>
                    Mayor información al 942301990.</FONT SIZE>';
                }
                $mail->CharSet = 'UTF-8';
                $mail->send();
            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
            echo "1enviado";
        }
    }

    public function Delete_Detalle_Fut()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_historial'] = $this->input->post("id_historial");
            $dato['id_fut'] = $this->input->post("id_fut");
            $this->Model_IFV->delete_detalle_fut($dato);

            $ultimo_estado = $this->Model_IFV->get_list_ultimo_estado_id($dato);
            $dato['estado_ultimo'] = $ultimo_estado;
            $this->Model_IFV->update_ultimo_estado($dato);
            //var_dump($dato['id_historial']);
            var_dump($dato['estado_ultimo']);

        } else {
            redirect('/login');
        }
    }

    public function Descargar_Fut_Recibido($id_envio_det)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_fut_recibido($id_envio_det);
            //var_dump($dato['get_file'][0]['pdf_envio_det']);
            $ruta1 = "comunicado_ifv";
            if ($dato['get_file'][0]['estado_envio_det'] == 65) {
                $ruta1 = "horario_cargado_ifv";
            }
            $dato['get_config'] = $this->Model_IFV->get_config($ruta1);
            $image = $dato['get_config'][0]['url_config'] . $dato['get_file'][0]['pdf_envio_det'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            //$data=$this->Model_IFV->get_config('documento_ifv');
            //force_download($name , file_get_contents("fvdoc/".$dato['get_file'][0]['documento']));
            force_download($name, file_get_contents($image));
        } else {
            redirect('');
        }
    }

    //-----------------------------------CORREO EFSRT-------------------------------------
    public function Correo_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/correo/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Correo_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_correo'] = $this->Model_IFV->get_list_correo_efsrt();
            $this->load->view('view_IFV/correo/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Correo_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_correo_efsrt();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/correo/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Correo_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_tipo'] = $this->input->post("id_tipo_i");
            $dato['id_especialidad'] = $this->input->post("id_especialidad_i");
            $dato['asunto'] = $this->input->post("asunto_i");
            $dato['texto'] = $this->input->post("texto_i");
            $dato['documento'] = "";

            $validar = $this->Model_IFV->valida_insert_correo_efsrt($dato);

            if (count($validar) > 0) {
                echo "error";
            } else {
                $cantidad = $this->Model_IFV->ultimo_id_correo_efsrt();
                $cantidad = count($cantidad) + 1;

                if ($_FILES["documento_i"]["name"] != "") {
                    $dato['nom_documento'] = str_replace(' ', '_', $_FILES["documento_i"]["name"]);
                    $config['upload_path'] = './documento_correo_efsrt/' . $cantidad;
                    if (!file_exists($config['upload_path'])) {
                        mkdir($config['upload_path'], 0777, true);
                        chmod($config['upload_path'], 0777);
                        chmod('./documento_correo_efsrt/', 0777);
                        chmod('./documento_correo_efsrt/' . $cantidad, 0777);
                    }
                    $config["allowed_types"] = 'pdf';
                    $this->load->library('upload', $config);
                    $this->upload->initialize($config);
                    $path = $_FILES["documento_i"]["name"];
                    $_FILES["file"]["name"] = $dato['nom_documento'];
                    $_FILES["file"]["type"] = $_FILES["documento_i"]["type"];
                    $_FILES["file"]["tmp_name"] = $_FILES["documento_i"]["tmp_name"];
                    $_FILES["file"]["error"] = $_FILES["documento_i"]["error"];
                    $_FILES["file"]["size"] = $_FILES["documento_i"]["size"];
                    if ($this->upload->do_upload('file')) {
                        $data = $this->upload->data();
                        $dato['documento'] = "documento_correo_efsrt/" . $cantidad . "/" . $dato['nom_documento'];
                    }
                }

                $this->Model_IFV->insert_correo_efsrt($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Correo_Efsrt($id_correo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_correo_efsrt($id_correo);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_correo_efsrt();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/correo/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Correo_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_correo'] = $this->input->post("id_correo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad_u");
            $dato['asunto'] = $this->input->post("asunto_u");
            $dato['texto'] = $this->input->post("texto_u");
            $dato['documento'] = $this->input->post("documento_actual");

            if ($_FILES["documento_u"]["name"] != "") {
                if (file_exists($dato['documento'])) {
                    unlink($dato['documento']);
                }

                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["documento_u"]["name"]);
                $config['upload_path'] = './documento_correo_efsrt/' . $dato['id_correo'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./documento_correo_efsrt/', 0777);
                    chmod('./documento_correo_efsrt/' . $dato['id_correo'], 0777);
                }
                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["documento_u"]["name"];
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["documento_u"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["documento_u"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["documento_u"]["error"];
                $_FILES["file"]["size"] = $_FILES["documento_u"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['documento'] = "documento_correo_efsrt/" . $dato['id_correo'] . "/" . $dato['nom_documento'];
                }
            }

            $this->Model_IFV->update_correo_efsrt($dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Correo_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_correo'] = $this->input->post("id_correo");
            $this->Model_IFV->delete_correo_efsrt($dato);
        } else {
            redirect('/login');
        }
    }

    public function Descargar_Correo_Efsrt($id_correo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_list_correo_efsrt($id_correo);
            $image = $dato['get_file'][0]['documento'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['documento']));
        } else {
            redirect('');
        }
    }

    public function Excel_Correo_Efsrt()
    {
        $list_correo = $this->Model_IFV->get_list_correo_efsrt();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:D1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:D1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Correo');

        $sheet->setAutoFilter('A1:D1');

        $sheet->getColumnDimension('A')->setWidth(30);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(60);
        $sheet->getColumnDimension('D')->setWidth(100);

        $sheet->getStyle('A1:D1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:D1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:D1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Tipo');
        $sheet->setCellValue("B1", 'Especialidad');
        $sheet->setCellValue("C1", 'Asunto');
        $sheet->setCellValue("D1", 'Texto');

        $contador = 1;

        foreach ($list_correo as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:D{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:D{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_tipo']);
            $sheet->setCellValue("B{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("C{$contador}", $list['asunto']);
            $sheet->setCellValue("D{$contador}", $list['texto']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Correo (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------EFSRT----------------------------
    public function Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/efsrt/index', $dato);
        } else {
            redirect('');
        }
    }

    public function Lista_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            //$dato['tipo'] = $this->input->post("tipo");$dato['tipo']
            $dato['list_efsrt'] = $this->Model_IFV->get_list_efsrt();
            $this->load->view('view_IFV/efsrt/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Efsrt()
    {
        $list_efsrt = $this->Model_IFV->get_list_efsrt();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:I1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:I1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('EFSRT (Lista)');

        $sheet->setAutoFilter('A1:I1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(18);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(18);
        $sheet->getColumnDimension('I')->setWidth(15);

        $sheet->getStyle('A1:I1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:I1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:I1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Grupo');
        $sheet->setCellValue("B1", 'Especialidad');
        $sheet->setCellValue("C1", 'Modulo');
        $sheet->setCellValue("D1", 'Turno');
        $sheet->setCellValue("E1", 'Sección');
        $sheet->setCellValue("F1", 'Inicio');
        $sheet->setCellValue("G1", 'Termino');
        $sheet->setCellValue("H1", 'Matriculados');
        $sheet->setCellValue("I1", 'Inducción');

        $contador = 1;

        foreach ($list_efsrt as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:I{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:I{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['grupo']);
            $sheet->setCellValue("B{$contador}", $list['abreviatura']);
            $sheet->setCellValue("C{$contador}", $list['modulo']);
            $sheet->setCellValue("D{$contador}", $list['nom_turno']);
            $sheet->setCellValue("E{$contador}", $list['seccion']);
            if ($list['inicio_efsrt'] != "Fal. Ciclo") {
                $sheet->setCellValue("F{$contador}", Date::PHPToExcel($list['inicio_efsrt']));
                $sheet->getStyle("F{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("F{$contador}", $list['inicio_efsrt']);
            }
            if ($list['termino_efsrt'] != "Fal. Ciclo") {
                $sheet->setCellValue("G{$contador}", Date::PHPToExcel($list['termino_efsrt']));
                $sheet->getStyle("G{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            } else {
                $sheet->setCellValue("G{$contador}", $list['termino_efsrt']);
            }
            $sheet->setCellValue("H{$contador}", $list['matriculados']);
            $sheet->setCellValue("I{$contador}", $list['induccion']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'EFSRT (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Detalle_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        if ($this->session->userdata('usuario')) {
            $grupo = str_replace('_', '/', $grupo);
            $dato['get_id'] = $this->Model_IFV->get_list_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/efsrt/detalle', $dato);
        } else {
            redirect('');
        }
    }

    public function Lista_Alumno_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            //$get_id = $this->Model_IFV->get_list_efsrt($dato['grupo'],$dato['id_especialidad'],$dato['id_modulo'],$dato['id_turno']);
            $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_efsrt($dato['grupo'], $dato['id_especialidad'], $dato['id_modulo'], $dato['id_turno']);
            $this->load->view('view_IFV/efsrt/lista_alumno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Alumno_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        //$get_id = $this->Model_IFV->get_list_efsrt($grupo,$id_especialidad,$id_modulo);
        $list_alumno = $this->Model_IFV->get_list_alumno_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:H1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:H1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Alumnos (Lista)');

        $sheet->setAutoFilter('A1:H1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(18);

        $sheet->getStyle('A1:H1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:H1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:H1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'DNI');
        $sheet->setCellValue("E1", 'Código');
        $sheet->setCellValue("F1", 'Matricula');
        $sheet->setCellValue("G1", 'Alumno');
        $sheet->setCellValue("H1", 'Documentos');

        $contador = 1;

        foreach ($list_alumno as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:H{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("C{$contador}", $list['Nombre']);
            $sheet->setCellValue("D{$contador}", $list['Dni']);
            $sheet->setCellValue("E{$contador}", $list['Codigo']);
            $sheet->setCellValue("F{$contador}", $list['Matricula']);
            $sheet->setCellValue("G{$contador}", $list['Alumno']);
            $sheet->setCellValue("H{$contador}", $list['documentos_subidos'] . "/" . $list['documentos_obligatorios']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Alumnos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Retirado_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            //$get_id = $this->Model_IFV->get_list_efsrt($dato['grupo'],$dato['id_especialidad'],$dato['id_modulo']);
            $dato['list_retirado'] = $this->Model_IFV->get_list_retirado_efsrt($dato['grupo'], $dato['id_especialidad'], $dato['id_modulo'], $dato['id_turno']);
            $this->load->view('view_IFV/efsrt/lista_retirado', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Retirado_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        //$get_id = $this->Model_IFV->get_list_efsrt($grupo,$id_especialidad,$id_modulo);
        $list_retirado = $this->Model_IFV->get_list_retirado_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Retirados (Lista)');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'DNI');
        $sheet->setCellValue("E1", 'Código');
        $sheet->setCellValue("F1", 'Matricula');
        $sheet->setCellValue("G1", 'Alumno');

        $contador = 1;

        foreach ($list_retirado as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("C{$contador}", $list['Nombre']);
            $sheet->setCellValue("D{$contador}", $list['Dni']);
            $sheet->setCellValue("E{$contador}", $list['Codigo']);
            $sheet->setCellValue("F{$contador}", $list['Matricula']);
            $sheet->setCellValue("G{$contador}", $list['Alumno']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Retirados (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Botones_Induccion_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $grupo = $this->input->post("grupo");
            $id_especialidad = $this->input->post("id_especialidad");
            $id_modulo = $this->input->post("id_modulo");
            $id_turno = $this->input->post("id_turno");
            $dato['get_id'] = $this->Model_IFV->get_list_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);
            $dato['cantidad'] = $this->Model_IFV->contar_matriculado_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);
            $this->load->view('view_IFV/efsrt/botones_induccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Induccion_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['list_induccion'] = $this->Model_IFV->get_list_induccion_efsrt($dato['grupo'], $dato['id_especialidad'], $dato['id_modulo'], $dato['id_turno']);
            $this->load->view('view_IFV/efsrt/lista_induccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Induccion_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        if ($this->session->userdata('usuario')) {
            $grupo = str_replace('_', '/', $grupo);
            //$get_id = $this->Model_IFV->get_list_efsrt($grupo,$id_especialidad,$id_modulo);
            $dato['list_alumno'] = $this->Model_IFV->get_list_matriculado_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);
            $dato['list_ponente'] = $this->Model_IFV->get_list_usuario_induccion_efsrt();
            $this->load->view('view_IFV/efsrt/modal_induccion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Induccion_Efsrt()
    {
        $dato['grupo'] = $this->input->post("grupo");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['id_modulo'] = $this->input->post("id_modulo");
        $dato['id_turno'] = $this->input->post("id_turno");
        $dato['fecha_charla'] = $this->input->post("fecha_charla_in");
        $dato['hora_in'] = $this->input->post("hora_in");
        $dato['minuto_in'] = $this->input->post("minuto_in");
        $dato['hora_charla'] = $dato['hora_in'] . ":" . $dato['minuto_in'] . ":00";
        $dato['documento'] = "";
        $dato['id_ponente'] = $this->input->post("id_ponente_in");

        $cantidad = count($this->Model_IFV->get_cantidad_induccion_efsrt());
        $aniof = substr(date('Y'), 2, 2);

        if ($cantidad < 9) {
            $codigo = "00" . ($cantidad + 1) . "/" . $aniof;
        }
        if ($cantidad > 8 && $cantidad < 99) {
            $codigo = "0" . ($cantidad + 1) . "/" . $aniof;
        }
        if ($cantidad > 98 && $cantidad < 999) {
            $codigo = ($cantidad + 1) . "/" . $aniof;
        }
        $dato['cod_induccion'] = $codigo;

        $cantidad = (count($this->Model_IFV->get_cantidad_induccion_efsrt())) + 1;

        if ($_FILES["documento_in"]["name"] != "") {
            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["documento_in"]["name"]);
            $config['upload_path'] = './documento_induccion/' . $cantidad;
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./documento_induccion/', 0777);
                chmod('./documento_induccion/' . $cantidad, 0777);
            }
            $config["allowed_types"] = 'pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["documento_in"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["documento_in"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["documento_in"]["error"];
            $_FILES["file"]["size"] = $_FILES["documento_in"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['documento'] = "documento_induccion/" . $cantidad . "/" . $dato['nom_documento'];
            }
        }

        $this->Model_IFV->insert_induccion_efsrt($dato);
        $ultimo = $this->Model_IFV->ultimo_id_induccion_efsrt();
        $dato['id_induccion'] = $ultimo[0]['id_induccion'];

        $cadena = substr($this->input->post("cadena_in"), 0, -1);
        $cantidad = $this->input->post("cantidad_in");

        if ($cantidad > 0) {
            $array = explode(",", $cadena);
            $i = 0;

            while ($i < count($array)) {
                $get_alumno = $this->Model_IFV->get_id_matriculados($array[$i]);
                if (count($get_alumno) > 0) {
                    $dato['id_alumno'] = $get_alumno[0]['Id'];
                    $dato['cod_alumno'] = $get_alumno[0]['Codigo'];
                    $dato['apater_alumno'] = $get_alumno[0]['Apellido_Paterno'];
                    $dato['amater_alumno'] = $get_alumno[0]['Apellido_Materno'];
                    $dato['nom_alumno'] = $get_alumno[0]['Nombre'];
                    $dato['dni_alumno'] = $get_alumno[0]['Dni'];
                    $dato['email_alumno'] = $get_alumno[0]['Correo_Institucional'];
                    $dato['cumpleanos_alumno'] = $get_alumno[0]['Fecha_Cumpleanos'];
                    $this->Model_IFV->insert_detalle_induccion_efsrt($dato);
                }
                $i++;
            }
        }

        echo $ultimo[0]['cod_induccion'];
    }

    public function Delete_Induccion_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_detalle'] = $this->input->post("id_detalle");
            $this->Model_IFV->delete_induccion_efsrt($dato);
        } else {
            redirect('');
        }
    }

    public function Descargar_Induccion_Efsrt($id_induccion)
    {
        if ($this->session->userdata('usuario')) {
            $dato['doc'] = $this->Model_IFV->get_id_induccion_efsrt($id_induccion);
            $imagen = $dato['doc'][0]['documento'];
            force_download($imagen, NULL);
        } else {
            redirect('');
        }
    }

    public function Excel_Induccion_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        $list_induccion = $this->Model_IFV->get_list_induccion_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:M1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:M1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Inducción de EFSRT (Lista)');

        $sheet->setAutoFilter('A1:M1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(40);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(18);
        $sheet->getColumnDimension('I')->setWidth(18);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(15);

        $sheet->getStyle('A1:M1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:M1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:M1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Grupo');
        $sheet->setCellValue("F1", 'Especialidad');
        $sheet->setCellValue("G1", 'Módulo');
        $sheet->setCellValue("H1", 'Fecha Charla');
        $sheet->setCellValue("I1", 'Hora Charla');
        $sheet->setCellValue("J1", 'Ponente');
        $sheet->setCellValue("K1", 'Usuario');
        $sheet->setCellValue("L1", 'Fecha');
        $sheet->setCellValue("M1", 'Estado');

        $contador = 1;

        foreach ($list_induccion as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:M{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("J{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:M{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:M{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("B{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("C{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("D{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("E{$contador}", $list['grupo']);
            $sheet->setCellValue("F{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("G{$contador}", $list['modulo']);
            $sheet->setCellValue("H{$contador}", Date::PHPToExcel($list['fecha_charla']));
            $sheet->getStyle("H{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("I{$contador}", $list['hora_charla']);
            $sheet->setCellValue("J{$contador}", $list['ponente']);
            $sheet->setCellValue("K{$contador}", $list['usuario']);
            $sheet->setCellValue("L{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("L{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("M{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Inducción de EFSRT (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Pdf_Induccion_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        if ($this->session->userdata('usuario')) {
            $grupo = str_replace('_', '/', $grupo);
            $dato['get_id'] = $this->Model_IFV->get_list_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);
            $dato['list_matriculado'] = $this->Model_IFV->get_list_matriculado_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

            $mpdf = new \Mpdf\Mpdf([
                "format" => "A4",
                'default_font' => 'Helvetica',
            ]);
            $html = $this->load->view('view_IFV/efsrt/pdf_induccion', $dato, true);
            $mpdf->WriteHTML($html);
            $mpdf->Output();
        } else {
            redirect('');
        }
    }

    public function Lista_Entrega_Formato_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['list_entrega_formato'] = $this->Model_IFV->get_list_entrega_formato_efsrt($dato['grupo'], $dato['id_especialidad'], $dato['id_modulo'], $dato['id_turno']);
            $this->load->view('view_IFV/efsrt/lista_entrega_formato', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Reenviar_Entrega_Formato_Efsrt()
    {
        include "mcript.php";

        $dato['id_entrega'] = $this->input->post("id_entrega");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $get_id = $this->Model_IFV->get_id_entrega_formato_efsrt($dato['id_entrega']);
        $this->Model_IFV->update_entrega_formato_efsrt($dato);

        $get_correo = $this->Model_IFV->get_tipo_correo_efsrt(1, $dato['id_especialidad']);

        if (count($get_correo) > 0) {
            $mail = new PHPMailer(true);

            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                $mail->Password = 'ifvc2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                $mail->addAddress($get_id[0]['email_alumno']);

                $mail->isHTML(true);                                  // Set email format to HTML

                $mail->Subject = $get_correo[0]['asunto'];

                $mail->Body = '<FONT SIZE=4>' . $get_correo[0]['texto'] . '</FONT SIZE>';

                $mail->CharSet = 'UTF-8';
                $mail->send();

            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
        }
    }

    public function Delete_Entrega_Formato_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_entrega'] = $this->input->post("id_entrega");
            $this->Model_IFV->delete_entrega_formato_efsrt($dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Entrega_Formato_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        $list_entrega_formato = $this->Model_IFV->get_list_entrega_formato_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:K1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:K1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Entrega de Formatos (Lista)');

        $sheet->setAutoFilter('A1:K1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(40);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(40);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(18);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);

        $sheet->getStyle('A1:K1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:K1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:K1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Correo');
        $sheet->setCellValue("F1", 'Grupo');
        $sheet->setCellValue("G1", 'Especialidad');
        $sheet->setCellValue("H1", 'Módulo');
        $sheet->setCellValue("I1", 'Fecha Envío');
        $sheet->setCellValue("J1", 'Hora Envío');
        $sheet->setCellValue("K1", 'Estado');

        $contador = 1;

        foreach ($list_entrega_formato as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:K{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("B{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("C{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("D{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("E{$contador}", $list['email_alumno']);
            $sheet->setCellValue("F{$contador}", $list['grupo']);
            $sheet->setCellValue("G{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("H{$contador}", $list['modulo']);
            $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['fecha_envio']));
            $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("J{$contador}", $list['hora_envio']);
            $sheet->setCellValue("K{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Entrega de Formatos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Firma_Contrato_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['list_firma_contrato'] = $this->Model_IFV->get_list_firma_contrato_efsrt($dato['grupo'], $dato['id_especialidad'], $dato['id_modulo'], $dato['id_turno']);
            $this->load->view('view_IFV/efsrt/lista_firma_contrato', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Firma_Contrato_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        if ($this->session->userdata('usuario')) {
            $grupo = str_replace('_', '/', $grupo);
            //$get_id = $this->Model_IFV->get_list_efsrt($grupo,$id_especialidad,$id_modulo);
            $dato['list_alumno'] = $this->Model_IFV->get_list_matriculado_menor_edad_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);
            $this->load->view('view_IFV/efsrt/modal_firma_contrato', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Firma_Contrato_Efsrt()
    {
        $dato['grupo'] = $this->input->post("grupo");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $dato['id_modulo'] = $this->input->post("id_modulo");
        $dato['id_turno'] = $this->input->post("id_turno");
        $dato['id_alumno'] = $this->input->post("id_alumno_fc");
        $get_alumno = $this->Model_IFV->get_id_matriculados($dato['id_alumno']);
        $dato['id_alumno'] = $get_alumno[0]['Id'];
        $dato['cod_alumno'] = $get_alumno[0]['Codigo'];
        $dato['apater_alumno'] = $get_alumno[0]['Apellido_Paterno'];
        $dato['amater_alumno'] = $get_alumno[0]['Apellido_Materno'];
        $dato['nom_alumno'] = $get_alumno[0]['Nombre'];
        $dato['dni_alumno'] = $get_alumno[0]['Dni'];
        $dato['email_alumno'] = $get_alumno[0]['Correo_Institucional'];
        $dato['documento'] = "";

        $cantidad = (count($this->Model_IFV->get_cantidad_firma_contrato_efsrt())) + 1;

        if ($_FILES["contrato_fc"]["name"] != "") {
            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["contrato_fc"]["name"]);
            $config['upload_path'] = './documento_firma_contrato_efsrt/' . $cantidad;
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./documento_firma_contrato_efsrt/', 0777);
                chmod('./documento_firma_contrato_efsrt/' . $cantidad, 0777);
            }
            $config["allowed_types"] = 'pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["contrato_fc"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["contrato_fc"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["contrato_fc"]["error"];
            $_FILES["file"]["size"] = $_FILES["contrato_fc"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['documento'] = "documento_firma_contrato_efsrt/" . $cantidad . "/" . $dato['nom_documento'];
            }
        }

        $this->Model_IFV->insert_firma_contrato_efsrt($dato);
    }

    public function Reenviar_Firma_Contrato_Efsrt()
    {
        include "mcript.php";

        $dato['id_firma'] = $this->input->post("id_firma");
        $get_id = $this->Model_IFV->get_id_firma_contrato_efsrt($dato['id_firma']);
        $this->Model_IFV->update_firma_contrato_efsrt($dato);

        $get_correo = $this->Model_IFV->get_tipo_correo_efsrt(4);

        if (count($get_correo) > 0) {
            $encryption_id = $encriptar($dato['id_firma']);

            $mail = new PHPMailer(true);
            $link = "https://snappy.org.pe/" . "Pagina/index.php?Pagina/firma_contrato_efsrt/" . $encryption_id;

            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                $mail->Password = 'ifvc2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                $mail->addAddress($get_id[0]['email_alumno']);

                $mail->isHTML(true);                                  // Set email format to HTML

                $mail->Subject = $get_correo[0]['asunto'];

                $mail->Body = '<FONT SIZE=4>' . nl2br($get_correo[0]['texto']) . '<br><br>
                                                Ingrese al link:' . $link . '
                                </FONT SIZE>';

                $mail->CharSet = 'UTF-8';
                $mail->send();

            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
        }
    }

    public function Descargar_Firma_Contrato_Efsrt($id_firma)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_firma_contrato_efsrt($id_firma);
            $image = $dato['get_file'][0]['documento'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['documento']));
        } else {
            redirect('');
        }
    }

    public function Delete_Firma_Contrato_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_firma'] = $this->input->post("id_firma");
            $this->Model_IFV->delete_firma_contrato_efsrt($dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Firma_Contrato_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        $list_firma_contrato = $this->Model_IFV->get_list_firma_contrato_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:L1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:L1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Firma de Contrato (Lista)');

        $sheet->setAutoFilter('A1:L1');

        $sheet->getColumnDimension('A')->setWidth(18);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(25);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(40);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(40);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(18);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);

        $sheet->getStyle('A1:L1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:L1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:L1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Tipo');
        $sheet->setCellValue("B1", 'Apellido Paterno');
        $sheet->setCellValue("C1", 'Apellido Materno');
        $sheet->setCellValue("D1", 'Nombre(s)');
        $sheet->setCellValue("E1", 'Código');
        $sheet->setCellValue("F1", 'Correo');
        $sheet->setCellValue("G1", 'Grupo');
        $sheet->setCellValue("H1", 'Especialidad');
        $sheet->setCellValue("I1", 'Módulo');
        $sheet->setCellValue("J1", 'Fecha Envío');
        $sheet->setCellValue("K1", 'Hora Envío');
        $sheet->setCellValue("L1", 'Estado');

        $contador = 1;

        foreach ($list_firma_contrato as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:L{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("B{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:L{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:L{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_tipo']);
            $sheet->setCellValue("B{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("C{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("D{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("E{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("F{$contador}", $list['email_alumno']);
            $sheet->setCellValue("G{$contador}", $list['grupo']);
            $sheet->setCellValue("H{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("I{$contador}", $list['modulo']);
            if ($list['fecha_envio'] != "") {
                $sheet->setCellValue("J{$contador}", Date::PHPToExcel($list['fecha_envio']));
                $sheet->getStyle("J{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
                $sheet->setCellValue("K{$contador}", $list['hora_envio']);
            }
            $sheet->setCellValue("L{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Firma de Contrato (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Entrega_Temario_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['list_entrega_temario'] = $this->Model_IFV->get_list_entrega_temario_efsrt($dato['grupo'], $dato['id_especialidad'], $dato['id_modulo'], $dato['id_turno']);
            $this->load->view('view_IFV/efsrt/lista_entrega_temario', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Reenviar_Entrega_Temario_Efsrt()
    {
        include "mcript.php";

        $dato['id_entrega'] = $this->input->post("id_entrega");
        $dato['id_especialidad'] = $this->input->post("id_especialidad");
        $get_id = $this->Model_IFV->get_id_entrega_temario_efsrt($dato['id_entrega']);
        $this->Model_IFV->update_entrega_temario_efsrt($dato);

        $get_correo = $this->Model_IFV->get_tipo_correo_efsrt(2, $dato['id_especialidad']);

        if (count($get_correo) > 0) {
            $mail = new PHPMailer(true);

            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                $mail->Password = 'ifvc2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                $mail->addAddress($get_id[0]['email_alumno']);

                $mail->isHTML(true);                                  // Set email format to HTML

                $mail->Subject = $get_correo[0]['asunto'];

                $mail->Body = '<FONT SIZE=4>' . $get_correo[0]['texto'] . '</FONT SIZE>';

                $mail->CharSet = 'UTF-8';
                $mail->send();

            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
        }
    }

    public function Delete_Entrega_Temario_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_entrega'] = $this->input->post("id_entrega");
            $this->Model_IFV->delete_entrega_temario_efsrt($dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Entrega_Temario_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        $list_entrega_temario = $this->Model_IFV->get_list_entrega_temario_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:K1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:K1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Entrega de Temario (Lista)');

        $sheet->setAutoFilter('A1:K1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(40);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(40);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(18);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);

        $sheet->getStyle('A1:K1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:K1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:K1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Correo');
        $sheet->setCellValue("F1", 'Grupo');
        $sheet->setCellValue("G1", 'Especialidad');
        $sheet->setCellValue("H1", 'Módulo');
        $sheet->setCellValue("I1", 'Fecha Envío');
        $sheet->setCellValue("J1", 'Hora Envío');
        $sheet->setCellValue("K1", 'Estado');

        $contador = 1;

        foreach ($list_entrega_temario as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:K{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:K{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("B{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("C{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("D{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("E{$contador}", $list['email_alumno']);
            $sheet->setCellValue("F{$contador}", $list['grupo']);
            $sheet->setCellValue("G{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("H{$contador}", $list['modulo']);
            $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['fecha_envio']));
            $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("J{$contador}", $list['hora_envio']);
            $sheet->setCellValue("K{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Entrega de Temario (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Examen_Basico_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['modulo'] = $this->input->post("modulo");
            $dato['turno'] = $this->input->post("turno");
            $dato['seccion'] = $this->input->post("seccion");
            $dato['list_examen_basico_desglosable'] = $this->Model_IFV->get_list_examen_basico_efsrt_desglosable($dato['grupo'],$dato['id_especialidad'],$dato['id_modulo'],$dato['id_turno']);
            $dato['list_examen_basico'] = $this->Model_IFV->get_list_examen_basico_efsrt($dato['grupo'],$dato['id_especialidad'],$dato['id_modulo'],$dato['id_turno']);
            //$dato['list_examen_basico_desglosable'] = $this->Model_IFV->get_list_alumnos_grupo_efsrt($dato);
            //$dato['cadena'] = $this->Model_IFV->get_cadena_alumnos_grupo_efsrt($dato);
            //$dato['list_nota_grupo'] = $this->Model_IFV->get_list_nota_grupo($dato);
            $this->load->view('view_IFV/efsrt/lista_examen_basico', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Reenviar_Examen_Basico_Efsrt()
    {
        include "mcript.php";

        $dato['id_examen'] = $this->input->post("id_examen");
        $get_id = $this->Model_IFV->get_id_examen_basico_efsrt($dato['id_examen']);
        $this->Model_IFV->update_examen_basico_efsrt($dato);

        $get_correo = $this->Model_IFV->get_tipo_correo_efsrt(3);

        if (count($get_correo) > 0) {
            $mail = new PHPMailer(true);

            try {
                $mail->SMTPDebug = 0;                      // Enable verbose debug output
                $mail->isSMTP();                                            // Send using SMTP
                $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                $mail->Username = 'noreplay@ifv.edu.pe';                     // usuario de acceso
                $mail->Password = 'ifvc2022';                                // SMTP password
                $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                $mail->setFrom('noreplay@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                $mail->addAddress($get_id[0]['email_alumno']);

                $mail->isHTML(true);                                  // Set email format to HTML

                $mail->Subject = $get_correo[0]['asunto'];

                $mail->Body = '<FONT SIZE=4>' . $get_correo[0]['texto'] . '</FONT SIZE>';

                $mail->CharSet = 'UTF-8';
                $mail->send();

            } catch (Exception $e) {
                echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
            }
        }
    }

    public function Delete_Examen_Basico_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_examen'] = $this->input->post("id_examen");
            $this->Model_IFV->delete_examen_basico_efsrt($dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Examen_Basico_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        $list_examen_basico = $this->Model_IFV->get_list_examen_basico_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:P1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:P1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Examen Básico (Lista)');

        $sheet->setAutoFilter('A1:P1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(40);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(40);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(18);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(18);
        $sheet->getColumnDimension('L')->setWidth(18);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(18);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(15);

        $sheet->getStyle('A1:P1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:P1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:P1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Correo');
        $sheet->setCellValue("F1", 'Grupo');
        $sheet->setCellValue("G1", 'Especialidad');
        $sheet->setCellValue("H1", 'Módulo');
        $sheet->setCellValue("I1", 'Fecha Envío');
        $sheet->setCellValue("J1", 'Hora Envío');
        $sheet->setCellValue("K1", 'Fecha Termino');
        $sheet->setCellValue("L1", 'Hora Termino');
        $sheet->setCellValue("M1", 'Nota');
        $sheet->setCellValue("N1", 'Fecha Nota');
        $sheet->setCellValue("O1", 'Hora Nota');
        $sheet->setCellValue("P1", 'Estado');

        $contador = 1;

        foreach ($list_examen_basico as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:P{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:P{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:P{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("B{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("C{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("D{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("E{$contador}", $list['email_alumno']);
            $sheet->setCellValue("F{$contador}", $list['grupo']);
            $sheet->setCellValue("G{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("H{$contador}", $list['modulo']);
            $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['fecha_envio']));
            $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("J{$contador}", $list['hora_envio']);
            if ($list['fecha_termino'] != "") {
                $sheet->setCellValue("K{$contador}", Date::PHPToExcel($list['fecha_termino']));
                $sheet->getStyle("K{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }
            $sheet->setCellValue("L{$contador}", $list['hora_termino']);
            $sheet->setCellValue("M{$contador}", $list['nota']);
            if ($list['fecha_nota'] != "") {
                $sheet->setCellValue("N{$contador}", Date::PHPToExcel($list['fecha_nota']));
                $sheet->getStyle("N{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }
            $sheet->setCellValue("O{$contador}", $list['hora_nota']);
            $sheet->setCellValue("P{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Examen Básico (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Evaluacion_Basica_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['list_evaluacion_basica'] = $this->Model_IFV->get_list_evaluacion_basica_efsrt($dato['grupo'], $dato['id_especialidad'], $dato['id_modulo'], $dato['id_turno']);
            $this->load->view('view_IFV/efsrt/lista_evaluacion_basica', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Evaluacion_Basica_Efsrt($id_evaluacion)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_evaluacion_basica_efsrt($id_evaluacion);
            $dato['list_evaluador'] = $this->Model_IFV->get_list_usuario_evaluacion_basica_efsrt();
            $this->load->view('view_IFV/efsrt/modal_evaluacion_basica', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Evaluacion_Basica_Efsrt()
    {
        $dato['id_evaluacion'] = $this->input->post("id_evaluacion");
        $dato['fec_evaluacion'] = $this->input->post("fec_evaluacion_eb");
        $dato['id_evaluador'] = $this->input->post("id_evaluador_eb");
        $dato['puntaje_teorico'] = $this->input->post("puntaje_teorico_eb");
        $dato['puntaje_practico_1'] = $this->input->post("puntaje_practico_1_eb");
        $dato['puntaje_practico_2'] = $this->input->post("puntaje_practico_2_eb");
        $dato['puntaje_presentacion_personal_1'] = $this->input->post("puntaje_presentacion_personal_1_eb");
        $dato['puntaje_presentacion_personal_2'] = $this->input->post("puntaje_presentacion_personal_2_eb");
        $dato['puntaje_presentacion_personal_3'] = $this->input->post("puntaje_presentacion_personal_3_eb");
        $dato['puntaje_presentacion_personal_4'] = $this->input->post("puntaje_presentacion_personal_4_eb");
        $dato['documento'] = $this->input->post("documento_actual_eb");

        if ($_FILES["documento_eb"]["name"] != "") {
            $dato['nom_documento'] = str_replace(' ', '_', $_FILES["documento_eb"]["name"]);
            $config['upload_path'] = './documento_evaluacion_basica_efsrt/' . $dato['id_evaluacion'];
            if (!file_exists($config['upload_path'])) {
                mkdir($config['upload_path'], 0777, true);
                chmod($config['upload_path'], 0777);
                chmod('./documento_evaluacion_basica_efsrt/', 0777);
                chmod('./documento_evaluacion_basica_efsrt/' . $dato['id_evaluacion'], 0777);
            }
            $config["allowed_types"] = 'pdf';
            $this->load->library('upload', $config);
            $this->upload->initialize($config);
            $_FILES["file"]["name"] = $dato['nom_documento'];
            $_FILES["file"]["type"] = $_FILES["documento_eb"]["type"];
            $_FILES["file"]["tmp_name"] = $_FILES["documento_eb"]["tmp_name"];
            $_FILES["file"]["error"] = $_FILES["documento_eb"]["error"];
            $_FILES["file"]["size"] = $_FILES["documento_eb"]["size"];
            if ($this->upload->do_upload('file')) {
                $data = $this->upload->data();
                $dato['documento'] = "documento_evaluacion_basica_efsrt/" . $dato['id_evaluacion'] . "/" . $dato['nom_documento'];
            }
        }

        $this->Model_IFV->update_evaluacion_basica_efsrt($dato);
    }

    public function Descargar_Evaluacion_Basica_Efsrt($id_evaluacion)
    {
        if ($this->session->userdata('usuario')) {
            $dato['doc'] = $this->Model_IFV->get_id_evaluacion_basica_efsrt($id_evaluacion);
            $imagen = $dato['doc'][0]['documento'];
            force_download($imagen, NULL);
        } else {
            redirect('');
        }
    }

    public function Delete_Evaluacion_Basica_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_evaluacion'] = $this->input->post("id_evaluacion");
            $this->Model_IFV->delete_evaluacion_basica_efsrt($dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Evaluacion_Basica_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        $list_evaluacion_basica = $this->Model_IFV->get_list_evaluacion_basica_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:R1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:R1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Evaluación Básica (Lista)');

        //$sheet->setAutoFilter('A1:R1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(18);
        $sheet->getColumnDimension('H')->setWidth(20);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(15);

        $sheet->getStyle('A1:R1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:R1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:R1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'CB Teoricos');
        $sheet->setCellValue("G1", 'Fecha Examen');
        $sheet->setCellValue("H1", 'Evaluador');
        $sheet->setCellValue("I1", 'CB Practicas');
        $sheet->setCellValue("L1", 'Presentación Personal');
        $sheet->setCellValue("Q1", 'Final');
        $sheet->setCellValue("R1", 'Estado');

        $sheet->mergeCells("E1:F1");
        $sheet->mergeCells("I1:K1");
        $sheet->mergeCells("L1:P1");

        $contador = 1;

        foreach ($list_evaluacion_basica as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:R{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:R{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("B{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("C{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("D{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("E{$contador}", $list['puntaje_teorico']);
            $sheet->setCellValue("F{$contador}", $list['teorico']);
            if ($list['fecha'] != "") {
                $sheet->setCellValue("G{$contador}", Date::PHPToExcel($list['fecha']));
                $sheet->getStyle("G{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }
            $sheet->setCellValue("H{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("I{$contador}", $list['puntaje_practico_1']);
            $sheet->setCellValue("J{$contador}", $list['puntaje_practico_2']);
            $sheet->setCellValue("K{$contador}", $list['practico']);
            $sheet->setCellValue("L{$contador}", $list['puntaje_presentacion_personal_1']);
            $sheet->setCellValue("M{$contador}", $list['puntaje_presentacion_personal_2']);
            $sheet->setCellValue("N{$contador}", $list['puntaje_presentacion_personal_3']);
            $sheet->setCellValue("O{$contador}", $list['puntaje_presentacion_personal_4']);
            $sheet->setCellValue("P{$contador}", $list['presentacion_personal']);
            $sheet->setCellValue("Q{$contador}", $list['final']);
            $sheet->setCellValue("R{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Evaluación Básica (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Pdf_Evaluacion_Basica_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        if ($this->session->userdata('usuario')) {
            $grupo = str_replace('_', '/', $grupo);
            //$dato['get_id'] = $this->Model_IFV->get_list_efsrt($grupo,$id_especialidad,$id_modulo);
            $dato['list_matriculado'] = $this->Model_IFV->get_list_matriculado_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

            $mpdf = new \Mpdf\Mpdf([
                "format" => "A4",
                'default_font' => 'Helvetica',
            ]);
            $html = $this->load->view('view_IFV/efsrt/pdf_evaluacion_basica', $dato, true);
            $mpdf->WriteHTML($html);
            $mpdf->Output();
        } else {
            redirect('');
        }
    }

    public function Lista_Rezagado_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['list_rezagado'] = $this->Model_IFV->get_list_rezagado_efsrt($dato['grupo'], $dato['id_especialidad'], $dato['id_modulo'], $dato['id_turno']);
            $this->load->view('view_IFV/efsrt/lista_rezagado', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Rezagado_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        $list_rezagado = $this->Model_IFV->get_list_rezagado_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:S1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:S1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Rezagados (Lista)');

        $sheet->setAutoFilter('A1:S1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);
        $sheet->getColumnDimension('H')->setWidth(40);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(40);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(18);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(18);
        $sheet->getColumnDimension('O')->setWidth(18);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(18);
        $sheet->getColumnDimension('R')->setWidth(15);
        $sheet->getColumnDimension('S')->setWidth(15);

        $sheet->getStyle('A1:S1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:S1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:S1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Pago');
        $sheet->setCellValue("F1", 'Monto');
        $sheet->setCellValue("G1", 'Fecha');
        $sheet->setCellValue("H1", 'Correo');
        $sheet->setCellValue("I1", 'Grupo');
        $sheet->setCellValue("J1", 'Especialidad');
        $sheet->setCellValue("K1", 'Módulo');
        $sheet->setCellValue("L1", 'Fecha Envío');
        $sheet->setCellValue("M1", 'Hora Envío');
        $sheet->setCellValue("N1", 'Fecha Termino');
        $sheet->setCellValue("O1", 'Hora Termino');
        $sheet->setCellValue("P1", 'Nota');
        $sheet->setCellValue("Q1", 'Envio Nota');
        $sheet->setCellValue("R1", 'Hora Nota');
        $sheet->setCellValue("S1", 'Estado');

        $contador = 1;

        foreach ($list_rezagado as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:S{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_RIGHT);
            $sheet->getStyle("H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:S{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:S{$contador}")->applyFromArray($styleThinBlackBorderOutline);
            $sheet->getStyle("F{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_CURRENCY_SOL_SIMPLE);

            $sheet->setCellValue("A{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("B{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("C{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("D{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("E{$contador}", $list['nom_pago']);
            $sheet->setCellValue("F{$contador}", $list['monto']);
            $sheet->setCellValue("G{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("G{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("H{$contador}", $list['email_alumno']);
            $sheet->setCellValue("I{$contador}", $list['grupo']);
            $sheet->setCellValue("J{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("K{$contador}", $list['modulo']);
            $sheet->setCellValue("L{$contador}", Date::PHPToExcel($list['fecha_envio']));
            $sheet->getStyle("L{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("M{$contador}", $list['hora_envio']);
            $sheet->setCellValue("N{$contador}", Date::PHPToExcel($list['fecha_termino']));
            $sheet->getStyle("N{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("O{$contador}", $list['hora_termino']);
            $sheet->setCellValue("P{$contador}", $list['nota']);
            $sheet->setCellValue("Q{$contador}", Date::PHPToExcel($list['fecha_nota']));
            $sheet->getStyle("Q{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("R{$contador}", $list['hora_nota']);
            $sheet->setCellValue("S{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Rezagados (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Centro_Efsrt()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['id_especialidad'] = $this->input->post("id_especialidad");
            $dato['id_modulo'] = $this->input->post("id_modulo");
            $dato['id_turno'] = $this->input->post("id_turno");
            $dato['list_centro'] = $this->Model_IFV->get_list_centro_efsrt($dato['grupo'], $dato['id_especialidad'], $dato['id_modulo'], $dato['id_turno']);
            $this->load->view('view_IFV/efsrt/lista_centro', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Centro_Efsrt($grupo, $id_especialidad, $id_modulo, $id_turno)
    {
        $grupo = str_replace('_', '/', $grupo);
        $list_centro = $this->Model_IFV->get_list_centro_efsrt($grupo, $id_especialidad, $id_modulo, $id_turno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:O1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:O1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Centros EFSRT (Lista)');

        $sheet->setAutoFilter('A1:O1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(25);
        $sheet->getColumnDimension('C')->setWidth(25);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(40);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(15);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(20);
        $sheet->getColumnDimension('L')->setWidth(16);
        $sheet->getColumnDimension('M')->setWidth(16);
        $sheet->getColumnDimension('N')->setWidth(18);
        $sheet->getColumnDimension('O')->setWidth(15);

        $sheet->getStyle('A1:O1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:O1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:O1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Apellido Paterno');
        $sheet->setCellValue("B1", 'Apellido Materno');
        $sheet->setCellValue("C1", 'Nombre(s)');
        $sheet->setCellValue("D1", 'Código');
        $sheet->setCellValue("E1", 'Fecha');
        $sheet->setCellValue("F1", 'Usuario');
        $sheet->setCellValue("G1", 'Centro Prácticas');
        $sheet->setCellValue("H1", 'Ref');
        $sheet->setCellValue("I1", 'Inicio');
        $sheet->setCellValue("J1", 'Fin');
        $sheet->setCellValue("K1", 'Horas Previstas');
        $sheet->setCellValue("L1", 'Aprobación');
        $sheet->setCellValue("M1", "Envio Doc's");
        $sheet->setCellValue("N1", 'Horas Reales');
        $sheet->setCellValue("O1", 'Estado');

        $contador = 1;

        foreach ($list_centro as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:O{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:O{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:O{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("B{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("C{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("D{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("E{$contador}", Date::PHPToExcel($list['fecha']));
            $sheet->getStyle("E{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("F{$contador}", $list['usuario']);
            $sheet->setCellValue("G{$contador}", $list['nom_centro_practica']);
            $sheet->setCellValue("H{$contador}", $list['referencia']);
            $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['inicio']));
            $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("J{$contador}", Date::PHPToExcel($list['fin']));
            $sheet->getStyle("J{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("K{$contador}", $list['horas_previstas']);
            $sheet->setCellValue("L{$contador}", $list['aprobacion']);
            $sheet->setCellValue("M{$contador}", $list['envio_docs']);
            $sheet->setCellValue("N{$contador}", $list['horas_reales']);
            $sheet->setCellValue("O{$contador}", $list['nom_estado']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Centros EFSRT (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //-----------------------------------------------------------------------------------------
    public function Lista_Meses()
    {
        if ($this->session->userdata('usuario')) {
            $id_colaborador = $this->input->post("id_colaborador");
            $dato['get_id'] = $this->Model_IFV->get_id_colaborador($id_colaborador);
            //$dato['id_colaborador_l20'] = $this->Model_IFV->get_id_todos_l20_colaborador($dato);
            //$dato['id_colaborador2'] = $dato['id_colaborador_l20'][0]['Id'];
            //$dato['id_colaborador_l20'] = $this->Model_IFV->get_id_todos_l20_colaborador($dato);
            $dato['id_colaborador2'] = $dato['get_id'][0]['codigo_gll'];
            /*$dato['id_colaborador_l20'] = $this->Model_IFV->get_id_todos_l20_colaborador($dato);
            $id_colaborador2 = $dato['id_colaborador_l20'][0]['Id'];*/

            $dato['id_anio'] = $this->input->post("id_anio");
            $dato['list_meses'] = $this->Model_IFV->get_ingresos_mesesxanio($dato);

            $this->load->view('view_IFV/colaborador/lista_meses', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Ingresos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_colaborador'] = $this->input->post("id_colaborador");
            $id_colaborador = $this->input->post("id_colaborador");
            $dato['get_id'] = $this->Model_IFV->get_id_colaborador($id_colaborador);
            $dato['id_colaborador_l20'] = $this->Model_IFV->get_id_todos_l20_colaborador($dato);
            $id_colaborador2 = $dato['id_colaborador_l20'][0]['Id'];
            //$id_colaborador2 = $dato['id_colaborador_l20'][0]['Id'];
            $dato['id_colaborador2'] = $dato['get_id'][0]['codigo_gll'];
            $dato['id_anio'] = $this->input->post("id_anio");
            $dato['meses'] = $this->input->post("meses");
            $limit = $this->Model_IFV->get_aplica_colaborador($id_colaborador2);
            $dato['list_horario'] = $this->Model_IFV->get_list_horario_colaborador($id_colaborador2, $limit);
            $dato['list_registro_ingreso'] = $this->Model_IFV->get_list_registro_ingreso_matriculados2($dato);

            $this->load->view('view_IFV/colaborador/lista_ingresos', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Modulo($id_alumno, $modulo)
    {
        setlocale(LC_TIME, 'spanish');
        $dato['id_alumno'] = $id_alumno;
        //$dato['modulo'] = $modulo;
        //$list_registro_ingreso = $this->Model_IFV->get_list_registro_ingreso_matriculados_modulo($dato);
        $list_modulo = $this->Model_IFV->get_ingresos_modulo($id_alumno);
        $spreadsheet = new Spreadsheet();
        //$sheet = $spreadsheet->getActiveSheet();


        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];
        $i = 0;
        foreach ($list_modulo as $m) {
            $dato['modulo'] = $m['modulo'];
            // Crear una nueva hoja para cada elemento en $list_modulo
            if ($i > 0) {
                $spreadsheet->createSheet();
            }
            $sheet = $spreadsheet->setActiveSheetIndex($i);
            //$sheet->setTitle('M' . ($i + 1));
            $sheet->setTitle($dato['modulo']);
            $list_registro_ingreso = $this->Model_IFV->get_list_registro_ingreso_matriculados_modulo($dato);
            $sheet->getStyle('A1:H1')->getFont()->setBold(true);
            $sheet->setAutoFilter('A1:H1');

            $sheet->getColumnDimension('A')->setWidth(12);
            $sheet->getColumnDimension('B')->setWidth(15);
            $sheet->getColumnDimension('C')->setWidth(15);
            $sheet->getColumnDimension('D')->setWidth(40);
            $sheet->getColumnDimension('E')->setWidth(15);
            $sheet->getColumnDimension('F')->setWidth(15);
            $sheet->getColumnDimension('G')->setWidth(15);
            $sheet->getColumnDimension('H')->setWidth(15);

            $sheet->setCellValue("A1", 'Dia');
            $sheet->setCellValue("B1", 'Fecha');
            $sheet->setCellValue("C1", 'Hora');
            $sheet->setCellValue("D1", 'Obs');
            $sheet->setCellValue("E1", 'Tipo');
            $sheet->setCellValue("F1", 'Estado');
            $sheet->setCellValue("G1", 'Autorización');
            $sheet->setCellValue("H1", 'Registro');
            $sheet->getStyle("A1:H1")->applyFromArray($styleThinBlackBorderOutline);
            $spreadsheet->getActiveSheet()->getStyle("A1:H1")->getFill()
                ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)->getStartColor()->setARGB('C8C8C8');
            $sheet->getStyle("A1:H1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A1:H1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $contador = 1;

            foreach ($list_registro_ingreso as $list) {
                $contador++;

                $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
                $sheet->getStyle("A{$contador}:H{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
                $sheet->getStyle("A{$contador}:H{$contador}")->applyFromArray($styleThinBlackBorderOutline);

                $fecha = date('Y-m-d', strtotime(str_replace('/', '-', $list['fecha_ingreso'])));
                $nombreDia = utf8_encode(strftime('%A', strtotime($fecha)));
                $sheet->setCellValue("A{$contador}", $nombreDia);
                $sheet->setCellValue("B{$contador}", $list['fecha_ingreso']);
                $sheet->setCellValue("C{$contador}", $list['hora_ingreso']);
                $sheet->setCellValue("D{$contador}", $list['obs']);
                $sheet->setCellValue("E{$contador}", $list['tipo_desc']);
                $sheet->setCellValue("F{$contador}", $list['nom_estado_reporte']);
                $sheet->setCellValue("G{$contador}", $list['usuario_codigo']);
                $sheet->setCellValue("H{$contador}", $list['estado_ing']);
            }

            $i++;
        }


        /*$sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Módulos');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(25);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
        ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
        ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:B1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Fecha');
        $sheet->setCellValue("B1", 'Hora');
        $sheet->setCellValue("C1", 'Obs');
        $sheet->setCellValue("D1", 'Tipo');
        $sheet->setCellValue("E1", 'Estado');
        $sheet->setCellValue("F1", 'Autorización');
        $sheet->setCellValue("G1", 'Registro');

        $contador=1;

        foreach($list_registro_ingreso as $list){
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['orden']);
            $sheet->setCellValue("B{$contador}", $list['fecha_ingreso']);
            $sheet->setCellValue("C{$contador}", $list['hora_ingreso']);
            $sheet->setCellValue("D{$contador}", $list['obs']);
            $sheet->setCellValue("E{$contador}", $list['tipo_desc']);
            $sheet->setCellValue("F{$contador}", $list['nom_estado_reporte']);
            $sheet->setCellValue("G{$contador}", $list['usuario_codigo']);
        }*/

        $writer = new Xlsx($spreadsheet);
        $filename = 'Asistencia (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //Tipo Documento
    public function Tipo_Documento()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/tipo_documento/index', $dato);
    }

    public function Listar_Tipo_Documento()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list'] = $this->Model_IFV->get_list_tipo_documento($id_motivo = null);
            $this->load->view('view_IFV/tipo_documento/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Registrar_Tipo_Documento()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list'] = $this->Model_IFV->get_list_estados_documentos();
            $this->load->view('view_IFV/tipo_documento/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Tipo_Documento()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['estado'] = $this->input->post("estado");
            $dato['mod'] = 1;
            $total = count($this->Model_IFV->valida_tipo_documento($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_tipo_documento($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Actualizar_Tipo_Documento($id_motivo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_tipo_documento($id_motivo);
            $dato['list'] = $this->Model_IFV->get_list_estados_documentos();
            $this->load->view('view_IFV/tipo_documento/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Actualizar_Tipo_Documento()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo_e");
            $dato['estado'] = $this->input->post("estado_e");
            $dato['id_status_general'] = $this->input->post("id_status_general_e");
            $dato['mod'] = 2;
            $total = count($this->Model_IFV->valida_tipo_documento($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_tipo_documento($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Eliminar_Tipo_Documento()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_status_general'] = $this->input->post("id_status_general");
            $this->Model_IFV->delete_tipo_documento($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Tipo_Documento()
    {
        $data = $this->Model_IFV->get_list_texto_fut();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $spreadsheet->getActiveSheet()->setTitle('Texto FUT (Lista)');

        $sheet->setAutoFilter('A1:B1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(90);

        $sheet->getStyle('A1:B1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:B1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:B1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Producto');
        $sheet->setCellValue("B1", 'Texto');

        $contador = 1;

        foreach ($data as $list) {
            $contador++;

            //$sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            //$sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_sistema']);
            $sheet->setCellValue("B{$contador}", $list['texto']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Texto FUT (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }


    //Contactenos
    public function Contactenos()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $this->load->view('view_IFV/contactenos/index', $dato);
    }

    public function Listar_Contactenos($tipo)
    {
        if ($this->session->userdata('usuario')) {
            //$tipo = $this->input->post("tipo");
            $dato['id_usuario'] = $_SESSION['usuario'][0]['id_usuario'];
            $dato['list'] = $this->Model_IFV->get_list_contactenos($tipo);
            $this->load->view('view_IFV/contactenos/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Actualizar_Contactenos($id_contactenos)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id'] = $id_contactenos;
            $dato['get_id'] = $this->Model_IFV->get_list_contactenos(3, $dato);
            $dato['list'] = $this->Model_IFV->get_list_estados_contactenos();
            $this->load->view('view_IFV/contactenos/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Actualizar_Contactenos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['estado'] = $this->input->post("estado_e");
            $dato['id_contacto'] = $this->input->post("id_contactoe");
            //$dato['mod'] = 2;
            /*$total = count($this->Model_IFV->valida_tipo_documento($dato));*/
            /*if ($total > 0) {
				echo "error";
			} else {*/
            $this->Model_IFV->update_contactenos($dato);
            //}
        } else {
            redirect('/login');
        }
    }

    //----------------Ingreso Calendarizacion y pagos -----------------//
    public function Ingreso_CalendayPagos()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/ingreso_calendaypagos/index', $dato);
    }

    public function Listar_CalendayPagos()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list'] = $this->Model_IFV->get_list_calendaypagos();
            $this->load->view('view_IFV/ingreso_calendaypagos/list', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_CalendayPagos()
    {
        $data = $this->Model_IFV->get_list_texto_fut();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $spreadsheet->getActiveSheet()->setTitle('Texto FUT (Lista)');

        $sheet->setAutoFilter('A1:B1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(90);

        $sheet->getStyle('A1:B1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:B1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:B1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Producto');
        $sheet->setCellValue("B1", 'Texto');

        $contador = 1;

        foreach ($data as $list) {
            $contador++;

            //$sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            //$sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_sistema']);
            $sheet->setCellValue("B{$contador}", $list['texto']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Texto FUT (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------COLEGIO PROVENIENCIA----------------------------
    public function Colegio_Prov()
    {
        if (!$this->session->userdata('usuario')) {
            redirect(base_url());
        }

        //NO BORRAR AVISO
        $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
        $dato['list_aviso'] = $this->Model_General->get_list_aviso();

        //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
        $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
        $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
        $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
        $nivel = $_SESSION['usuario'][0]['id_nivel'];
        $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
        $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
        $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
        $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
        $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
        $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
        //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
        $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
        $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

        $this->load->view('view_IFV/colegio_prov/index', $dato);
    }

    public function Util_Busca_Provincia($mode = null)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_departamento'] = $this->input->post("id_departamento");

            $dato['list_provincia'] = $this->Model_IFV->busca_provincia($dato);
            $dato['mode'] = $mode;
            $this->load->view('view_IFV/utils/ubicacion/provincia', $dato);
        } else {
            redirect('');
        }
    }

    public function Util_Busca_Distrito($mode = null)
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_departamento'] = $this->input->post("id_departamento");
            $dato['id_provincia'] = $this->input->post("id_provincia");

            $dato['list_distrito'] = $this->Model_IFV->busca_distrito($dato);
            $dato['mode'] = $mode;
            $this->load->view('view_IFV/utils/ubicacion/distrito', $dato);
        } else {
            redirect('');
        }
    }

    public function Listar_Colegio_Prov()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list'] = $this->Model_IFV->get_list_colegio_prov();
            $this->load->view('view_IFV/colegio_prov/list', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Registrar_Colegio_Prov()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_departamento'] = $this->Model_IFV->get_list_departamento();
            $dato['list_estado'] = $this->Model_General->get_list_estado();
            $this->load->view('view_IFV/colegio_prov/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Colegio_Prov()
    {
        if ($this->session->userdata('usuario')) {
            $dato['institucion'] = $this->input->post("institucion");
            $dato['departamento'] = $this->input->post("departamento");
            $dato['provincia'] = $this->input->post("provincia");
            $dato['distrito'] = $this->input->post("distrito");
            $dato['estado'] = $this->input->post("id_estado");
            $dato['tipo_gestion'] = $this->input->post("tipo_gestion");
            $dato['mod'] = 1;
            $total = count($this->Model_IFV->valida_colegio_prov($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_colegio_prov($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Actualizar_Colegio_Prov($id)
    {
        if ($this->session->userdata('usuario')) {
            $dato['colegio_prov'] = $this->Model_IFV->get_list_colegio_prov($id);
            $dato['id_departamento'] = $dato['colegio_prov'][0]['departamento'];
            $dato['id_provincia'] = $dato['colegio_prov'][0]['provincia'];
            $dato['list_departamento'] = $this->Admin_model->get_list_departamento();
            $dato['list_provincia'] = $this->Model_IFV->busca_provincia($dato);
            $dato['list_distrito'] = $this->Model_IFV->busca_distrito($dato);
            $dato['list_estado'] = $this->Model_General->get_list_estado();
            $this->load->view('view_IFV/colegio_prov/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Actualizar_Colegio_Prov()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_colegio_prov'] = $this->input->post("id_colegio_prov_e");
            $dato['institucion'] = $this->input->post("institucion_e");
            $dato['departamento'] = $this->input->post("departamento_e");
            $dato['provincia'] = $this->input->post("provincia_e");
            $dato['distrito'] = $this->input->post("distrito_e");
            $dato['estado'] = $this->input->post("id_estado_e");
            $dato['tipo_gestion'] = $this->input->post("tipo_gestion_e");
            $dato['mod'] = 2;
            $total = count($this->Model_IFV->valida_colegio_prov($dato));
            if ($total > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_colegio_prov($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Eliminar_Colegio_Prov()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_colegio_prov'] = $this->input->post("id_colegio_prov");
            $this->Model_IFV->delete_colegio_prov($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Colegio_Prov()
    {
        $data = $this->Model_IFV->get_list_colegio_prov();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("B2:G2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("B2:G2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Colegio Proveniencia (Lista)');

        $sheet->setAutoFilter('B2:G2');
        $sheet->freezePane('A3');

        $sheet->getColumnDimension('B')->setWidth(40);
        $sheet->getColumnDimension('C')->setWidth(40);
        $sheet->getColumnDimension('D')->setWidth(40);
        $sheet->getColumnDimension('E')->setWidth(40);
        $sheet->getColumnDimension('F')->setWidth(25);
        $sheet->getColumnDimension('G')->setWidth(15);

        $sheet->getStyle('B2:G2')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("B2:G2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("B2:G2")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("B2", 'Institución');
        $sheet->setCellValue("C2", 'Departamento');
        $sheet->setCellValue("D2", 'Provincia');
        $sheet->setCellValue("E2", 'Distrito');
        $sheet->setCellValue("F2", 'Tipo de Gestión');
        $sheet->setCellValue("G2", 'Estado');

        $contador = 2;

        foreach ($data as $list) {
            $contador++;

            $sheet->getStyle("B{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:F{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("B{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("B{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("B{$contador}", $list['institucion']);
            $sheet->setCellValue("C{$contador}", $list['nombre_departamento']);
            $sheet->setCellValue("D{$contador}", $list['nombre_provincia']);
            $sheet->setCellValue("E{$contador}", $list['nombre_distrito']);
            $sheet->setCellValue("F{$contador}", $list['nombre_tipo_gestion']);
            $sheet->setCellValue("G{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Colegio Proveniencia (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------DATOS ALUMNOS-------------------------------------------
    public function Datos_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/datos_alumno/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Datos_Alumno($tipo)
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_alumno'] = $this->Model_IFV->get_list_datos_alumno($tipo);
            $this->load->view('view_IFV/datos_alumno/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Datos_Alumno($tipo)
    {
        $datos_alumno = $this->Model_IFV->get_list_datos_alumno($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:AA1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:AA1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Doc. Alumnos');

        $sheet->setAutoFilter('A1:AA1');

        $sheet->getColumnDimension('A')->setWidth(20);
        $sheet->getColumnDimension('B')->setWidth(20);
        $sheet->getColumnDimension('C')->setWidth(20);
        $sheet->getColumnDimension('D')->setWidth(10);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(30);
        $sheet->getColumnDimension('G')->setWidth(30);
        $sheet->getColumnDimension('H')->setWidth(10);
        $sheet->getColumnDimension('I')->setWidth(20);
        $sheet->getColumnDimension('J')->setWidth(10);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(15);
        $sheet->getColumnDimension('M')->setWidth(15);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(15);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(10);
        $sheet->getColumnDimension('S')->setWidth(30);
        $sheet->getColumnDimension('T')->setWidth(15);
        $sheet->getColumnDimension('U')->setWidth(15);
        $sheet->getColumnDimension('V')->setWidth(15);
        $sheet->getColumnDimension('W')->setWidth(30);
        $sheet->getColumnDimension('X')->setWidth(15);
        $sheet->getColumnDimension('Y')->setWidth(15);
        $sheet->getColumnDimension('Z')->setWidth(15);
        $sheet->getColumnDimension('AA')->setWidth(24);


        $sheet->getStyle('A1:AA1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:O1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $spreadsheet->getActiveSheet()->getStyle("P1:R1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('B1A0C7');

        $spreadsheet->getActiveSheet()->getStyle("S1:AA1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('E6B8B7');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:AA1")->applyFromArray($styleThinBlackBorderOutline);

        $encabezados = [
            'Apellido Paterno', 'Apellido Materno', 'Nombre(s)', 'Código', 'Celular',
            'Correo Institucional', 'Correo Personal', 'Grupo', 'Especialidad', 'Turno',
            'Módulo', 'Ciclo', 'Sección', 'Matrícula', 'Alumno', 'Sexo', 'Fecha Nac.',
            'Edad', 'Direccion', 'Departamento', 'Provincia', 'Distrito', 'Nombre de IE',
            'Departamento', 'Provincia', 'Distrito', 'Tipo de Gestión'
        ];

        // Obtén el rango de letras para las columnas (de la A a la Z y AA)
        $columnas = range('A', 'Z');
        $columnas[] = 'AA';

        $hoja = $spreadsheet->getActiveSheet();

        // Fusiona las celdas y establece los encabezados de columna
        foreach ($columnas as $indice => $columna) {
            $hoja->setCellValue($columna . '1', $encabezados[$indice]);
        }

        $contador = 1;

        foreach ($datos_alumno as $list) {
            $contador++;

            //$sheet->getStyle("A{$contador}:AA{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);

            $sheet->getStyle("J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("S{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);

            $sheet->getStyle("D{$contador}:R{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("F{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);

            $sheet->getStyle("A{$contador}:AA{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("B{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("C{$contador}", $list['Nombre']);
            $sheet->setCellValue("D{$contador}", $list['Codigo']);
            $sheet->setCellValue("E{$contador}", $list['Celular']);
            $sheet->setCellValue("F{$contador}", $list['Correo_Institucional']);
            $sheet->setCellValue("G{$contador}", $list['Email']);
            $sheet->setCellValue("H{$contador}", $list['Grupo']);
            $sheet->setCellValue("I{$contador}", $list['Especialidad']);
            $sheet->setCellValue("J{$contador}", $list['Turno']);
            $sheet->setCellValue("K{$contador}", $list['Modulo']);
            $sheet->setCellValue("L{$contador}", "");
            $sheet->setCellValue("M{$contador}", $list['Seccion']);
            $sheet->setCellValue("N{$contador}", $list['Matricula']);
            $sheet->setCellValue("O{$contador}", $list['Alumno']);
            $sheet->setCellValue("P{$contador}", $list['Sexo']);
            $sheet->setCellValue("Q{$contador}", $list['Fecha_Nacimiento']);
            $sheet->setCellValue("R{$contador}", $list['Edad']);
            $sheet->setCellValue("S{$contador}", "");
            $sheet->setCellValue("T{$contador}", "");
            $sheet->setCellValue("U{$contador}", "");
            $sheet->setCellValue("V{$contador}", "");
            $sheet->setCellValue("W{$contador}", $list['Colegio_Proveniencia']);
            $sheet->setCellValue("X{$contador}", $list['Departamento_Colegio_Proveniencia']);
            $sheet->setCellValue("Y{$contador}", $list['Provincia_Colegio_Proveniencia']);
            $sheet->setCellValue("Z{$contador}", $list['Distrito_Colegio_Proveniencia']);
            $sheet->setCellValue("AA{$contador}", $list['Tipo_Gestion']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Alumnos (Datos)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Insert_Horario_Colaborador_V2()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario'] = "";
            $dato['id_colaborador'] = $this->input->post("id_colaborador");
            $dato['get_id'] = $this->Model_IFV->get_id_colaborador($dato['id_colaborador']);
            $dato['codigo'] = $dato['get_id'][0]['codigo_gll'];
            $dato['apellido_paterno'] = $dato['get_id'][0]['apellido_paterno'];
            $dato['apellido_materno'] = $dato['get_id'][0]['apellido_materno'];
            $dato['nombres'] = $dato['get_id'][0]['nombres'];
            $dato['de'] = $this->input->post("de");
            $dato['a'] = $this->input->post("a");
            $dato['ch_lun'] = $this->input->post("ch_lun");
            $dato['ch_mar'] = $this->input->post("ch_mar");
            $dato['ch_mier'] = $this->input->post("ch_mier");
            $dato['ch_jue'] = $this->input->post("ch_jue");
            $dato['ch_vie'] = $this->input->post("ch_vie");
            $dato['ch_sab'] = $this->input->post("ch_sab");
            $dato['ch_dom'] = $this->input->post("ch_dom");

            $cant = $this->Model_IFV->valida_horario_colaborador_v2($dato);
            if ($cant[0]['cantidad'] > 0) {
                echo "1Existe un horario activo";
            } else {
                $anio = date('Y');
                $cod = $this->Model_IFV->ultimo_cod_horario();
                $totalRows_t = $cod[0]['cantidad'];
                $aniof = substr($anio, 2, 2);
                if ($totalRows_t < 9) {
                    $codigofinal = $aniof . "0000" . ($totalRows_t + 1);
                }
                if ($totalRows_t > 8 && $totalRows_t < 99) {
                    $codigofinal = $aniof . "000" . ($totalRows_t + 1);
                }
                if ($totalRows_t > 98 && $totalRows_t < 999) {
                    $codigofinal = $aniof . "00" . ($totalRows_t + 1);
                }
                if ($totalRows_t > 998 && $totalRows_t < 9999) {
                    $codigofinal = $aniof . "0" . ($totalRows_t + 1);
                }
                if ($totalRows_t > 9998) {
                    $codigofinal = $aniof . ($totalRows_t + 1);
                }
                $dato['cod_horario'] = $codigofinal;
                $dato['id_horario'] = $this->Model_IFV->insert_horario_colaborador_v2($dato);

                if ($dato['ch_lun'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_lun");
                    $dato['ch_alm'] = $this->input->post("ch_alm_lun");
                    $dato['ch_t'] = $this->input->post("ch_t_lun");
                    $dato['ch_c'] = $this->input->post("ch_c_lun");
                    $dato['ch_n'] = $this->input->post("ch_n_lun");
                    $dato['dia'] = 1;
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_lun");
                    $dato['salida_m'] = $this->input->post("salida_m_lun");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_lun");
                    $dato['salida_alm'] = $this->input->post("salida_alm_lun");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_lun");
                    $dato['salida_t'] = $this->input->post("salida_t_lun");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_lun");
                    $dato['salida_c'] = $this->input->post("salida_c_lun");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_lun");
                    $dato['salida_n'] = $this->input->post("salida_n_lun");
                    $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                }

                if ($dato['ch_mar'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_mar");
                    $dato['ch_alm'] = $this->input->post("ch_alm_mar");
                    $dato['ch_t'] = $this->input->post("ch_t_mar");
                    $dato['ch_c'] = $this->input->post("ch_c_mar");
                    $dato['ch_n'] = $this->input->post("ch_n_mar");
                    $dato['dia'] = 2;
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_mar");
                    $dato['salida_m'] = $this->input->post("salida_m_mar");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mar");
                    $dato['salida_alm'] = $this->input->post("salida_alm_mar");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_mar");
                    $dato['salida_t'] = $this->input->post("salida_t_mar");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_mar");
                    $dato['salida_c'] = $this->input->post("salida_c_mar");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_mar");
                    $dato['salida_n'] = $this->input->post("salida_n_mar");
                    $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                }

                if ($dato['ch_mier'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_mier");
                    $dato['ch_alm'] = $this->input->post("ch_alm_mier");
                    $dato['ch_t'] = $this->input->post("ch_t_mier");
                    $dato['ch_c'] = $this->input->post("ch_c_mier");
                    $dato['ch_n'] = $this->input->post("ch_n_mier");
                    $dato['dia'] = 3;
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_mier");
                    $dato['salida_m'] = $this->input->post("salida_m_mier");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mier");
                    $dato['salida_alm'] = $this->input->post("salida_alm_mier");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_mier");
                    $dato['salida_t'] = $this->input->post("salida_t_mier");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_mier");
                    $dato['salida_c'] = $this->input->post("salida_c_mier");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_mier");
                    $dato['salida_n'] = $this->input->post("salida_n_mier");
                    $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                }

                if ($dato['ch_jue'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_jue");
                    $dato['ch_alm'] = $this->input->post("ch_alm_jue");
                    $dato['ch_t'] = $this->input->post("ch_t_jue");
                    $dato['ch_c'] = $this->input->post("ch_c_jue");
                    $dato['ch_n'] = $this->input->post("ch_n_jue");
                    $dato['dia'] = 4;
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_jue");
                    $dato['salida_m'] = $this->input->post("salida_m_jue");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_jue");
                    $dato['salida_alm'] = $this->input->post("salida_alm_jue");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_jue");
                    $dato['salida_t'] = $this->input->post("salida_t_jue");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_jue");
                    $dato['salida_c'] = $this->input->post("salida_c_jue");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_jue");
                    $dato['salida_n'] = $this->input->post("salida_n_jue");
                    $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                }

                if ($dato['ch_vie'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_vie");
                    $dato['ch_alm'] = $this->input->post("ch_alm_vie");
                    $dato['ch_t'] = $this->input->post("ch_t_vie");
                    $dato['ch_c'] = $this->input->post("ch_c_vie");
                    $dato['ch_n'] = $this->input->post("ch_n_vie");
                    $dato['dia'] = 5;
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_vie");
                    $dato['salida_m'] = $this->input->post("salida_m_vie");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_vie");
                    $dato['salida_alm'] = $this->input->post("salida_alm_vie");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_vie");
                    $dato['salida_t'] = $this->input->post("salida_t_vie");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_vie");
                    $dato['salida_c'] = $this->input->post("salida_c_vie");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_vie");
                    $dato['salida_n'] = $this->input->post("salida_n_vie");
                    $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                }

                if ($dato['ch_sab'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_sab");
                    $dato['ch_alm'] = $this->input->post("ch_alm_sab");
                    $dato['ch_t'] = $this->input->post("ch_t_sab");
                    $dato['ch_c'] = $this->input->post("ch_c_sab");
                    $dato['ch_n'] = $this->input->post("ch_n_sab");
                    $dato['dia'] = 6;
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_sab");
                    $dato['salida_m'] = $this->input->post("salida_m_sab");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_sab");
                    $dato['salida_alm'] = $this->input->post("salida_alm_sab");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_sab");
                    $dato['salida_t'] = $this->input->post("salida_t_sab");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_sab");
                    $dato['salida_c'] = $this->input->post("salida_c_sab");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_sab");
                    $dato['salida_n'] = $this->input->post("salida_n_sab");
                    $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                }

                if ($dato['ch_dom'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_dom");
                    $dato['ch_alm'] = $this->input->post("ch_alm_dom");
                    $dato['ch_t'] = $this->input->post("ch_t_dom");
                    $dato['ch_c'] = $this->input->post("ch_c_dom");
                    $dato['ch_n'] = $this->input->post("ch_n_dom");
                    $dato['dia'] = 7;
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_dom");
                    $dato['salida_m'] = $this->input->post("salida_m_dom");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_dom");
                    $dato['salida_alm'] = $this->input->post("salida_alm_dom");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_dom");
                    $dato['salida_t'] = $this->input->post("salida_t_dom");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_dom");
                    $dato['salida_c'] = $this->input->post("salida_c_dom");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_dom");
                    $dato['salida_n'] = $this->input->post("salida_n_dom");
                    $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                }
                //------
                $fecha_inicio = $dato['de'];
                $fecha_fin = $dato['a'];

                $fecha_actual = strtotime(date('Y-m-d'));

                $fecha_inicio = strtotime($fecha_inicio);
                $fecha_fin = strtotime($fecha_fin);

                if ($fecha_actual < $fecha_inicio) {
                    while ($fecha_actual <= $fecha_fin) {
                        $dato['estado_asistencia'] = '';
                        $dato['laborable'] = '';
                        $dato['estado_ingreso'] = 0;

                        $dato['fecha'] = date('Y-m-d', $fecha_actual);
                        $dato['flag_domingo'] = 0;
                        $dato['flag_sabado'] = 0;
                        $dato['flag_festivo'] = 0;
                        if (date('N', strtotime($dato['fecha'])) == 7) {
                            $dato['flag_domingo'] = 1;
                        }
                        if (date('N', strtotime($dato['fecha'])) == 6) {
                            $dato['flag_sabado'] = 1;
                        }
                        $festivo = $this->Model_IFV->valida_fecha_festivo_alumno_ifv($dato);
                        if (count($festivo) > 0) {
                            $dato['flag_festivo'] = 1;
                        }
                        if (date('N', strtotime($dato['fecha'])) == 1) {
                            if ($dato['ch_lun'] == 1) {
                                $dato['ch_m'] = $this->input->post("ch_m_lun");
                                $dato['ch_alm'] = $this->input->post("ch_alm_lun");
                                $dato['ch_t'] = $this->input->post("ch_t_lun");
                                $dato['ch_c'] = $this->input->post("ch_c_lun");
                                $dato['ch_n'] = $this->input->post("ch_n_lun");
                                $dato['dia'] = 1;
                                $dato['ingreso_m'] = $this->input->post("ingreso_m_lun");
                                $dato['salida_m'] = $this->input->post("salida_m_lun");
                                $dato['ingreso_alm'] = $this->input->post("ingreso_alm_lun");
                                $dato['salida_alm'] = $this->input->post("salida_alm_lun");
                                $dato['ingreso_t'] = $this->input->post("ingreso_t_lun");
                                $dato['salida_t'] = $this->input->post("salida_t_lun");
                                $dato['ingreso_c'] = $this->input->post("ingreso_c_lun");
                                $dato['salida_c'] = $this->input->post("salida_c_lun");
                                $dato['ingreso_n'] = $this->input->post("ingreso_n_lun");
                                $dato['salida_n'] = $this->input->post("salida_n_lun");
                                $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                            }
                        }
                        if (date('N', strtotime($dato['fecha'])) == 2) {
                            if ($dato['ch_mar'] == 1) {
                                $dato['ch_m'] = $this->input->post("ch_m_mar");
                                $dato['ch_alm'] = $this->input->post("ch_alm_mar");
                                $dato['ch_t'] = $this->input->post("ch_t_mar");
                                $dato['ch_c'] = $this->input->post("ch_c_mar");
                                $dato['ch_n'] = $this->input->post("ch_n_mar");
                                $dato['dia'] = 2;
                                $dato['ingreso_m'] = $this->input->post("ingreso_m_mar");
                                $dato['salida_m'] = $this->input->post("salida_m_mar");
                                $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mar");
                                $dato['salida_alm'] = $this->input->post("salida_alm_mar");
                                $dato['ingreso_t'] = $this->input->post("ingreso_t_mar");
                                $dato['salida_t'] = $this->input->post("salida_t_mar");
                                $dato['ingreso_c'] = $this->input->post("ingreso_c_mar");
                                $dato['salida_c'] = $this->input->post("salida_c_mar");
                                $dato['ingreso_n'] = $this->input->post("ingreso_n_mar");
                                $dato['salida_n'] = $this->input->post("salida_n_mar");
                                $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                            }
                        }
                        if (date('N', strtotime($dato['fecha'])) == 3) {
                            if ($dato['ch_mier'] == 1) {
                                $dato['ch_m'] = $this->input->post("ch_m_mier");
                                $dato['ch_alm'] = $this->input->post("ch_alm_mier");
                                $dato['ch_t'] = $this->input->post("ch_t_mier");
                                $dato['ch_c'] = $this->input->post("ch_c_mier");
                                $dato['ch_n'] = $this->input->post("ch_n_mier");
                                $dato['dia'] = 3;
                                $dato['ingreso_m'] = $this->input->post("ingreso_m_mier");
                                $dato['salida_m'] = $this->input->post("salida_m_mier");
                                $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mier");
                                $dato['salida_alm'] = $this->input->post("salida_alm_mier");
                                $dato['ingreso_t'] = $this->input->post("ingreso_t_mier");
                                $dato['salida_t'] = $this->input->post("salida_t_mier");
                                $dato['ingreso_c'] = $this->input->post("ingreso_c_mier");
                                $dato['salida_c'] = $this->input->post("salida_c_mier");
                                $dato['ingreso_n'] = $this->input->post("ingreso_n_mier");
                                $dato['salida_n'] = $this->input->post("salida_n_mier");
                                $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                            }
                        }
                        if (date('N', strtotime($dato['fecha'])) == 4) {
                            if ($dato['ch_jue'] == 1) {
                                $dato['ch_m'] = $this->input->post("ch_m_jue");
                                $dato['ch_alm'] = $this->input->post("ch_alm_jue");
                                $dato['ch_t'] = $this->input->post("ch_t_jue");
                                $dato['ch_c'] = $this->input->post("ch_c_jue");
                                $dato['ch_n'] = $this->input->post("ch_n_jue");
                                $dato['dia'] = 4;
                                $dato['ingreso_m'] = $this->input->post("ingreso_m_jue");
                                $dato['salida_m'] = $this->input->post("salida_m_jue");
                                $dato['ingreso_alm'] = $this->input->post("ingreso_alm_jue");
                                $dato['salida_alm'] = $this->input->post("salida_alm_jue");
                                $dato['ingreso_t'] = $this->input->post("ingreso_t_jue");
                                $dato['salida_t'] = $this->input->post("salida_t_jue");
                                $dato['ingreso_c'] = $this->input->post("ingreso_c_jue");
                                $dato['salida_c'] = $this->input->post("salida_c_jue");
                                $dato['ingreso_n'] = $this->input->post("ingreso_n_jue");
                                $dato['salida_n'] = $this->input->post("salida_n_jue");
                                $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                            }
                        }
                        if (date('N', strtotime($dato['fecha'])) == 5) {
                            if ($dato['ch_vie'] == 1) {
                                $dato['ch_m'] = $this->input->post("ch_m_vie");
                                $dato['ch_alm'] = $this->input->post("ch_alm_vie");
                                $dato['ch_t'] = $this->input->post("ch_t_vie");
                                $dato['ch_c'] = $this->input->post("ch_c_vie");
                                $dato['ch_n'] = $this->input->post("ch_n_vie");
                                $dato['dia'] = 5;
                                $dato['ingreso_m'] = $this->input->post("ingreso_m_vie");
                                $dato['salida_m'] = $this->input->post("salida_m_vie");
                                $dato['ingreso_alm'] = $this->input->post("ingreso_alm_vie");
                                $dato['salida_alm'] = $this->input->post("salida_alm_vie");
                                $dato['ingreso_t'] = $this->input->post("ingreso_t_vie");
                                $dato['salida_t'] = $this->input->post("salida_t_vie");
                                $dato['ingreso_c'] = $this->input->post("ingreso_c_vie");
                                $dato['salida_c'] = $this->input->post("salida_c_vie");
                                $dato['ingreso_n'] = $this->input->post("ingreso_n_vie");
                                $dato['salida_n'] = $this->input->post("salida_n_vie");
                                $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                            }
                        }
                        if (date('N', strtotime($dato['fecha'])) == 6) {
                            if ($dato['ch_sab'] == 1) {
                                $dato['ch_m'] = $this->input->post("ch_m_sab");
                                $dato['ch_alm'] = $this->input->post("ch_alm_sab");
                                $dato['ch_t'] = $this->input->post("ch_t_sab");
                                $dato['ch_c'] = $this->input->post("ch_c_sab");
                                $dato['ch_n'] = $this->input->post("ch_n_sab");
                                $dato['dia'] = 6;
                                $dato['ingreso_m'] = $this->input->post("ingreso_m_sab");
                                $dato['salida_m'] = $this->input->post("salida_m_sab");
                                $dato['ingreso_alm'] = $this->input->post("ingreso_alm_sab");
                                $dato['salida_alm'] = $this->input->post("salida_alm_sab");
                                $dato['ingreso_t'] = $this->input->post("ingreso_t_sab");
                                $dato['salida_t'] = $this->input->post("salida_t_sab");
                                $dato['ingreso_c'] = $this->input->post("ingreso_c_sab");
                                $dato['salida_c'] = $this->input->post("salida_c_sab");
                                $dato['ingreso_n'] = $this->input->post("ingreso_n_sab");
                                $dato['salida_n'] = $this->input->post("salida_n_sab");
                                $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                            }
                        }
                        if (date('N', strtotime($dato['fecha'])) == 7) {
                            if ($dato['ch_dom'] == 1) {
                                $dato['ch_m'] = $this->input->post("ch_m_dom");
                                $dato['ch_alm'] = $this->input->post("ch_alm_dom");
                                $dato['ch_t'] = $this->input->post("ch_t_dom");
                                $dato['ch_c'] = $this->input->post("ch_c_dom");
                                $dato['ch_n'] = $this->input->post("ch_n_dom");
                                $dato['dia'] = 7;
                                $dato['ingreso_m'] = $this->input->post("ingreso_m_dom");
                                $dato['salida_m'] = $this->input->post("salida_m_dom");
                                $dato['ingreso_alm'] = $this->input->post("ingreso_alm_dom");
                                $dato['salida_alm'] = $this->input->post("salida_alm_dom");
                                $dato['ingreso_t'] = $this->input->post("ingreso_t_dom");
                                $dato['salida_t'] = $this->input->post("salida_t_dom");
                                $dato['ingreso_c'] = $this->input->post("ingreso_c_dom");
                                $dato['salida_c'] = $this->input->post("salida_c_dom");
                                $dato['ingreso_n'] = $this->input->post("ingreso_n_dom");
                                $dato['salida_n'] = $this->input->post("salida_n_dom");
                                $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                            }
                        }
                        $fecha_actual = strtotime('+1 day', $fecha_actual);
                    }
                } elseif ($fecha_actual >= $fecha_inicio) {
                    while ($fecha_actual <= $fecha_fin) {
                        if ($fecha_actual >= $fecha_inicio) {
                            $dato['estado_asistencia'] = '';
                            $dato['laborable'] = '';
                            $dato['estado_ingreso'] = 0;
                            $dato['fecha'] = date('Y-m-d', $fecha_actual);
                            $dato['flag_domingo'] = 0;
                            $dato['flag_sabado'] = 0;
                            $dato['flag_festivo'] = 0;
                            if (date('N', strtotime($dato['fecha'])) == 7) {
                                $dato['flag_domingo'] = 1;
                            }
                            if (date('N', strtotime($dato['fecha'])) == 6) {
                                $dato['flag_sabado'] = 1;
                            }
                            $festivo = $this->Model_IFV->valida_fecha_festivo_alumno_ifv($dato);
                            if (count($festivo) > 0) {
                                $dato['flag_festivo'] = 1;
                            }
                            if (date('N', strtotime($dato['fecha'])) == 1) {
                                if ($dato['ch_lun'] == 1) {
                                    $dato['ch_m'] = $this->input->post("ch_m_lun");
                                    $dato['ch_alm'] = $this->input->post("ch_alm_lun");
                                    $dato['ch_t'] = $this->input->post("ch_t_lun");
                                    $dato['ch_c'] = $this->input->post("ch_c_lun");
                                    $dato['ch_n'] = $this->input->post("ch_n_lun");
                                    $dato['dia'] = 1;
                                    $dato['ingreso_m'] = $this->input->post("ingreso_m_lun");
                                    $dato['salida_m'] = $this->input->post("salida_m_lun");
                                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_lun");
                                    $dato['salida_alm'] = $this->input->post("salida_alm_lun");
                                    $dato['ingreso_t'] = $this->input->post("ingreso_t_lun");
                                    $dato['salida_t'] = $this->input->post("salida_t_lun");
                                    $dato['ingreso_c'] = $this->input->post("ingreso_c_lun");
                                    $dato['salida_c'] = $this->input->post("salida_c_lun");
                                    $dato['ingreso_n'] = $this->input->post("ingreso_n_lun");
                                    $dato['salida_n'] = $this->input->post("salida_n_lun");
                                    $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                                }
                            }
                            if (date('N', strtotime($dato['fecha'])) == 2) {
                                if ($dato['ch_mar'] == 1) {
                                    $dato['ch_m'] = $this->input->post("ch_m_mar");
                                    $dato['ch_alm'] = $this->input->post("ch_alm_mar");
                                    $dato['ch_t'] = $this->input->post("ch_t_mar");
                                    $dato['ch_c'] = $this->input->post("ch_c_mar");
                                    $dato['ch_n'] = $this->input->post("ch_n_mar");
                                    $dato['dia'] = 2;
                                    $dato['ingreso_m'] = $this->input->post("ingreso_m_mar");
                                    $dato['salida_m'] = $this->input->post("salida_m_mar");
                                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mar");
                                    $dato['salida_alm'] = $this->input->post("salida_alm_mar");
                                    $dato['ingreso_t'] = $this->input->post("ingreso_t_mar");
                                    $dato['salida_t'] = $this->input->post("salida_t_mar");
                                    $dato['ingreso_c'] = $this->input->post("ingreso_c_mar");
                                    $dato['salida_c'] = $this->input->post("salida_c_mar");
                                    $dato['ingreso_n'] = $this->input->post("ingreso_n_mar");
                                    $dato['salida_n'] = $this->input->post("salida_n_mar");
                                    $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                                }
                            }
                            if (date('N', strtotime($dato['fecha'])) == 3) {
                                if ($dato['ch_mier'] == 1) {
                                    $dato['ch_m'] = $this->input->post("ch_m_mier");
                                    $dato['ch_alm'] = $this->input->post("ch_alm_mier");
                                    $dato['ch_t'] = $this->input->post("ch_t_mier");
                                    $dato['ch_c'] = $this->input->post("ch_c_mier");
                                    $dato['ch_n'] = $this->input->post("ch_n_mier");
                                    $dato['dia'] = 3;
                                    $dato['ingreso_m'] = $this->input->post("ingreso_m_mier");
                                    $dato['salida_m'] = $this->input->post("salida_m_mier");
                                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mier");
                                    $dato['salida_alm'] = $this->input->post("salida_alm_mier");
                                    $dato['ingreso_t'] = $this->input->post("ingreso_t_mier");
                                    $dato['salida_t'] = $this->input->post("salida_t_mier");
                                    $dato['ingreso_c'] = $this->input->post("ingreso_c_mier");
                                    $dato['salida_c'] = $this->input->post("salida_c_mier");
                                    $dato['ingreso_n'] = $this->input->post("ingreso_n_mier");
                                    $dato['salida_n'] = $this->input->post("salida_n_mier");
                                    $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                                }
                            }
                            if (date('N', strtotime($dato['fecha'])) == 4) {
                                if ($dato['ch_jue'] == 1) {
                                    $dato['ch_m'] = $this->input->post("ch_m_jue");
                                    $dato['ch_alm'] = $this->input->post("ch_alm_jue");
                                    $dato['ch_t'] = $this->input->post("ch_t_jue");
                                    $dato['ch_c'] = $this->input->post("ch_c_jue");
                                    $dato['ch_n'] = $this->input->post("ch_n_jue");
                                    $dato['dia'] = 4;
                                    $dato['ingreso_m'] = $this->input->post("ingreso_m_jue");
                                    $dato['salida_m'] = $this->input->post("salida_m_jue");
                                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_jue");
                                    $dato['salida_alm'] = $this->input->post("salida_alm_jue");
                                    $dato['ingreso_t'] = $this->input->post("ingreso_t_jue");
                                    $dato['salida_t'] = $this->input->post("salida_t_jue");
                                    $dato['ingreso_c'] = $this->input->post("ingreso_c_jue");
                                    $dato['salida_c'] = $this->input->post("salida_c_jue");
                                    $dato['ingreso_n'] = $this->input->post("ingreso_n_jue");
                                    $dato['salida_n'] = $this->input->post("salida_n_jue");
                                    $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                                }
                            }
                            if (date('N', strtotime($dato['fecha'])) == 5) {
                                if ($dato['ch_vie'] == 1) {
                                    $dato['ch_m'] = $this->input->post("ch_m_vie");
                                    $dato['ch_alm'] = $this->input->post("ch_alm_vie");
                                    $dato['ch_t'] = $this->input->post("ch_t_vie");
                                    $dato['ch_c'] = $this->input->post("ch_c_vie");
                                    $dato['ch_n'] = $this->input->post("ch_n_vie");
                                    $dato['dia'] = 5;
                                    $dato['ingreso_m'] = $this->input->post("ingreso_m_vie");
                                    $dato['salida_m'] = $this->input->post("salida_m_vie");
                                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_vie");
                                    $dato['salida_alm'] = $this->input->post("salida_alm_vie");
                                    $dato['ingreso_t'] = $this->input->post("ingreso_t_vie");
                                    $dato['salida_t'] = $this->input->post("salida_t_vie");
                                    $dato['ingreso_c'] = $this->input->post("ingreso_c_vie");
                                    $dato['salida_c'] = $this->input->post("salida_c_vie");
                                    $dato['ingreso_n'] = $this->input->post("ingreso_n_vie");
                                    $dato['salida_n'] = $this->input->post("salida_n_vie");
                                    $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                                }
                            }
                            if (date('N', strtotime($dato['fecha'])) == 6) {
                                if ($dato['ch_sab'] == 1) {
                                    $dato['ch_m'] = $this->input->post("ch_m_sab");
                                    $dato['ch_alm'] = $this->input->post("ch_alm_sab");
                                    $dato['ch_t'] = $this->input->post("ch_t_sab");
                                    $dato['ch_c'] = $this->input->post("ch_c_sab");
                                    $dato['ch_n'] = $this->input->post("ch_n_sab");
                                    $dato['dia'] = 6;
                                    $dato['ingreso_m'] = $this->input->post("ingreso_m_sab");
                                    $dato['salida_m'] = $this->input->post("salida_m_sab");
                                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_sab");
                                    $dato['salida_alm'] = $this->input->post("salida_alm_sab");
                                    $dato['ingreso_t'] = $this->input->post("ingreso_t_sab");
                                    $dato['salida_t'] = $this->input->post("salida_t_sab");
                                    $dato['ingreso_c'] = $this->input->post("ingreso_c_sab");
                                    $dato['salida_c'] = $this->input->post("salida_c_sab");
                                    $dato['ingreso_n'] = $this->input->post("ingreso_n_sab");
                                    $dato['salida_n'] = $this->input->post("salida_n_sab");
                                    $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                                }
                            }
                            if (date('N', strtotime($dato['fecha'])) == 7) {
                                if ($dato['ch_dom'] == 1) {
                                    $dato['ch_m'] = $this->input->post("ch_m_dom");
                                    $dato['ch_alm'] = $this->input->post("ch_alm_dom");
                                    $dato['ch_t'] = $this->input->post("ch_t_dom");
                                    $dato['ch_c'] = $this->input->post("ch_c_dom");
                                    $dato['ch_n'] = $this->input->post("ch_n_dom");
                                    $dato['dia'] = 7;
                                    $dato['ingreso_m'] = $this->input->post("ingreso_m_dom");
                                    $dato['salida_m'] = $this->input->post("salida_m_dom");
                                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_dom");
                                    $dato['salida_alm'] = $this->input->post("salida_alm_dom");
                                    $dato['ingreso_t'] = $this->input->post("ingreso_t_dom");
                                    $dato['salida_t'] = $this->input->post("salida_t_dom");
                                    $dato['ingreso_c'] = $this->input->post("ingreso_c_dom");
                                    $dato['salida_c'] = $this->input->post("salida_c_dom");
                                    $dato['ingreso_n'] = $this->input->post("ingreso_n_dom");
                                    $dato['salida_n'] = $this->input->post("salida_n_dom");
                                    $this->Model_IFV->insert_dia_marcaciones_docente_ifv($dato);
                                }
                            }
                        }
                        $fecha_actual = strtotime('+1 day', $fecha_actual);
                    }
                }
                //------

            }
        } else {
            redirect('/login');
        }
    }

    public function Update_Horario_Colaborador_V2()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario'] = $this->input->post("id_horario");
            $dato['id_colaborador'] = $this->input->post("id_colaborador");
            $dato['de'] = $this->input->post("de");
            $dato['a'] = $this->input->post("a");
            $dato['ch_lun'] = $this->input->post("ch_lun");
            $dato['ch_mar'] = $this->input->post("ch_mar");
            $dato['ch_mier'] = $this->input->post("ch_mier");
            $dato['ch_jue'] = $this->input->post("ch_jue");
            $dato['ch_vie'] = $this->input->post("ch_vie");
            $dato['ch_sab'] = $this->input->post("ch_sab");
            $dato['ch_dom'] = $this->input->post("ch_dom");
            $dato['estado_registro'] = $this->input->post("estado_registro");

            $dato['get_id'] = $this->Model_IFV->get_id_horario_colaborador_v2($dato['id_horario']);
            $dato['cod_horario'] = $dato['get_id'][0]['cod_horario'];

            if ($dato['estado_registro'] == 1) {
                $cant = $this->Model_IFV->valida_horario_colaborador_v2($dato);
                if ($cant[0]['cantidad'] > 0) {
                    echo "1Existe un horario activo";
                } else {
                    $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_lun");
                    $dato['dia'] = 1;
                    if ($dato['ch_lun'] == 1) {
                        $dato['ch_m'] = $this->input->post("ch_m_lun");
                        $dato['ch_alm'] = $this->input->post("ch_alm_lun");
                        $dato['ch_t'] = $this->input->post("ch_t_lun");
                        $dato['ch_c'] = $this->input->post("ch_c_lun");
                        $dato['ch_n'] = $this->input->post("ch_n_lun");
                        $dato['ingreso_m'] = $this->input->post("ingreso_m_lun");
                        $dato['salida_m'] = $this->input->post("salida_m_lun");
                        $dato['ingreso_alm'] = $this->input->post("ingreso_alm_lun");
                        $dato['salida_alm'] = $this->input->post("salida_alm_lun");
                        $dato['ingreso_t'] = $this->input->post("ingreso_t_lun");
                        $dato['salida_t'] = $this->input->post("salida_t_lun");
                        $dato['ingreso_c'] = $this->input->post("ingreso_c_lun");
                        $dato['salida_c'] = $this->input->post("salida_c_lun");
                        $dato['ingreso_n'] = $this->input->post("ingreso_n_lun");
                        $dato['salida_n'] = $this->input->post("salida_n_lun");
                        if ($dato['id_horario_detalle'] != "") {
                            $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                        } else {
                            $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                        }
                    } else {
                        $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                    }

                    $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_mar");
                    $dato['dia'] = 2;

                    if ($dato['ch_mar'] == 1) {
                        $dato['ch_m'] = $this->input->post("ch_m_mar");
                        $dato['ch_alm'] = $this->input->post("ch_alm_mar");
                        $dato['ch_t'] = $this->input->post("ch_t_mar");
                        $dato['ch_c'] = $this->input->post("ch_c_mar");
                        $dato['ch_n'] = $this->input->post("ch_n_mar");
                        $dato['ingreso_m'] = $this->input->post("ingreso_m_mar");
                        $dato['salida_m'] = $this->input->post("salida_m_mar");
                        $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mar");
                        $dato['salida_alm'] = $this->input->post("salida_alm_mar");
                        $dato['ingreso_t'] = $this->input->post("ingreso_t_mar");
                        $dato['salida_t'] = $this->input->post("salida_t_mar");
                        $dato['ingreso_c'] = $this->input->post("ingreso_c_mar");
                        $dato['salida_c'] = $this->input->post("salida_c_mar");
                        $dato['ingreso_n'] = $this->input->post("ingreso_n_mar");
                        $dato['salida_n'] = $this->input->post("salida_n_mar");
                        if ($dato['id_horario_detalle'] != "") {
                            $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                        } else {
                            $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                        }
                    } else {
                        $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                    }

                    $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_mier");
                    $dato['dia'] = 3;

                    if ($dato['ch_mier'] == 1) {
                        $dato['ch_m'] = $this->input->post("ch_m_mier");
                        $dato['ch_alm'] = $this->input->post("ch_alm_mier");
                        $dato['ch_t'] = $this->input->post("ch_t_mier");
                        $dato['ch_c'] = $this->input->post("ch_c_mier");
                        $dato['ch_n'] = $this->input->post("ch_n_mier");
                        $dato['ingreso_m'] = $this->input->post("ingreso_m_mier");
                        $dato['salida_m'] = $this->input->post("salida_m_mier");
                        $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mier");
                        $dato['salida_alm'] = $this->input->post("salida_alm_mier");
                        $dato['ingreso_t'] = $this->input->post("ingreso_t_mier");
                        $dato['salida_t'] = $this->input->post("salida_t_mier");
                        $dato['ingreso_c'] = $this->input->post("ingreso_c_mier");
                        $dato['salida_c'] = $this->input->post("salida_c_mier");
                        $dato['ingreso_n'] = $this->input->post("ingreso_n_mier");
                        $dato['salida_n'] = $this->input->post("salida_n_mier");
                        if ($dato['id_horario_detalle'] != "") {
                            $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                        } else {
                            $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                        }
                    } else {
                        $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                    }

                    $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_jue");
                    $dato['dia'] = 4;

                    if ($dato['ch_jue'] == 1) {
                        $dato['ch_m'] = $this->input->post("ch_m_jue");
                        $dato['ch_alm'] = $this->input->post("ch_alm_jue");
                        $dato['ch_t'] = $this->input->post("ch_t_jue");
                        $dato['ch_c'] = $this->input->post("ch_c_jue");
                        $dato['ch_n'] = $this->input->post("ch_n_jue");
                        $dato['ingreso_m'] = $this->input->post("ingreso_m_jue");
                        $dato['salida_m'] = $this->input->post("salida_m_jue");
                        $dato['ingreso_alm'] = $this->input->post("ingreso_alm_jue");
                        $dato['salida_alm'] = $this->input->post("salida_alm_jue");
                        $dato['ingreso_t'] = $this->input->post("ingreso_t_jue");
                        $dato['salida_t'] = $this->input->post("salida_t_jue");
                        $dato['ingreso_c'] = $this->input->post("ingreso_c_jue");
                        $dato['salida_c'] = $this->input->post("salida_c_jue");
                        $dato['ingreso_n'] = $this->input->post("ingreso_n_jue");
                        $dato['salida_n'] = $this->input->post("salida_n_jue");
                        if ($dato['id_horario_detalle'] != "") {
                            $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                        } else {
                            $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                        }
                    } else {
                        $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                    }

                    $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_vie");
                    $dato['dia'] = 5;

                    if ($dato['ch_vie'] == 1) {
                        $dato['ch_m'] = $this->input->post("ch_m_vie");
                        $dato['ch_alm'] = $this->input->post("ch_alm_vie");
                        $dato['ch_t'] = $this->input->post("ch_t_vie");
                        $dato['ch_c'] = $this->input->post("ch_c_vie");
                        $dato['ch_n'] = $this->input->post("ch_n_vie");
                        $dato['ingreso_m'] = $this->input->post("ingreso_m_vie");
                        $dato['salida_m'] = $this->input->post("salida_m_vie");
                        $dato['ingreso_alm'] = $this->input->post("ingreso_alm_vie");
                        $dato['salida_alm'] = $this->input->post("salida_alm_vie");
                        $dato['ingreso_t'] = $this->input->post("ingreso_t_vie");
                        $dato['salida_t'] = $this->input->post("salida_t_vie");
                        $dato['ingreso_c'] = $this->input->post("ingreso_c_vie");
                        $dato['salida_c'] = $this->input->post("salida_c_vie");
                        $dato['ingreso_n'] = $this->input->post("ingreso_n_vie");
                        $dato['salida_n'] = $this->input->post("salida_n_vie");
                        if ($dato['id_horario_detalle'] != "") {
                            $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                        } else {
                            $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                        }
                    } else {
                        $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                    }

                    $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_sab");
                    $dato['dia'] = 6;

                    if ($dato['ch_sab'] == 1) {
                        $dato['ch_m'] = $this->input->post("ch_m_sab");
                        $dato['ch_alm'] = $this->input->post("ch_alm_sab");
                        $dato['ch_t'] = $this->input->post("ch_t_sab");
                        $dato['ch_c'] = $this->input->post("ch_c_sab");
                        $dato['ch_n'] = $this->input->post("ch_n_sab");
                        $dato['ingreso_m'] = $this->input->post("ingreso_m_sab");
                        $dato['salida_m'] = $this->input->post("salida_m_sab");
                        $dato['ingreso_alm'] = $this->input->post("ingreso_alm_sab");
                        $dato['salida_alm'] = $this->input->post("salida_alm_sab");
                        $dato['ingreso_t'] = $this->input->post("ingreso_t_sab");
                        $dato['salida_t'] = $this->input->post("salida_t_sab");
                        $dato['ingreso_c'] = $this->input->post("ingreso_c_sab");
                        $dato['salida_c'] = $this->input->post("salida_c_sab");
                        $dato['ingreso_n'] = $this->input->post("ingreso_n_sab");
                        $dato['salida_n'] = $this->input->post("salida_n_sab");
                        if ($dato['id_horario_detalle'] != "") {
                            $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                        } else {
                            $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                        }
                    } else {
                        $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                    }

                    $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_dom");
                    $dato['dia'] = 7;

                    if ($dato['ch_dom'] == 1) {
                        $dato['ch_m'] = $this->input->post("ch_m_dom");
                        $dato['ch_alm'] = $this->input->post("ch_alm_dom");
                        $dato['ch_t'] = $this->input->post("ch_t_dom");
                        $dato['ch_c'] = $this->input->post("ch_c_dom");
                        $dato['ch_n'] = $this->input->post("ch_n_dom");
                        $dato['ingreso_m'] = $this->input->post("ingreso_m_dom");
                        $dato['salida_m'] = $this->input->post("salida_m_dom");
                        $dato['ingreso_alm'] = $this->input->post("ingreso_alm_dom");
                        $dato['salida_alm'] = $this->input->post("salida_alm_dom");
                        $dato['ingreso_t'] = $this->input->post("ingreso_t_dom");
                        $dato['salida_t'] = $this->input->post("salida_t_dom");
                        $dato['ingreso_c'] = $this->input->post("ingreso_c_dom");
                        $dato['salida_c'] = $this->input->post("salida_c_dom");
                        $dato['ingreso_n'] = $this->input->post("ingreso_n_dom");
                        $dato['salida_n'] = $this->input->post("salida_n_dom");
                        if ($dato['id_horario_detalle'] != "") {
                            $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                        } else {
                            $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                        }
                    } else {
                        $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                    }

                    $this->Model_IFV->update_horario_colaborador_v2($dato);
                }
            } else {
                $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_lun");
                $dato['dia'] = 1;
                if ($dato['ch_lun'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_lun");
                    $dato['ch_alm'] = $this->input->post("ch_alm_lun");
                    $dato['ch_t'] = $this->input->post("ch_t_lun");
                    $dato['ch_c'] = $this->input->post("ch_c_lun");
                    $dato['ch_n'] = $this->input->post("ch_n_lun");
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_lun");
                    $dato['salida_m'] = $this->input->post("salida_m_lun");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_lun");
                    $dato['salida_alm'] = $this->input->post("salida_alm_lun");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_lun");
                    $dato['salida_t'] = $this->input->post("salida_t_lun");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_lun");
                    $dato['salida_c'] = $this->input->post("salida_c_lun");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_lun");
                    $dato['salida_n'] = $this->input->post("salida_n_lun");
                    if ($dato['id_horario_detalle'] != "") {
                        $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                    } else {
                        $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                    }
                } else {
                    $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                }

                $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_mar");
                $dato['dia'] = 2;

                if ($dato['ch_mar'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_mar");
                    $dato['ch_alm'] = $this->input->post("ch_alm_mar");
                    $dato['ch_t'] = $this->input->post("ch_t_mar");
                    $dato['ch_c'] = $this->input->post("ch_c_mar");
                    $dato['ch_n'] = $this->input->post("ch_n_mar");
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_mar");
                    $dato['salida_m'] = $this->input->post("salida_m_mar");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mar");
                    $dato['salida_alm'] = $this->input->post("salida_alm_mar");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_mar");
                    $dato['salida_t'] = $this->input->post("salida_t_mar");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_mar");
                    $dato['salida_c'] = $this->input->post("salida_c_mar");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_mar");
                    $dato['salida_n'] = $this->input->post("salida_n_mar");
                    if ($dato['id_horario_detalle'] != "") {
                        $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                    } else {
                        $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                    }
                } else {
                    $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                }

                $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_mier");
                $dato['dia'] = 3;

                if ($dato['ch_mier'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_mier");
                    $dato['ch_alm'] = $this->input->post("ch_alm_mier");
                    $dato['ch_t'] = $this->input->post("ch_t_mier");
                    $dato['ch_c'] = $this->input->post("ch_c_mier");
                    $dato['ch_n'] = $this->input->post("ch_n_mier");
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_mier");
                    $dato['salida_m'] = $this->input->post("salida_m_mier");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_mier");
                    $dato['salida_alm'] = $this->input->post("salida_alm_mier");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_mier");
                    $dato['salida_t'] = $this->input->post("salida_t_mier");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_mier");
                    $dato['salida_c'] = $this->input->post("salida_c_mier");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_mier");
                    $dato['salida_n'] = $this->input->post("salida_n_mier");
                    if ($dato['id_horario_detalle'] != "") {
                        $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                    } else {
                        $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                    }
                } else {
                    $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                }

                $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_jue");
                $dato['dia'] = 4;

                if ($dato['ch_jue'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_jue");
                    $dato['ch_alm'] = $this->input->post("ch_alm_jue");
                    $dato['ch_t'] = $this->input->post("ch_t_jue");
                    $dato['ch_c'] = $this->input->post("ch_c_jue");
                    $dato['ch_n'] = $this->input->post("ch_n_jue");
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_jue");
                    $dato['salida_m'] = $this->input->post("salida_m_jue");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_jue");
                    $dato['salida_alm'] = $this->input->post("salida_alm_jue");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_jue");
                    $dato['salida_t'] = $this->input->post("salida_t_jue");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_jue");
                    $dato['salida_c'] = $this->input->post("salida_c_jue");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_jue");
                    $dato['salida_n'] = $this->input->post("salida_n_jue");
                    if ($dato['id_horario_detalle'] != "") {
                        $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                    } else {
                        $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                    }
                } else {
                    $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                }

                $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_vie");
                $dato['dia'] = 5;

                if ($dato['ch_vie'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_vie");
                    $dato['ch_alm'] = $this->input->post("ch_alm_vie");
                    $dato['ch_t'] = $this->input->post("ch_t_vie");
                    $dato['ch_c'] = $this->input->post("ch_c_vie");
                    $dato['ch_n'] = $this->input->post("ch_n_vie");
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_vie");
                    $dato['salida_m'] = $this->input->post("salida_m_vie");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_vie");
                    $dato['salida_alm'] = $this->input->post("salida_alm_vie");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_vie");
                    $dato['salida_t'] = $this->input->post("salida_t_vie");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_vie");
                    $dato['salida_c'] = $this->input->post("salida_c_vie");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_vie");
                    $dato['salida_n'] = $this->input->post("salida_n_vie");
                    if ($dato['id_horario_detalle'] != "") {
                        $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                    } else {
                        $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                    }
                } else {
                    $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                }

                $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_sab");
                $dato['dia'] = 6;

                if ($dato['ch_sab'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_sab");
                    $dato['ch_alm'] = $this->input->post("ch_alm_sab");
                    $dato['ch_t'] = $this->input->post("ch_t_sab");
                    $dato['ch_c'] = $this->input->post("ch_c_sab");
                    $dato['ch_n'] = $this->input->post("ch_n_sab");
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_sab");
                    $dato['salida_m'] = $this->input->post("salida_m_sab");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_sab");
                    $dato['salida_alm'] = $this->input->post("salida_alm_sab");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_sab");
                    $dato['salida_t'] = $this->input->post("salida_t_sab");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_sab");
                    $dato['salida_c'] = $this->input->post("salida_c_sab");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_sab");
                    $dato['salida_n'] = $this->input->post("salida_n_sab");
                    if ($dato['id_horario_detalle'] != "") {
                        $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                    } else {
                        $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                    }
                } else {
                    $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                }

                $dato['id_horario_detalle'] = $this->input->post("id_horario_detalle_dom");
                $dato['dia'] = 7;

                if ($dato['ch_dom'] == 1) {
                    $dato['ch_m'] = $this->input->post("ch_m_dom");
                    $dato['ch_alm'] = $this->input->post("ch_alm_dom");
                    $dato['ch_t'] = $this->input->post("ch_t_dom");
                    $dato['ch_c'] = $this->input->post("ch_c_dom");
                    $dato['ch_n'] = $this->input->post("ch_n_dom");
                    $dato['ingreso_m'] = $this->input->post("ingreso_m_dom");
                    $dato['salida_m'] = $this->input->post("salida_m_dom");
                    $dato['ingreso_alm'] = $this->input->post("ingreso_alm_dom");
                    $dato['salida_alm'] = $this->input->post("salida_alm_dom");
                    $dato['ingreso_t'] = $this->input->post("ingreso_t_dom");
                    $dato['salida_t'] = $this->input->post("salida_t_dom");
                    $dato['ingreso_c'] = $this->input->post("ingreso_c_dom");
                    $dato['salida_c'] = $this->input->post("salida_c_dom");
                    $dato['ingreso_n'] = $this->input->post("ingreso_n_dom");
                    $dato['salida_n'] = $this->input->post("salida_n_dom");
                    if ($dato['id_horario_detalle'] != "") {
                        $this->Model_IFV->update_horario_detalle_colaborador_v2($dato);
                    } else {
                        $this->Model_IFV->insert_horario_detalle_colaborador_v2($dato);
                    }
                } else {
                    $this->Model_IFV->delete_horario_detalle_colaborador_v2($dato);
                }

                $this->Model_IFV->update_horario_colaborador_v2($dato);
            }

        } else {
            redirect('/login');
        }
    }

    public function List_Horario_Colaborador_V2($id_colaborador)
    {
        if ($this->session->userdata('usuario')) {

            $dato['list_horario'] = $this->Model_IFV->list_horario_colaborador_v2($id_colaborador);

            $this->load->view('view_IFV/colaborador/lista_horario_v2', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Horario_Colabordor_V2()
    {
        $dato['id_horario'] = $this->input->post("id_horario");
        $this->Model_IFV->delete_horario_colaborador_v2($dato);
    }

    //horario academico
    public function Horario_Academico()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/horario_academico/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Horario_Academico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_horario'] = $this->Model_IFV->get_list_horario_academico();
            $this->load->view('view_IFV/horario_academico/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Horario_Academico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo();
            $this->load->view('view_IFV/horario_academico/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Horario_Academico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['turno'] = $this->input->post("turno");
            $dato['desde'] = $this->input->post("desde");
            $dato['hasta'] = $this->input->post("hasta");
            $dato['id_horario_acad'] = "";
            $valida = $this->Model_IFV->valida_horario_academico($dato);
            if ($valida[0]['cantidad'] > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_horario_academico($dato);
            }

        } else {
            redirect('/login');
        }
    }

    public function Modal_Update_Horario_Academico($id_horario)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_horario_academico($id_horario);
            $this->load->view('view_IFV/horario_academico/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Horario_Academico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario_acad'] = $this->input->post("id_horario_acad");
            $dato['turno'] = $this->input->post("turnoe");
            $dato['desde'] = $this->input->post("desdee");
            $dato['hasta'] = $this->input->post("hastae");
            $valida = $this->Model_IFV->valida_horario_academico($dato);
            if ($valida[0]['cantidad'] > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_horario_academico($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_Horario_Academico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_horario_acad'] = $this->input->post("id_horario_acad");
            $this->Model_IFV->delete_horario_academico($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Horario_Academico()
    {
        $data = $this->Model_IFV->get_list_horario_academico();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:B1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:B1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Horario Academico');

        $sheet->setAutoFilter('A1:B1');

        $sheet->getColumnDimension('A')->setWidth(10);
        $sheet->getColumnDimension('B')->setWidth(15);

        $sheet->getStyle('A1:B1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:B1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:B1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Turno');
        $sheet->setCellValue("B1", 'Horario');

        $contador = 1;

        foreach ($data as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_turno']);
            $sheet->setCellValue("B{$contador}", $list['horario']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Horario Academico (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------PÚBLICO-----------------------------------------
    public function Publico()
    {
        if ($this->session->userdata('usuario')) {
            if ($_SESSION['usuario'][0]['id_nivel'] != 15) {
                $dato['get_datos_publico'] = $this->Model_IFV->get_datos_publico();
            }

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/publico/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['parametro'] = $this->input->post('parametro');
            $dato['anio'] = $this->input->post('anio');
            $dato['list_publico'] = $this->Model_IFV->get_list_publico($dato['parametro'], $dato['anio']);
            $dato['list_anio'] = $this->Model_IFV->get_list_anio();
            $this->load->view('view_IFV/publico/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_publico();
            $dato['list_departamento'] = $this->Model_IFV->get_list_departamento();
            $dato['list_producto_interes'] = $this->Model_IFV->get_list_producto_interes();

            $totalRows_t = count($this->Model_IFV->get_cant_publico());
            $anio = date('Y');
            $aniof = substr($anio, 2, 2);

            if ($totalRows_t < 9) {
                $codigo = $aniof . "000" . ($totalRows_t + 1);
            }
            if ($totalRows_t > 8 && $totalRows_t < 99) {
                $codigo = $aniof . "00" . ($totalRows_t + 1);
            }
            if ($totalRows_t > 98 && $totalRows_t < 999) {
                $codigo = $aniof . "0" . ($totalRows_t + 1);
            }
            if ($totalRows_t > 998) {
                $codigo = $aniof . ($totalRows_t + 1);
            }

            $dato['codigo'] = $codigo;

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/publico/registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Muestra_Provincia()
    {
        if ($this->session->userdata('usuario')) {
            $id_departamento = $this->input->post("id_departamento");
            $dato['list_provincia'] = $this->Model_IFV->get_list_provincia($id_departamento);
            $this->load->view('view_IFV/publico/provincia', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Muestra_Distrito()
    {
        if ($this->session->userdata('usuario')) {
            $id_provincia = $this->input->post("id_provincia");
            $dato['list_distrito'] = $this->Model_IFV->get_list_distrito($id_provincia);
            $this->load->view('view_IFV/publico/distrito', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['dni'] = $this->input->post("n_documento");
            $dato['contacto1'] = $this->input->post("contacto1");
            $dato['correo'] = trim($this->input->post("correo"));

            $validar = count($this->Model_IFV->valida_insert_publico($dato));

            if ($validar > 0) {
                echo "error";
            } else {
                $totalRows_t = count($this->Model_IFV->get_cant_publico());
                $anio = date('Y');
                $aniof = substr($anio, 2, 2);

                if ($totalRows_t < 9) {
                    $codigo = $aniof . "000" . ($totalRows_t + 1);
                }
                if ($totalRows_t > 8 && $totalRows_t < 99) {
                    $codigo = $aniof . "00" . ($totalRows_t + 1);
                }
                if ($totalRows_t > 98 && $totalRows_t < 999) {
                    $codigo = $aniof . "0" . ($totalRows_t + 1);
                }
                if ($totalRows_t > 998) {
                    $codigo = $aniof . ($totalRows_t + 1);
                }

                $cod_registro = $codigo;

                $dato['cod_publico'] = $cod_registro;
                $dato['id_tipo'] = $this->input->post("id_tipo");
                $dato['nombres_apellidos'] = trim($this->input->post("nombres_apellidos"));
                $dato['contacto2'] = $this->input->post("contacto2");
                $dato['id_departamento'] = $this->input->post("id_departamento");
                $dato['id_provincia'] = $this->input->post("id_provincia");
                $dato['id_distrito'] = $this->input->post("id_distrito");
                $dato['facebook'] = $this->input->post("facebook");
                $dato['duplicado'] = $this->input->post("duplicado");
                $dato['mailing'] = $this->input->post("mailing");
                $dato['id_producto_interes'] = $this->input->post("id_producto_interes");
                $dato['comentario'] = $this->input->post("comentario");
                $dato['observacion'] = $this->input->post("observacion");

                $this->Model_IFV->insert_publico($dato);

                $ultimo = $this->Model_IFV->ultimo_id_publico();
                $dato['id_publico'] = $ultimo[0]['id_publico'];

                $this->Model_IFV->insert_historial_publico($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Excel_Publico($parametro, $anio)
    {
        $list_publico = $this->Model_IFV->get_list_publico($parametro, $anio);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:S1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:S1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Público');

        $sheet->setAutoFilter('A1:S1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(10);
        $sheet->getColumnDimension('C')->setWidth(18);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(50);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(18);
        $sheet->getColumnDimension('H')->setWidth(25);
        $sheet->getColumnDimension('I')->setWidth(25);
        $sheet->getColumnDimension('J')->setWidth(25);
        $sheet->getColumnDimension('K')->setWidth(15);
        $sheet->getColumnDimension('L')->setWidth(30);
        $sheet->getColumnDimension('M')->setWidth(30);
        $sheet->getColumnDimension('N')->setWidth(30);
        $sheet->getColumnDimension('O')->setWidth(20);
        $sheet->getColumnDimension('P')->setWidth(15);
        $sheet->getColumnDimension('Q')->setWidth(15);
        $sheet->getColumnDimension('R')->setWidth(20);
        $sheet->getColumnDimension('S')->setWidth(60);

        $sheet->getStyle('A1:S1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:S1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:S1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Referencia');
        $sheet->setCellValue("B1", 'Dp');
        $sheet->setCellValue("C1", 'Tipo');
        $sheet->setCellValue("D1", 'Usuario');
        $sheet->setCellValue("E1", 'Nombres y Apellidos');
        $sheet->setCellValue("F1", 'DNI');
        $sheet->setCellValue("G1", 'Contacto 1');
        $sheet->setCellValue("H1", 'Departamento');
        $sheet->setCellValue("I1", 'Provincia');
        $sheet->setCellValue("J1", 'Distrito');
        $sheet->setCellValue("K1", 'Contacto 2');
        $sheet->setCellValue("L1", 'Correo');
        $sheet->setCellValue("M1", 'Facebook');
        $sheet->setCellValue("N1", 'Interés');
        $sheet->setCellValue("O1", 'Acción');
        $sheet->setCellValue("P1", 'Fecha');
        $sheet->setCellValue("Q1", 'Usuario');
        $sheet->setCellValue("R1", 'Status');
        $sheet->setCellValue("S1", 'Comentario');

        $contador = 1;

        foreach ($list_publico as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:S{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:S{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("H{$contador}:J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("L{$contador}:O{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("Q{$contador}:S{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:S{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['cod_publico']);
            $sheet->setCellValue("B{$contador}", $list['duplicado']);
            $sheet->setCellValue("C{$contador}", $list['nom_tipo']);
            $sheet->setCellValue("D{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("E{$contador}", $list['nombres_apellidos']);
            $sheet->setCellValue("F{$contador}", $list['dni']);
            $sheet->setCellValue("G{$contador}", $list['contacto1']);
            $sheet->setCellValue("H{$contador}", $list['nombre_departamento']);
            $sheet->setCellValue("I{$contador}", $list['nombre_provincia']);
            $sheet->setCellValue("J{$contador}", $list['nombre_distrito']);
            $sheet->setCellValue("K{$contador}", $list['contacto2']);
            $sheet->setCellValue("L{$contador}", $list['correo']);
            $sheet->setCellValue("M{$contador}", $list['facebook']);
            $sheet->setCellValue("N{$contador}", $list['nom_producto_interes']);
            $sheet->setCellValue("O{$contador}", $list['nom_accion']);
            $sheet->setCellValue("P{$contador}", Date::PHPToExcel($list['fecha_h']));
            $sheet->getStyle("P{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("Q{$contador}", $list['usuario_h']);
            $sheet->setCellValue("R{$contador}", $list['nom_status']);
            $sheet->setCellValue("S{$contador}", $list['comentario']);

            if ($list['duplicado'] == 1) {
                $spreadsheet->getActiveSheet()->getStyle("A{$contador}:S{$contador}")->getFill()
                    ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
                    ->getStartColor()->setARGB('F8FF91');
            }
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Público (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Historial_Publico($id_publico)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_publico($id_publico);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/publico/historial', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Historial_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_publico'] = $this->input->post('id_publico');
            $dato['list_historial'] = $this->Model_IFV->get_list_historial_publico($dato['id_publico']);
            $this->load->view('view_IFV/publico/lista_historial', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Editar_Publico($id_publico)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_publico($id_publico);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_publico();
            $dato['list_departamento'] = $this->Model_IFV->get_list_departamento();
            $dato['list_provincia'] = $this->Model_IFV->get_list_provincia($dato['get_id'][0]['id_departamento']);
            $dato['list_distrito'] = $this->Model_IFV->get_list_distrito($dato['get_id'][0]['id_provincia']);
            $dato['list_producto_interes'] = $this->Model_IFV->get_list_producto_interes();

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/publico/editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_publico'] = $this->input->post("id_publico");
            $dato['dni'] = $this->input->post("n_documento");
            $dato['contacto1'] = $this->input->post("contacto1");
            $dato['correo'] = trim($this->input->post("correo"));

            $validar = count($this->Model_IFV->valida_update_publico($dato));

            if ($validar > 0) {
                echo "error";
            } else {
                $dato['id_tipo'] = $this->input->post("id_tipo");
                $dato['nombres_apellidos'] = trim($this->input->post("nombres_apellidos"));
                $dato['contacto2'] = $this->input->post("contacto2");
                $dato['id_departamento'] = $this->input->post("id_departamento");
                $dato['id_provincia'] = $this->input->post("id_provincia");
                $dato['id_distrito'] = $this->input->post("id_distrito");
                $dato['facebook'] = $this->input->post("facebook");
                $dato['mailing'] = $this->input->post("mailing");
                $dato['id_producto_interes'] = $this->input->post("id_producto_interes");

                $this->Model_IFV->update_publico($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Historial_Publico($id_publico)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_publico($id_publico);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_publico();
            $dato['list_accion'] = $this->Model_IFV->get_list_accion_publico();
            $this->load->view('view_IFV/publico/modal_historial', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Muestra_Estado()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_accion'] = $this->input->post("id_accion");
            $dato['list_estado'] = $this->Model_IFV->get_list_accion_estado($dato['id_accion']);
            $this->load->view('view_IFV/publico/estado', $dato);
        } else {
            redirect('');
        }
    }

    public function Insert_Historial_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_publico'] = $this->input->post("id_publico");
            $dato['fecha_accion'] = $this->input->post("fecha_accion_i");
            $dato['comentario1'] = $this->input->post("comentario1_i");
            $dato['observacion'] = $this->input->post("observacion_i");
            $dato['id_tipo'] = $this->input->post("id_tipo_i");
            $dato['id_accion'] = $this->input->post("id_accion_i");
            $dato['estado_h'] = $this->input->post("estado_h_i");
            $dato['ultimo_comentario'] = $this->input->post("ultimo_comentario");
            $this->Model_IFV->insert_historial_registro_mail($dato);
        } else {
            redirect('');
        }
    }

    public function Modal_Update_Historial_Publico($id_historial)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_historial_publico($id_historial);
            $dato['list_tipo'] = $this->Model_IFV->get_list_tipo_publico();
            $dato['list_accion'] = $this->Model_IFV->get_list_accion_publico();
            $dato['list_estado'] = $this->Model_IFV->get_list_accion_estado($dato['get_id'][0]['id_accion']);
            $this->load->view('view_IFV/publico/modal_update_historial', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Historial_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_historial'] = $this->input->post("id_historial");
            $dato['id_publico'] = $this->input->post("id_publico");
            $dato['fecha_accion'] = $this->input->post("fecha_accion_u");
            $dato['comentario'] = $this->input->post("comentario1_u");
            $dato['observacion'] = $this->input->post("observacion_u");
            $dato['id_tipo'] = $this->input->post("id_tipo_u");
            $dato['id_accion'] = $this->input->post("id_accion_u");
            $dato['estado_h'] = $this->input->post("estado_h_u");
            $dato['ultimo_comentario'] = $this->input->post("ultimo_comentario");
            $this->Model_IFV->update_historial_publico($dato);
        } else {
            redirect('/login');
        }
    }

    public function Delete_Historial_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_historial'] = $this->input->post("id_historial");
            $this->Model_IFV->delete_historial_publico($dato);
        } else {
            redirect('/login');
        }
    }

    public function Duplicar_Registro()
    {
        if ($this->session->userdata('usuario')) {
            $cadena = substr($this->input->post("cadena"), 0, -1);
            $cantidad = $this->input->post("cantidad");

            if ($cantidad > 0) {
                $array = explode(",", $cadena);
                $i = 0;

                while ($i < count($array)) {
                    $dato['id_publico'] = $array[$i];
                    $this->Model_IFV->insert_publico_duplicado($dato);

                    $ultimo = $this->Model_IFV->ultimo_id_publico();
                    $dato['ultimo_id_publico'] = $ultimo[0]['id_publico'];

                    $this->Model_IFV->insert_historial_publico_duplicado($dato);
                    $i++;
                }
            }
        } else {
            redirect('/login');
        }
    }

    public function Modal_Registro_Mail_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $this->load->view('view_IFV/publico/modal_mailing');
        } else {
            redirect('/login');
        }
    }

    public function Plantilla_Mailing()
    {
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Plantilla Mailing');

        $sheet->getColumnDimension('A')->setWidth(15);

        $sheet->getStyle('A1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Correos');

        $writer = new Xlsx($spreadsheet);
        $filename = 'Plantilla Mailing';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Insert_Registro_Mail_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['fecha_accion'] = $this->input->post("fecha_envio_m");
            $dato['observacion'] = $this->input->post("observacion_m");

            $path = $_FILES["archivo_m"]["tmp_name"];
            $object = IOFactory::load($path);

            foreach ($object->getWorksheetIterator() as $worksheet) {
                $highestRow = $worksheet->getHighestRow();
                $highestColumn = $worksheet->getHighestColumn();
                for ($row = 2; $row <= $highestRow; $row++) {
                    $dato['correo'] = $worksheet->getCellByColumnAndRow(1, $row)->getValue();

                    if ($dato['correo'] == "") {
                        break;
                    }
                }
            }

            if ($row == 2) {
                echo "error";
            } else {
                foreach ($object->getWorksheetIterator() as $worksheet) {
                    $highestRow = $worksheet->getHighestRow();
                    $highestColumn = $worksheet->getHighestColumn();
                    for ($row = 2; $row <= $highestRow; $row++) {
                        $dato['correo'] = $worksheet->getCellByColumnAndRow(1, $row)->getValue();

                        if ($dato['correo'] == "") {
                            break;
                        }

                        $validar = $this->Model_IFV->get_list_correo_registro($dato['correo']);

                        if (count($validar) > 0) {
                            foreach ($validar as $list) {
                                $dato['id_publico'] = $list['id_publico'];
                                $dato['comentario'] = $list['comentario'];
                                $this->Model_IFV->insert_historial_publico_mailing($dato);
                            }
                        }
                    }
                }
            }
        } else {
            redirect('/login');
        }
    }

    public function Excel_Vacio_Publico()
    {
        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:M1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:M1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Excel Vacío Público');

        $sheet->setAutoFilter('A1:M1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(12);
        $sheet->getColumnDimension('D')->setWidth(25);
        $sheet->getColumnDimension('E')->setWidth(22);
        $sheet->getColumnDimension('F')->setWidth(20);
        $sheet->getColumnDimension('G')->setWidth(20);
        $sheet->getColumnDimension('H')->setWidth(20);
        $sheet->getColumnDimension('I')->setWidth(18);
        $sheet->getColumnDimension('J')->setWidth(15);
        $sheet->getColumnDimension('K')->setWidth(18);
        $sheet->getColumnDimension('L')->setWidth(30);
        $sheet->getColumnDimension('M')->setWidth(30);

        $sheet->getStyle('A1:M1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:M1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:M1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->getStyle("A2:M3")->getFont()->getColor()->setRGB('FF0000');

        $sheet->setCellValue("A1", 'Tipo');
        $sheet->setCellValue("B1", 'Nombres y Apellidos');
        $sheet->setCellValue("C1", 'DNI');
        $sheet->setCellValue("D1", 'Contacto Principal');
        $sheet->setCellValue("E1", 'Contacto 2');
        $sheet->setCellValue("F1", 'Departamento');
        $sheet->setCellValue("G1", 'Provincia');
        $sheet->setCellValue("H1", 'Distrito');
        $sheet->setCellValue("I1", 'Correo');
        $sheet->setCellValue("J1", 'Facebook');
        $sheet->setCellValue("K1", 'Intereses');
        $sheet->setCellValue("L1", 'Comentario');
        $sheet->setCellValue("M1", 'Observaciones');

        $sheet->setCellValue("A2", 'Promoción 2022');
        $sheet->setCellValue("B2", 'Armando Paredes Verdes');
        $sheet->setCellValue("C2", '12345678');
        $sheet->setCellValue("D2", '987654321');
        $sheet->setCellValue("E2", '918299804');
        $sheet->setCellValue("F2", 'Lima');
        $sheet->setCellValue("G2", 'Lima');
        $sheet->setCellValue("H2", 'Lurin');
        $sheet->setCellValue("I2", 'armando_paredes_verdes@gmail.com');
        $sheet->setCellValue("J2", 'Armando Paredes');
        $sheet->setCellValue("K2", '(SI) Sistemas Inf.');
        $sheet->setCellValue("L2", 'Aquí va el comentario');
        $sheet->setCellValue("M2", 'Aquí van las observaciones');

        $sheet->setCellValue("A3", 'Promoción 2023');
        $sheet->setCellValue("B3", 'Fabio Blanco Huerta');
        $sheet->setCellValue("C3", '87654321');
        $sheet->setCellValue("D3", '963258741');
        $sheet->setCellValue("E3", '951741289');
        $sheet->setCellValue("F3", 'Lima');
        $sheet->setCellValue("G3", 'Canta');
        $sheet->setCellValue("H3", 'Canta');
        $sheet->setCellValue("I3", 'fabio_blanco_huerta@gmail.com');
        $sheet->setCellValue("J3", 'Fabio Blanco Huerta');
        $sheet->setCellValue("K3", 'Sin Definir');
        $sheet->setCellValue("L3", 'Aquí va el comentario');
        $sheet->setCellValue("M3", 'Aquí van las observaciones');

        $writer = new Xlsx($spreadsheet);
        $filename = 'Excel Vacío Público';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Validar_Importar_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['archivo_excel'] = $this->input->post("archivo_excel");

            $path = $_FILES["archivo_excel"]["tmp_name"];
            $object = IOFactory::load($path);
            $worksheet = $object->getSheet(0);

            $highestRow = $worksheet->getHighestRow();
            $highestColumn = $worksheet->getHighestColumn();
            for ($row = 2; $row <= $highestRow; $row++) {
                $dato['nom_tipo'] = trim($worksheet->getCellByColumnAndRow(1, $row)->getValue());
                $dato['nombres_apellidos'] = trim($worksheet->getCellByColumnAndRow(2, $row)->getValue());
                $dato['dni'] = trim($worksheet->getCellByColumnAndRow(3, $row)->getValue());
                $dato['contacto1'] = trim($worksheet->getCellByColumnAndRow(4, $row)->getValue());
                $dato['contacto2'] = trim($worksheet->getCellByColumnAndRow(5, $row)->getValue());
                $dato['nombre_departamento'] = trim($worksheet->getCellByColumnAndRow(6, $row)->getValue());
                $dato['nombre_provincia'] = trim($worksheet->getCellByColumnAndRow(7, $row)->getValue());
                $dato['nombre_distrito'] = trim($worksheet->getCellByColumnAndRow(8, $row)->getValue());
                $dato['correo'] = trim($worksheet->getCellByColumnAndRow(9, $row)->getValue());
                $dato['facebook'] = trim($worksheet->getCellByColumnAndRow(10, $row)->getValue());
                $dato['nom_producto_interes'] = trim($worksheet->getCellByColumnAndRow(11, $row)->getValue());
                $dato['comentario'] = trim($worksheet->getCellByColumnAndRow(12, $row)->getValue());
                $dato['observacion'] = trim($worksheet->getCellByColumnAndRow(13, $row)->getValue());

                if ($dato['nom_tipo'] == "" && $dato['nombres_apellidos'] == "" && $dato['dni'] == "" &&
                    $dato['contacto1'] == "" && $dato['contacto2'] == "" && $dato['nombre_departamento'] == "" &&
                    $dato['nombre_provincia'] == "" && $dato['nombre_distrito'] == "" && $dato['correo'] == "" &&
                    $dato['facebook'] == "" && $dato['nom_producto_interes'] == "" && $dato['comentario'] == "" &&
                    $dato['observacion'] == "") {
                    break;
                }

                $tipo_publico = count($this->Model_IFV->buscar_tipo_publico($dato['nom_tipo']));
                $departamento = count($this->Model_IFV->buscar_departamento($dato['nombre_departamento']));
                $provincia = count($this->Model_IFV->buscar_provincia($dato['nombre_departamento'], $dato['nombre_provincia']));
                $distrito = count($this->Model_IFV->buscar_distrito($dato['nombre_departamento'], $dato['nombre_provincia'], $dato['nombre_distrito']));
                $producto_interes = count($this->Model_IFV->buscar_producto_interes($dato['nom_producto_interes']));
                $validar = count($this->Model_IFV->valida_insert_publico($dato));

                $dato['v_tipo_publico'] = 0;
                $dato['v_nombres_apellidos'] = 0;
                $dato['v_nombres_apellidos_inv'] = 0;
                $dato['v_numerico_dni'] = 0;
                $dato['v_cantidad_dni'] = 0;
                $dato['v_contacto1'] = 0;
                $dato['v_numerico'] = 0;
                $dato['v_cantidad'] = 0;
                $dato['v_inicial'] = 0;
                $dato['v_nombre_departamento'] = 0;
                $dato['v_nombre_provincia'] = 0;
                $dato['v_nombre_distrito'] = 0;
                $dato['v_correo'] = 0;
                $dato['v_correo_inv'] = 0;
                $dato['v_producto_interes'] = 0;
                $dato['v_comentario'] = 0;
                $dato['v_publico'] = 0;

                if ($validar > 0) {
                    $dato['v_publico'] = 1;
                } else {
                    if ($tipo_publico == 0) {
                        $dato['v_tipo_publico'] = 1;
                    }
                    if ($dato['nombres_apellidos'] == "") {
                        $dato['v_nombres_apellidos'] = 1;
                    } else {
                        if ((substr_count($dato['nombres_apellidos'], 1) + substr_count($dato['nombres_apellidos'], 2) + substr_count($dato['nombres_apellidos'], 3) +
                                substr_count($dato['nombres_apellidos'], 4) + substr_count($dato['nombres_apellidos'], 5) + substr_count($dato['nombres_apellidos'], 6) +
                                substr_count($dato['nombres_apellidos'], 7) + substr_count($dato['nombres_apellidos'], 8) + substr_count($dato['nombres_apellidos'], 9) +
                                substr_count($dato['nombres_apellidos'], 0)) > 0) {
                            $dato['v_nombres_apellidos_inv'] = 1;
                        }
                    }
                    if ($dato['dni'] != "") {
                        if (!is_numeric($dato['dni'])) {
                            $dato['v_numerico_dni'] = 1;
                        } else {
                            if (strlen($dato['dni']) != 8) {
                                $dato['v_cantidad_dni'] = 1;
                            }
                        }
                    }
                    if ($dato['contacto1'] == "") {
                        $dato['v_contacto1'] = 1;
                    }
                    if ($dato['contacto1'] != "") {
                        if (!is_numeric($dato['contacto1'])) {
                            $dato['v_numerico'] = 1;
                        } else {
                            if (strlen($dato['contacto1']) != 9) {
                                $dato['v_cantidad'] = 1;
                            } else {
                                if (substr($dato['contacto1'], 0, 1) != 9) {
                                    $dato['v_inicial'] = 1;
                                }
                            }
                        }
                    }
                    if ($dato['nombre_departamento'] != "") {
                        if ($departamento == 0) {
                            $dato['v_nombre_departamento'] = 1;
                        }
                    }
                    if ($dato['nombre_provincia'] != "") {
                        if ($provincia == 0) {
                            $dato['v_nombre_provincia'] = 1;
                        }
                    }
                    if ($dato['nombre_distrito'] != "") {
                        if ($distrito == 0) {
                            $dato['v_nombre_distrito'] = 1;
                        }
                    }
                    if ($dato['correo'] == "") {
                        $dato['v_correo'] = 1;
                    }
                    if ($dato['correo'] != "") {
                        if (!filter_var($dato['correo'], FILTER_VALIDATE_EMAIL)) {
                            $dato['v_correo_inv'] = 1;
                        }
                    }
                    if ($producto_interes == 0) {
                        $dato['v_producto_interes'] = 1;
                    }
                    if (strlen($dato['comentario']) > 35) {
                        $dato['v_comentario'] = 1;
                    }
                }

                $this->Model_IFV->insert_temporal_importacion_publico($dato);
            }

            $correctos = count($this->Model_IFV->get_list_temporal_importacion_publico_correcto());
            $errores = $this->Model_IFV->get_list_temporal_importacion_publico($dato);

            if ($correctos == count($errores)) {
                $dato['archivo_excel'] = $this->input->post("archivo_excel");

                $path = $_FILES["archivo_excel"]["tmp_name"];
                $object = IOFactory::load($path);
                $worksheet = $object->getSheet(0);

                $highestRow = $worksheet->getHighestRow();
                $highestColumn = $worksheet->getHighestColumn();
                for ($row = 2; $row <= $highestRow; $row++) {
                    $dato['nom_tipo'] = trim($worksheet->getCellByColumnAndRow(1, $row)->getValue());
                    $dato['nombres_apellidos'] = trim($worksheet->getCellByColumnAndRow(2, $row)->getValue());
                    $dato['dni'] = trim($worksheet->getCellByColumnAndRow(3, $row)->getValue());
                    $dato['contacto1'] = trim($worksheet->getCellByColumnAndRow(4, $row)->getValue());
                    $dato['contacto2'] = trim($worksheet->getCellByColumnAndRow(5, $row)->getValue());
                    $dato['nombre_departamento'] = trim($worksheet->getCellByColumnAndRow(6, $row)->getValue());
                    $dato['nombre_provincia'] = trim($worksheet->getCellByColumnAndRow(7, $row)->getValue());
                    $dato['nombre_distrito'] = trim($worksheet->getCellByColumnAndRow(8, $row)->getValue());
                    $dato['correo'] = trim($worksheet->getCellByColumnAndRow(9, $row)->getValue());
                    $dato['facebook'] = trim($worksheet->getCellByColumnAndRow(10, $row)->getValue());
                    $dato['nom_producto_interes'] = trim($worksheet->getCellByColumnAndRow(11, $row)->getValue());
                    $dato['comentario'] = trim($worksheet->getCellByColumnAndRow(12, $row)->getValue());
                    $dato['observacion'] = trim($worksheet->getCellByColumnAndRow(13, $row)->getValue());

                    if ($dato['nom_tipo'] == "" && $dato['nombres_apellidos'] == "" && $dato['dni'] == "" &&
                        $dato['contacto1'] == "" && $dato['contacto2'] == "" && $dato['nombre_departamento'] == "" &&
                        $dato['nombre_provincia'] == "" && $dato['nombre_distrito'] == "" && $dato['correo'] == "" &&
                        $dato['facebook'] == "" && $dato['nom_producto_interes'] == "" && $dato['comentario'] == "" &&
                        $dato['observacion'] == "") {
                        break;
                    }

                    $tipo_publico = $this->Model_IFV->buscar_tipo_publico($dato['nom_tipo']);
                    $departamento = $this->Model_IFV->buscar_departamento($dato['nombre_departamento']);
                    $provincia = $this->Model_IFV->buscar_provincia($dato['nombre_departamento'], $dato['nombre_provincia']);
                    $distrito = $this->Model_IFV->buscar_distrito($dato['nombre_departamento'], $dato['nombre_provincia'], $dato['nombre_distrito']);
                    $producto_interes = $this->Model_IFV->buscar_producto_interes($dato['nom_producto_interes']);

                    $totalRows_t = count($this->Model_IFV->get_cant_publico());
                    $anio = date('Y');
                    $aniof = substr($anio, 2, 2);

                    if ($totalRows_t < 9) {
                        $codigo = $aniof . "000" . ($totalRows_t + 1);
                    }
                    if ($totalRows_t > 8 && $totalRows_t < 99) {
                        $codigo = $aniof . "00" . ($totalRows_t + 1);
                    }
                    if ($totalRows_t > 98 && $totalRows_t < 999) {
                        $codigo = $aniof . "0" . ($totalRows_t + 1);
                    }
                    if ($totalRows_t > 998) {
                        $codigo = $aniof . ($totalRows_t + 1);
                    }
                    $cod_publico = $codigo;

                    $dato['cod_publico'] = $cod_publico;
                    $dato['id_tipo'] = $tipo_publico[0]['id_tipo'];
                    if ($dato['nombre_departamento'] != "") {
                        $dato['id_departamento'] = $departamento[0]['id_departamento'];
                    } else {
                        $dato['id_departamento'] = "0";
                    }
                    if ($dato['nombre_provincia'] != "") {
                        $dato['id_provincia'] = $provincia[0]['id_provincia'];
                    } else {
                        $dato['id_provincia'] = "0";
                    }
                    if ($dato['nombre_distrito'] != "") {
                        $dato['id_distrito'] = $distrito[0]['id_distrito'];
                    } else {
                        $dato['id_distrito'] = "0";
                    }
                    $dato['id_producto_interes'] = $producto_interes[0]['id_producto_interes'];

                    $this->Model_IFV->importar_publico($dato);

                    $ultimo = $this->Model_IFV->ultimo_id_publico();
                    $dato['id_publico'] = $ultimo[0]['id_publico'];

                    $this->Model_IFV->insert_historial_publico($dato);
                }
            } else {
                $fila = 2;

                foreach ($errores as $list) {
                    if ($list['v_contacto1'] == 1 && $list['v_correo'] == 1) {
                        echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", recuerde que debe haber contacto principal o correo!</p>";
                    } else {
                        if ($list['v_publico'] == 1) {
                            echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Registro válido - OBLIGATORIO Cargar Manualmente!</p>";
                        } else {
                            if ($list['v_tipo_publico'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Tipo válido!</p>";
                            }
                            if ($list['v_nombres_apellidos'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Nombres y Apellidos!</p>";
                            }
                            if ($list['v_nombres_apellidos_inv'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Nombres y Apellidos válidos!</p>";
                            }
                            if ($list['v_numerico_dni'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar solo números para DNI!</p>";
                            }
                            if ($list['v_cantidad_dni'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar 8 dígitos para DNI!</p>";
                            }
                            if ($list['v_numerico'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar solo números para Contacto Principal!</p>";
                            }
                            if ($list['v_cantidad'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar 9 dígitos para Contacto Principal!</p>";
                            }
                            if ($list['v_inicial'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar número inicial 9 para Contacto Principal!</p>";
                            }
                            if ($list['v_nombre_departamento'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Departamento válido!</p>";
                            }
                            if ($list['v_nombre_provincia'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Provincia válida!</p>";
                            }
                            if ($list['v_nombre_distrito'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Distrito válido!</p>";
                            }
                            if ($list['v_correo_inv'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Correo válido!</p>";
                            }
                            if ($list['v_producto_interes'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Producto Interes válido!</p>";
                            }
                            if ($list['v_comentario'] == 1) {
                                echo "<p style='text-align: justify; font-size:90%; color:black' >Fila " . $fila . ", ingresar Comentario máximo de 35 caracteres!</p>";
                            }
                        }
                    }
                    $fila++;
                }

                if ($correctos > 0) {
                    echo "*CORRECTO";
                } else {
                    echo "*INCORRECTO";
                }
            }

            $this->Model_IFV->delete_temporal_importacion_publico();
        } else {
            redirect('/login');
        }
    }

    public function Importar_Publico()
    {
        if ($this->session->userdata('usuario')) {
            $dato['archivo_excel'] = $this->input->post("archivo_excel");

            $path = $_FILES["archivo_excel"]["tmp_name"];
            $object = IOFactory::load($path);
            $worksheet = $object->getSheet(0);

            $highestRow = $worksheet->getHighestRow();
            $highestColumn = $worksheet->getHighestColumn();
            for ($row = 2; $row <= $highestRow; $row++) {
                $dato['nom_tipo'] = trim($worksheet->getCellByColumnAndRow(1, $row)->getValue());
                $dato['nombres_apellidos'] = trim($worksheet->getCellByColumnAndRow(2, $row)->getValue());
                $dato['dni'] = trim($worksheet->getCellByColumnAndRow(3, $row)->getValue());
                $dato['contacto1'] = trim($worksheet->getCellByColumnAndRow(4, $row)->getValue());
                $dato['contacto2'] = trim($worksheet->getCellByColumnAndRow(5, $row)->getValue());
                $dato['nombre_departamento'] = trim($worksheet->getCellByColumnAndRow(6, $row)->getValue());
                $dato['nombre_provincia'] = trim($worksheet->getCellByColumnAndRow(7, $row)->getValue());
                $dato['nombre_distrito'] = trim($worksheet->getCellByColumnAndRow(8, $row)->getValue());
                $dato['correo'] = trim($worksheet->getCellByColumnAndRow(9, $row)->getValue());
                $dato['facebook'] = trim($worksheet->getCellByColumnAndRow(10, $row)->getValue());
                $dato['nom_producto_interes'] = trim($worksheet->getCellByColumnAndRow(11, $row)->getValue());
                $dato['comentario'] = trim($worksheet->getCellByColumnAndRow(12, $row)->getValue());
                $dato['observacion'] = trim($worksheet->getCellByColumnAndRow(13, $row)->getValue());

                if ($dato['nom_tipo'] == "" && $dato['nombres_apellidos'] == "" && $dato['dni'] == "" &&
                    $dato['contacto1'] == "" && $dato['contacto2'] == "" && $dato['nombre_departamento'] == "" &&
                    $dato['nombre_provincia'] == "" && $dato['nombre_distrito'] == "" && $dato['correo'] == "" &&
                    $dato['facebook'] == "" && $dato['nom_producto_interes'] == "" && $dato['comentario'] == "" &&
                    $dato['observacion'] == "") {
                    break;
                }

                $tipo_publico = $this->Model_IFV->buscar_tipo_publico($dato['nom_tipo']);
                $departamento = $this->Model_IFV->buscar_departamento($dato['nombre_departamento']);
                $provincia = $this->Model_IFV->buscar_provincia($dato['nombre_departamento'], $dato['nombre_provincia']);
                $distrito = $this->Model_IFV->buscar_distrito($dato['nombre_departamento'], $dato['nombre_provincia'], $dato['nombre_distrito']);
                $producto_interes = $this->Model_IFV->buscar_producto_interes($dato['nom_producto_interes']);
                $validar = count($this->Model_IFV->valida_insert_publico($dato));

                $dato['v_publico'] = 0;
                $dato['v_ambos'] = 0;
                $dato['v_tipo_publico'] = 0;
                $dato['v_nombres_apellidos'] = 0;
                $dato['v_nombres_apellidos_inv'] = 0;
                $dato['v_numerico_dni'] = 0;
                $dato['v_cantidad_dni'] = 0;
                $dato['v_numerico'] = 0;
                $dato['v_cantidad'] = 0;
                $dato['v_inicial'] = 0;
                $dato['v_numerico_contacto2'] = 0;
                $dato['v_nombre_departamento'] = 0;
                $dato['v_nombre_provincia'] = 0;
                $dato['v_nombre_distrito'] = 0;
                $dato['v_correo_inv'] = 0;
                $dato['v_producto_interes'] = 0;
                $dato['v_comentario'] = 0;

                if ($validar > 0) {
                    $dato['v_publico'] = 1;
                }
                if ($dato['contacto1'] == "" && $dato['correo'] == "") {
                    $dato['v_ambos'] = 1;
                }
                if (count($tipo_publico) == 0) {
                    $dato['v_tipo_publico'] = 1;
                }
                if ($dato['nombres_apellidos'] == "") {
                    $dato['v_nombres_apellidos'] = 1;
                } else {
                    if ((substr_count($dato['nombres_apellidos'], 1) + substr_count($dato['nombres_apellidos'], 2) + substr_count($dato['nombres_apellidos'], 3) +
                            substr_count($dato['nombres_apellidos'], 4) + substr_count($dato['nombres_apellidos'], 5) + substr_count($dato['nombres_apellidos'], 6) +
                            substr_count($dato['nombres_apellidos'], 7) + substr_count($dato['nombres_apellidos'], 8) + substr_count($dato['nombres_apellidos'], 9) +
                            substr_count($dato['nombres_apellidos'], 0)) > 0) {
                        $dato['v_nombres_apellidos_inv'] = 1;
                    }
                }
                if ($dato['dni'] != "") {
                    if (!is_numeric($dato['dni'])) {
                        $dato['v_numerico_dni'] = 1;
                    } else {
                        if (strlen($dato['dni']) != 8) {
                            $dato['v_cantidad_dni'] = 1;
                        }
                    }
                }
                if ($dato['contacto1'] != "") {
                    if (!is_numeric($dato['contacto1'])) {
                        $dato['v_numerico'] = 1;
                    } else {
                        if (strlen($dato['contacto1']) != 9) {
                            $dato['v_cantidad'] = 1;
                        } else {
                            if (substr($dato['contacto1'], 0, 1) != 9) {
                                $dato['v_inicial'] = 1;
                            }
                        }
                    }
                }
                if ($dato['contacto2'] != "") {
                    if (!is_numeric($dato['contacto2'])) {
                        $dato['v_numerico_contacto2'] = 1;
                    }
                }
                if ($dato['nombre_departamento'] != "") {
                    if (count($departamento) == 0) {
                        $dato['v_nombre_departamento'] = 1;
                    }
                }
                if ($dato['nombre_provincia'] != "") {
                    if (count($provincia) == 0) {
                        $dato['v_nombre_provincia'] = 1;
                    }
                }
                if ($dato['nombre_distrito'] != "") {
                    if (count($distrito) == 0) {
                        $dato['v_nombre_distrito'] = 1;
                    }
                }
                if ($dato['correo'] != "") {
                    if (!filter_var($dato['correo'], FILTER_VALIDATE_EMAIL)) {
                        $dato['v_correo_inv'] = 1;
                    }
                }
                if (count($producto_interes) == 0) {
                    $dato['v_producto_interes'] = 1;
                }
                if (strlen($dato['comentario']) > 35) {
                    $dato['v_comentario'] = 1;
                }

                if ($dato['v_publico'] == 0 && $dato['v_ambos'] == 0 && $dato['v_tipo_publico'] == 0 && $dato['v_nombres_apellidos'] == 0 &&
                    $dato['v_nombres_apellidos_inv'] == 0 && $dato['v_numerico_dni'] == 0 && $dato['v_cantidad_dni'] == 0 && $dato['v_numerico'] == 0 && $dato['v_cantidad'] == 0 &&
                    $dato['v_inicial'] == 0 && $dato['v_numerico_contacto2'] == 0 && $dato['v_nombre_departamento'] == 0 && $dato['v_nombre_provincia'] == 0 &&
                    $dato['v_nombre_distrito'] == 0 && $dato['v_correo_inv'] == 0 && $dato['v_producto_interes'] == 0 && $dato['v_comentario'] == 0) {
                    $totalRows_t = count($this->Model_IFV->get_cant_publico());
                    $anio = date('Y');
                    $aniof = substr($anio, 2, 2);

                    if ($totalRows_t < 9) {
                        $codigo = $aniof . "000" . ($totalRows_t + 1);
                    }
                    if ($totalRows_t > 8 && $totalRows_t < 99) {
                        $codigo = $aniof . "00" . ($totalRows_t + 1);
                    }
                    if ($totalRows_t > 98 && $totalRows_t < 999) {
                        $codigo = $aniof . "0" . ($totalRows_t + 1);
                    }
                    if ($totalRows_t > 998) {
                        $codigo = $aniof . ($totalRows_t + 1);
                    }
                    $cod_publico = $codigo;

                    $dato['cod_publico'] = $cod_publico;
                    $dato['id_tipo'] = $tipo_publico[0]['id_tipo'];
                    if ($dato['nombre_departamento'] != "") {
                        $dato['id_departamento'] = $departamento[0]['id_departamento'];
                    } else {
                        $dato['id_departamento'] = "0";
                    }
                    if ($dato['nombre_provincia'] != "") {
                        $dato['id_provincia'] = $provincia[0]['id_provincia'];
                    } else {
                        $dato['id_provincia'] = "0";
                    }
                    if ($dato['nombre_distrito'] != "") {
                        $dato['id_distrito'] = $distrito[0]['id_distrito'];
                    } else {
                        $dato['id_distrito'] = "0";
                    }
                    $dato['id_producto_interes'] = $producto_interes[0]['id_producto_interes'];

                    $this->Model_IFV->importar_publico($dato);

                    $ultimo = $this->Model_IFV->ultimo_id_publico();
                    $dato['id_publico'] = $ultimo[0]['id_publico'];

                    $this->Model_IFV->insert_historial_publico($dato);
                }
            }
        } else {
            redirect('/login');
        }
    }

    //---------------------------------------------MAILING-------------------------------------------
    public function Mailing()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/mailing/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_mailing'] = $this->Model_IFV->get_list_mailing();
            $this->load->view('view_IFV/mailing/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_mailing();
            $dato['list_grupo'] = $this->Model_IFV->get_list_grupo_mailing();
            $dato['list_estado'] = $this->Model_IFV->get_list_status();
            $this->load->view('view_IFV/mailing/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Especialidad_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_mailing($dato['grupo']);
            $this->load->view('view_IFV/mailing/especialidad', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Turno_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['list_turno'] = $this->Model_IFV->get_list_turno_mailing($dato['grupo'], $dato['especialidad']);
            $this->load->view('view_IFV/mailing/turno', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Traer_Modulo_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['grupo'] = $this->input->post("grupo");
            $dato['especialidad'] = $this->input->post("especialidad");
            $dato['turno'] = $this->input->post("turno");
            $dato['list_modulo'] = $this->Model_IFV->get_list_modulo_mailing($dato['grupo'], $dato['especialidad'], $dato['turno']);
            $this->load->view('view_IFV/mailing/modulo', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['codigo'] = $this->input->post("codigo_i");
            $dato['alumno'] = $this->input->post("alumno_i");
            $dato['grupo'] = $this->input->post("grupo_i");
            $dato['especialidad'] = $this->input->post("especialidad_i");
            $dato['turno'] = $this->input->post("turno_i");
            $dato['modulo'] = $this->input->post("modulo_i");
            $dato['tipo_envio'] = $this->input->post("tipo_envio_i");
            $dato['fecha_envio'] = $this->input->post("fecha_envio_i");
            $dato['titulo'] = $this->input->post("titulo_i");
            $dato['texto'] = $this->input->post("texto_i");
            $dato['documento'] = "";
            $dato['estado_m'] = $this->input->post("estado_m_i");

            $cantidad = $this->Model_IFV->get_cantidad_mailing();
            $cantidad = $cantidad[0]['cantidad'] + 1;

            if ($_FILES["documento_i"]["name"] != "") {
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["documento_i"]["name"]);
                $config['upload_path'] = './documento_mailing/' . $cantidad;
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./documento_mailing/', 0777);
                    chmod('./documento_mailing/' . $cantidad, 0777);
                }
                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["documento_i"]["name"];
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["documento_i"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["documento_i"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["documento_i"]["error"];
                $_FILES["file"]["size"] = $_FILES["documento_i"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['documento'] = "documento_mailing/" . $cantidad . "/" . $dato['nom_documento'];
                }
            }

            $this->Model_IFV->insert_mailing($dato);
            $ultimo = $this->Model_IFV->ultimo_id_mailing();
            $dato['id_mailing'] = $ultimo[0]['id_mailing'];

            if ($dato['alumno'] != 1) {
                if (!is_null($this->input->post("id_alumno_i"))) {
                    foreach ($this->input->post("id_alumno_i") as $id_alumno) {
                        $dato['id_alumno'] = $id_alumno;
                        $this->Model_IFV->insert_envio_mailing($dato);
                    }
                }
            }
        } else {
            redirect('');
        }
    }

    public function Modal_Update_Mailing($id_mailing)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_mailing($id_mailing);
            $dato['list_alumno'] = $this->Model_IFV->get_list_alumno_mailing();
            $dato['list_envio'] = $this->Model_IFV->get_list_envio_mailing($id_mailing);
            $dato['list_grupo'] = $this->Model_IFV->get_list_grupo_mailing();
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_mailing($dato['get_id'][0]['grupo']);
            $dato['list_turno'] = $this->Model_IFV->get_list_turno_mailing($dato['get_id'][0]['grupo'], $dato['get_id'][0]['especialidad']);
            $dato['list_modulo'] = $this->Model_IFV->get_list_modulo_mailing($dato['get_id'][0]['grupo'], $dato['get_id'][0]['especialidad'], $dato['get_id'][0]['turno']);
            $dato['list_estado'] = $this->Model_IFV->get_list_status();
            $this->load->view('view_IFV/mailing/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_mailing'] = $this->input->post("id_mailing");
            $dato['codigo'] = $this->input->post("codigo_u");
            $dato['alumno'] = $this->input->post("alumno_u");
            $dato['grupo'] = $this->input->post("grupo_u");
            $dato['especialidad'] = $this->input->post("especialidad_u");
            $dato['turno'] = $this->input->post("turno_u");
            $dato['modulo'] = $this->input->post("modulo_u");
            $dato['tipo_envio'] = $this->input->post("tipo_envio_u");
            $dato['fecha_envio'] = $this->input->post("fecha_envio_u");
            $dato['titulo'] = $this->input->post("titulo_u");
            $dato['texto'] = $this->input->post("texto_u");
            $dato['documento'] = $this->input->post("documento_actual");
            $dato['estado_m'] = $this->input->post("estado_m_u");

            if ($_FILES["documento_u"]["name"] != "") {
                if (file_exists($dato['documento'])) {
                    unlink($dato['documento']);
                }
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["documento_u"]["name"]);
                $config['upload_path'] = './documento_mailing/' . $dato['id_mailing'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./documento_mailing/', 0777);
                    chmod('./documento_mailing/' . $dato['id_mailing'], 0777);
                }
                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["documento_u"]["name"];
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["documento_u"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["documento_u"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["documento_u"]["error"];
                $_FILES["file"]["size"] = $_FILES["documento_u"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['documento'] = "documento_mailing/" . $dato['id_mailing'] . "/" . $dato['nom_documento'];
                }
            }

            $this->Model_IFV->update_mailing($dato);

            if ($dato['alumno'] != 1) {
                if (!is_null($this->input->post("id_alumno_u"))) {
                    $this->Model_IFV->delete_envio_mailing($dato);

                    foreach ($this->input->post("id_alumno_u") as $id_alumno) {
                        $dato['id_alumno'] = $id_alumno;
                        $this->Model_IFV->insert_envio_mailing($dato);
                    }
                }
            }
        } else {
            redirect('/login');
        }
    }

    public function Actualizar_Lista_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $list_mailing = $this->Model_IFV->get_mailing_activos();

            foreach ($list_mailing as $list) {
                $dato['id_mailing'] = $list['id_mailing'];

                $list_alumno = $this->Model_IFV->get_datos_alumno_mailing($dato['id_mailing']);

                foreach ($list_alumno as $get_alumno) {
                    $dato['id_alumno'] = $get_alumno['id_alumno'];
                    $dato['cod_alumno'] = $get_alumno['cod_alumno'];
                    $dato['apater_alumno'] = $get_alumno['apater_alumno'];
                    $dato['amater_alumno'] = $get_alumno['amater_alumno'];
                    $dato['nom_alumno'] = $get_alumno['nom_alumno'];
                    $dato['email_alumno'] = $get_alumno['email_alumno'];
                    $dato['celular_alumno'] = $get_alumno['celular_alumno'];
                    $dato['grupo_alumno'] = $get_alumno['grupo_alumno'];
                    $dato['especialidad_alumno'] = $get_alumno['especialidad_alumno'];
                    $dato['turno_alumno'] = $get_alumno['turno_alumno'];
                    $dato['modulo_alumno'] = $get_alumno['modulo_alumno'];
                    $dato['id_apoderado'] = $get_alumno['id_apoderado'];
                    $dato['apater_apoderado'] = $get_alumno['apater_apoderado'];
                    $dato['amater_apoderado'] = $get_alumno['amater_apoderado'];
                    $dato['nom_apoderado'] = $get_alumno['nom_apoderado'];
                    $dato['parentesco_apoderado'] = $get_alumno['parentesco_apoderado'];
                    $dato['email_apoderado'] = $get_alumno['email_apoderado'];
                    $dato['celular_apoderado'] = $get_alumno['celular_apoderado'];

                    $mail = new PHPMailer(true);

                    try {
                        $mail->SMTPDebug = 0;                      // Enable verbose debug output
                        $mail->isSMTP();                                            // Send using SMTP
                        $mail->Host = 'smtp.gmail.com';                    // Set the SMTP server to send through
                        $mail->SMTPAuth = true;                                   // Enable SMTP authentication
                        $mail->Username = 'admision@ifv.edu.pe';                     // usuario de acceso
                        $mail->Password = $this->config->item('password_fv');                                // SMTP password
                        $mail->SMTPSecure = 'tls';         // Enable TLS encryption; `PHPMailer::ENCRYPTION_SMTPS` encouraged
                        $mail->Port = 587;                                    // TCP port to connect to, use 465 for `PHPMailer::ENCRYPTION_SMTPS` above
                        $mail->setFrom('admision@ifv.edu.pe', 'Instituto Federico Villarreal'); //desde donde se envia

                        $mail->addAddress($get_alumno['email_envio']);

                        $mail->isHTML(true);                                  // Set email format to HTML

                        $mail->Subject = $list['titulo'];

                        $mail->Body = '<FONT SIZE=3>' . nl2br($list['texto']) . '
                                        </FONT SIZE>';

                        $mail->CharSet = 'UTF-8';
                        if ($list['documento'] != "") {
                            $mail->addAttachment($list['documento']);
                        }
                        $mail->send();

                        $this->Model_IFV->insert_detalle_mailing($dato);
                    } catch (Exception $e) {
                        echo "Hubo un error al enviar el correo: {$mail->ErrorInfo}";
                    }
                }

                $this->Model_IFV->update_enviado_mailing($dato);
            }
        } else {
            redirect('');
        }
    }

    public function Descargar_Mailing($id_mailing)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_list_mailing($id_mailing);
            $image = $dato['get_file'][0]['documento'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['documento']));
        } else {
            redirect('');
        }
    }

    public function Delete_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_mailing'] = $this->input->post("id_mailing");
            $this->Model_IFV->delete_mailing($dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Mailing()
    {
        $list_mailing = $this->Model_IFV->get_list_mailing();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Mailing');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(20);
        $sheet->getColumnDimension('C')->setWidth(20);
        $sheet->getColumnDimension('D')->setWidth(40);
        $sheet->getColumnDimension('E')->setWidth(80);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Tipo Envío');
        $sheet->setCellValue("C1", 'Fecha Envío');
        $sheet->setCellValue("D1", 'Título');
        $sheet->setCellValue("E1", 'Texto');
        $sheet->setCellValue("F1", 'Documento');
        $sheet->setCellValue("G1", 'Estado');

        $contador = 1;

        foreach ($list_mailing as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("D{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['codigo']);
            $sheet->setCellValue("B{$contador}", $list['nom_tipo_envio']);
            if ($list['fecha_envio'] != "") {
                $sheet->setCellValue("C{$contador}", Date::PHPToExcel($list['fecha_envio']));
                $sheet->getStyle("C{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            }
            $sheet->setCellValue("D{$contador}", $list['titulo']);
            $sheet->setCellValue("E{$contador}", $list['texto']);
            $sheet->setCellValue("F{$contador}", $list['v_documento']);
            $sheet->setCellValue("G{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Mailing (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Detalle_Mailing($id_mailing)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_mailing($id_mailing);

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/mailing/detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Detalle_Mailing()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_mailing'] = $this->input->post("id_mailing");
            $dato['list_detalle'] = $this->Model_IFV->get_list_detalle_mailing($dato['id_mailing']);
            $this->load->view('view_IFV/mailing/lista_detalle', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Detalle_Mailing($tipo)
    {
        $list_detalle = $this->Model_IFV->get_list_detalle_mailing($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:J1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:J1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Detalle Mailing');

        $sheet->setAutoFilter('A1:J1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(30);
        $sheet->getColumnDimension('E')->setWidth(50);
        $sheet->getColumnDimension('F')->setWidth(18);
        $sheet->getColumnDimension('G')->setWidth(35);
        $sheet->getColumnDimension('H')->setWidth(15);
        $sheet->getColumnDimension('I')->setWidth(18);
        $sheet->getColumnDimension('J')->setWidth(18);

        $sheet->getStyle('A1:J1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:J1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:J1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Apellido Paterno');
        $sheet->setCellValue("C1", 'Apellido Materno');
        $sheet->setCellValue("D1", 'Nombre(s)');
        $sheet->setCellValue("E1", 'Apoderado');
        $sheet->setCellValue("F1", 'Parentesco');
        $sheet->setCellValue("G1", 'Email');
        $sheet->setCellValue("H1", 'Celular');
        $sheet->setCellValue("I1", 'Fecha Envío');
        $sheet->setCellValue("J1", 'Hora Envío');

        $contador = 1;

        foreach ($list_detalle as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:J{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:J{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:J{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['cod_alumno']);
            $sheet->setCellValue("B{$contador}", $list['apater_alumno']);
            $sheet->setCellValue("C{$contador}", $list['amater_alumno']);
            $sheet->setCellValue("D{$contador}", $list['nom_alumno']);
            $sheet->setCellValue("E{$contador}", $list['nom_apoderado']);
            $sheet->setCellValue("F{$contador}", $list['parentesco_apoderado']);
            $sheet->setCellValue("G{$contador}", $list['email_apoderado']);
            $sheet->setCellValue("H{$contador}", $list['celular_apoderado']);
            $sheet->setCellValue("I{$contador}", Date::PHPToExcel($list['fec_envio']));
            $sheet->getStyle("I{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("J{$contador}", $list['hora_envio']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Detalle Mailing (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Contrato_Alumno()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_alumno'] = $this->input->post("id_alumno");
            $dato['list_contrato'] = $this->Model_IFV->get_list_contrato_alumno($dato['id_alumno']);

            $this->load->view('view_IFV/matriculados_c/lista_contrato', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Postulantes_Formulario()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);
            $this->load->view('view_IFV/postulantes_formulario/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Postulantes_Formulario_Lista()
    {
        $tipo = $this->input->post("tipo");
        $dato['list_admision'] = $this->Model_IFV->get_list_postulantes_formulario($tipo);
        $this->load->view('view_IFV/postulantes_formulario/lista_postulantes', $dato);
    }

    public function Excel_Postulantes_Formulario($tipo)
    {
        $list_admision = $this->Model_IFV->get_list_postulantes_formulario_excel($tipo);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("B1:AL2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("B1:AL2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Lista Postulante');

        $sheet->setAutoFilter('B2:AL2');


        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(20);
        $sheet->getColumnDimension('D')->setWidth(30);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(10);
        $sheet->getColumnDimension('H')->setWidth(20);
        $sheet->getColumnDimension('I')->setWidth(20);
        $sheet->getColumnDimension('J')->setWidth(30);
        $sheet->getColumnDimension('K')->setWidth(30);
        $sheet->getColumnDimension('L')->setWidth(30);
        $sheet->getColumnDimension('M')->setWidth(20);
        $sheet->getColumnDimension('N')->setWidth(15);
        $sheet->getColumnDimension('O')->setWidth(20);
        $sheet->getColumnDimension('P')->setWidth(30);
        $sheet->getColumnDimension('Q')->setWidth(50);
        $sheet->getColumnDimension('R')->setWidth(30);
        $sheet->getColumnDimension('S')->setWidth(30);
        $sheet->getColumnDimension('T')->setWidth(30);
        $sheet->getColumnDimension('U')->setWidth(30);
        $sheet->getColumnDimension('V')->setWidth(30);
        $sheet->getColumnDimension('W')->setWidth(30);
        $sheet->getColumnDimension('X')->setWidth(30);
        $sheet->getColumnDimension('Y')->setWidth(20);
        $sheet->getColumnDimension('Z')->setWidth(20);
        $sheet->getColumnDimension('AA')->setWidth(20);
        $sheet->getColumnDimension('AB')->setWidth(30);
        $sheet->getColumnDimension('AC')->setWidth(30);
        $sheet->getColumnDimension('AD')->setWidth(30);
        $sheet->getColumnDimension('AE')->setWidth(30);
        $sheet->getColumnDimension('AF')->setWidth(20);
        $sheet->getColumnDimension('AG')->setWidth(20);
        $sheet->getColumnDimension('AH')->setWidth(20);
        $sheet->getColumnDimension('AI')->setWidth(20);
        $sheet->getColumnDimension('AJ')->setWidth(15);
        $sheet->getColumnDimension('AK')->setWidth(15);
        $sheet->getColumnDimension('AL')->setWidth(15);

        $sheet->getStyle('B2:AL2')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("B2:AL2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("B2:AL2")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("B2", 'Código');
        $sheet->setCellValue("C2", 'Abreviatura');
        $sheet->setCellValue("D2", 'Nombre Especialidad');
        $sheet->setCellValue("E2", 'Modalidad');
        $sheet->setCellValue("F2", 'Turno');
        $sheet->setCellValue("G2", 'Grupo');
        $sheet->setCellValue("H2", 'Tipo Doc Alumno');
        $sheet->setCellValue("I2", 'Nro Doc Alumno');
        $sheet->setCellValue("J2", 'Apellido Paterno');
        $sheet->setCellValue("K2", 'Apellido Materno');
        $sheet->setCellValue("L2", 'Nombre(s)');
        $sheet->setCellValue("M2", 'Fecha Nacimiento');
        $sheet->setCellValue("N2", 'Sexo');
        $sheet->setCellValue("O2", 'Celular Alumno');
        $sheet->setCellValue("P2", 'Email Alumno');
        $sheet->setCellValue("Q2", 'Domicilio');
        $sheet->setCellValue("R2", 'Distrito');
        $sheet->setCellValue("S2", 'Provincia');
        $sheet->setCellValue("T2", 'Departamento');
        $sheet->setCellValue("U2", 'Colegio Procedencia');
        $sheet->setCellValue("V2", 'Distrito Colegio');
        $sheet->setCellValue("W2", 'Provincia Colegio');
        $sheet->setCellValue("X2", 'Departamento Colegio');
        $sheet->setCellValue("Y2", 'Tipo Doc Tutor');
        $sheet->setCellValue("Z2", 'Nro Doc Tutor');
        $sheet->setCellValue("AA2", 'Parentesco');
        $sheet->setCellValue("AB2", 'Nombre(s) Tutor');
        $sheet->setCellValue("AC2", 'Apellido Paterno Tutor');
        $sheet->setCellValue("AD2", 'Apellido Materno Tutor');
        $sheet->setCellValue("AE2", 'Como supo de nosotros');
        $sheet->setCellValue("AF2", 'Doc DNI Alumno');
        $sheet->setCellValue("AG2", 'Doc DNI Tutor');
        $sheet->setCellValue("AH2", 'Doc Certificado');
        $sheet->setCellValue("AI2", 'Doc Tramite');
        $sheet->setCellValue("AJ2", 'Fecha Registro');
        $sheet->setCellValue("AK2", 'Creado por');
        $sheet->setCellValue("AL2", 'Estado Doc Postulante');
        $contador = 2;

        $sheet->freezePane('A3');

        foreach ($list_admision as $list) {
            $contador++;

            $sheet->getStyle("B{$contador}:AL{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("J{$contador}:L{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("P{$contador}:X{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("AB{$contador}:AE{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("AK{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("B{$contador}:AL{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("B{$contador}:AL{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("B{$contador}", $list['codigo_admision']);
            $sheet->setCellValue("C{$contador}", $list['Especialidad']);
            $sheet->setCellValue("D{$contador}", $list['Nombre_Especialidad']);
            $sheet->setCellValue("E{$contador}", $list['Modalidad']);
            $sheet->setCellValue("F{$contador}", $list['Turno']);
            $sheet->setCellValue("G{$contador}", $list['Grupo']);
            $sheet->setCellValue("H{$contador}", $list['Tipo_Doc_Ident']);
            $sheet->setCellValue("I{$contador}", $list['Nro_Doc_Alumno']);
            $sheet->setCellValue("J{$contador}", $list['Apellido_Paterno']);
            $sheet->setCellValue("K{$contador}", $list['Apellido_Materno']);
            $sheet->setCellValue("L{$contador}", $list['Nombre']);
            $sheet->setCellValue("M{$contador}", $list['Fecha_Nacimiento']);
            $sheet->setCellValue("N{$contador}", $list['Sexo']);
            $sheet->setCellValue("O{$contador}", $list['Celular_Alumno']);
            $sheet->setCellValue("P{$contador}", $list['Email_Alumno']);
            $sheet->setCellValue("Q{$contador}", $list['Domicilio']);
            $sheet->setCellValue("R{$contador}", $list['Distrito']);
            $sheet->setCellValue("S{$contador}", $list['Provincia']);
            $sheet->setCellValue("T{$contador}", $list['Departamento']);
            $sheet->setCellValue("U{$contador}", $list['Colegio_Procedencia']);
            $sheet->setCellValue("V{$contador}", $list['Distrito_Colegio']);
            $sheet->setCellValue("W{$contador}", $list['Provincia_Colegio']);
            $sheet->setCellValue("X{$contador}", $list['Departamento_Colegio']);
            $sheet->setCellValue("Y{$contador}", $list['Tipo_Doc_Ident_Tutor']);
            $sheet->setCellValue("Z{$contador}", $list['Nro_Doc_Tutor']);
            $sheet->setCellValue("AA{$contador}", $list['Parentesco_Tutor']);
            $sheet->setCellValue("AB{$contador}", $list['Nombre_Tutor']);
            $sheet->setCellValue("AC{$contador}", $list['Apellido_Paterno_Tutor']);
            $sheet->setCellValue("AD{$contador}", $list['Apellido_Materno_Tutor']);
            $sheet->setCellValue("AE{$contador}", $list['CEN']);
            $sheet->setCellValue("AF{$contador}", $list['Doc_DNI_Alumno']);
            $sheet->setCellValue("AG{$contador}", $list['Doc_DNI_Tutor']);
            $sheet->setCellValue("AH{$contador}", $list['Doc_Certificado']);
            $sheet->setCellValue("AI{$contador}", $list['Doc_Tramite']);
            $sheet->setCellValue("AJ{$contador}", Date::PHPToExcel($list['Fec_reg']));
            $sheet->getStyle("AJ{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("AK{$contador}", $list['creadopor']);
            $sheet->setCellValue("AL{$contador}", $list['Estado_Doc_Postulante']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Lista Postulante';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------PERFIL-------------------------------------------
    public function Perfil()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/perfil/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Perfil()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_perfil'] = $this->Model_IFV->get_list_perfil();
            $this->load->view('view_IFV/perfil/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Perfil()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_estado'] = $this->Model_IFV->get_list_status();
            $this->load->view('view_IFV/perfil/modal_registrar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Perfil()
    {
        if ($this->session->userdata('usuario')) {
            $dato['nom_perfil'] = $this->input->post("nom_perfil");
            $dato['estado'] = $this->input->post("estado");

            $valida = $this->Model_IFV->valida_perfil(null, $dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                $this->Model_IFV->insert_perfil($dato);
            }
        } else {
            redirect('');
        }
    }

    public function Modal_Update_Perfil($id_perfil)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_perfil($id_perfil);
            $dato['list_estado'] = $this->Model_IFV->get_list_status();
            $this->load->view('view_IFV/perfil/modal_editar', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Update_Perfil()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_perfil'] = $this->input->post("id_perfil");
            $dato['nom_perfil'] = $this->input->post("nom_perfile");
            $dato['estado'] = $this->input->post("estadoe");

            $valida = $this->Model_IFV->valida_perfil($dato['id_perfil'], $dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_perfil($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_Perfil()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_perfil'] = $this->input->post("id_perfil");
            $this->Model_IFV->delete_perfil($dato);
        } else {
            redirect('');
        }
    }

    public function Excel_Perfil()
    {
        $list_perfil = $this->Model_IFV->get_list_perfil();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:B1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:B1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Perfil');

        $sheet->setAutoFilter('A1:B1');

        $sheet->getColumnDimension('A')->setWidth(30);
        $sheet->getColumnDimension('B')->setWidth(15);

        $sheet->getStyle('A1:B1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:B1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:B1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Nombre');
        $sheet->setCellValue("B1", 'Estado');

        $contador = 1;

        foreach ($list_perfil as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("A{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:B{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:B{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['nom_perfil']);
            $sheet->setCellValue("B{$contador}", $list['nom_status']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Perfil (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    //---------------------------------------------Colaboradores-Observaciones-------------------------------------------
    public function Colaborador_Obs()
    {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/colaborador_obs/index', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Colaborador_Obs()
    {
        if ($this->session->userdata('usuario')) {
            $dato['list_colaborador_obs'] = $this->Model_IFV->get_list_colaborador_obs();
            $this->load->view('view_IFV/colaborador_obs/lista', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Colaborador_Obs()
    {
        $list_colaborador_obs = $this->Model_IFV->get_list_colaborador_obs();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("B1:H2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("B1:H2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Colaboradores Obs.');

        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(15);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(25);
        $sheet->getColumnDimension('H')->setWidth(130);


        $sheet->getStyle('B2:H3')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("B2:H3")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("B2:H3")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->mergeCells("B2:B3");
        $sheet->mergeCells("C2:C3");
        $sheet->mergeCells("D2:D3");
        $sheet->mergeCells("E2:E3");
        $sheet->mergeCells("F2:F3");
        $sheet->mergeCells("G2:G3");
        $sheet->mergeCells("H2:H3");


        $sheet->setCellValue("B2", 'Fecha');
        $sheet->setCellValue("C2", 'Usuario');
        $sheet->setCellValue("D2", 'Código');
        $sheet->setCellValue("E2", 'Apellido Pat.');
        $sheet->setCellValue("F2", 'Apellido Mat.');
        $sheet->setCellValue("G2", 'Nombre(s)');
        $sheet->setCellValue("H2", 'Comentario');


        $contador = 3;

        foreach ($list_colaborador_obs as $list) {
            $contador++;

            $sheet->getStyle("B{$contador}:H{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            //$sheet->getStyle("I{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:H{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $comentario = $list['Comentario'];
            if (strlen($comentario) > 150) {
                $comentario = substr($comentario, 0, 150) . '(...)';
            }

            $sheet->setCellValue("B{$contador}", $list['fecha_registro']);
            $sheet->setCellValue("C{$contador}", $list['usuario_codigo']);
            $sheet->setCellValue("D{$contador}", $list['codigo_gll']);
            $sheet->setCellValue("E{$contador}", $list['apellido_Paterno']);
            $sheet->setCellValue("F{$contador}", $list['apellido_Materno']);
            $sheet->setCellValue("G{$contador}", $list['nombres']);
            $sheet->setCellValue("H{$contador}", $comentario);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Colaboradores Obs. (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }


    //---------------------------------------------FOTOCHECK COLABORADORES-------------------------------------------
    public function Fotocheck_Colaborador()
    {
        if ($this->session->userdata('usuario')) {

            $dato['pendientes'] = count($this->Model_IFV->get_pendiente_fotocheck());


            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);
            $dato['cantidad_fotochecks'] = count($this->Model_IFV->get_list_fotocheck(1));


            $this->load->view('view_IFV/fotocheck_colaborador/index', $dato);
        }
    }

    public function Lista_Fotocheck_Colaboradores_Ifv()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['list_fotocheck'] = $this->Model_IFV->get_list_fotocheck_colab($dato['tipo']);
            $this->load->view('view_IFV/fotocheck_colaborador/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Modal_Foto_Colab_Ifv($id_fotocheck)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_fotocheck_colab($id_fotocheck);
            $this->load->view('view_IFV/fotocheck_colaborador/modal_foto', $dato);
        } else {
            redirect('');
        }
    }


    public function Guardar_Foto_Colab()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_fotocheck'] = $this->input->post("id_fotocheck");
            $dato['id_matriculado'] = $this->input->post("Id");
            $dato['foto_fotocheck'] = $this->input->post("actual_foto_fotocheck");
            $dato['foto_fotocheck_2'] = $this->input->post("actual_foto_fotocheck_2");
            $dato['foto_fotocheck_3'] = $this->input->post("actual_foto_fotocheck_3");

            if ($_FILES["foto_fotocheck_2"]["name"] != "") {
                $get_doc = $this->Model_IFV->get_cod_documento_alumno('D01');
                if (file_exists($dato['foto_fotocheck_2'])) {
                    unlink($dato['foto_fotocheck_2']);
                }
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto_fotocheck_2"]["name"]);
                $config['upload_path'] = './documento_alumno_fv/' . $get_doc[0]['id_documento'] . '/' . $dato['id_matriculado'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./documento_alumno_fv/', 0777);
                    chmod('./documento_alumno_fv/' . $get_doc[0]['id_documento'], 0777);
                    chmod('./documento_alumno_fv/' . $get_doc[0]['id_documento'] . '/' . $dato['id_matriculado'], 0777);
                }
                $config["allowed_types"] = 'jpeg|png|jpg|pdf|JPEG|JPG|PNG|PDF';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["foto_fotocheck_2"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["foto_fotocheck_2"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["foto_fotocheck_2"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["foto_fotocheck_2"]["error"];
                $_FILES["file"]["size"] = $_FILES["foto_fotocheck_2"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['foto_fotocheck_2'] = "documento_alumno_fv/" . $get_doc[0]['id_documento'] . "/" . $dato['id_matriculado'] . "/" . $dato['nom_documento'];
                }

                $dato['n_foto'] = 2;
                $this->Model_IFV->update_foto_fotocheck_Colab($dato);
                /*$get_detalle = $this->Model_IFV->get_detalle_alumno_empresa($dato['id_matriculado'],$get_doc[0]['id_documento']);
                $dato['id_detalle'] = $get_detalle[0]['id_detalle'];
                $dato['archivo'] = $dato['foto_fotocheck_2'];
                $this->Model_IFV->update_documento_alumno($dato);*/
            }

            if ($_FILES["foto_fotocheck"]["name"] != "") {
                $get_doc = $this->Model_IFV->get_cod_documento_alumno('D00');
                if (file_exists($dato['foto_fotocheck'])) {
                    unlink($dato['foto_fotocheck']);
                }
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto_fotocheck"]["name"]);
                $config['upload_path'] = './documento_alumno_fv/' . $get_doc[0]['id_documento'] . '/' . $dato['id_matriculado'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./documento_alumno_fv/', 0777);
                    chmod('./documento_alumno_fv/' . $get_doc[0]['id_documento'], 0777);
                    chmod('./documento_alumno_fv/' . $get_doc[0]['id_documento'] . '/' . $dato['id_matriculado'], 0777);
                }
                $config["allowed_types"] = 'jpeg|png|jpg|pdf|JPEG|JPG|PNG|PDF';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["foto_fotocheck"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["foto_fotocheck"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["foto_fotocheck"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["foto_fotocheck"]["error"];
                $_FILES["file"]["size"] = $_FILES["foto_fotocheck"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['foto_fotocheck'] = "documento_alumno_fv/" . $get_doc[0]['id_documento'] . "/" . $dato['id_matriculado'] . "/" . $dato['nom_documento'];
                }

                $dato['n_foto'] = 1;
                $this->Model_IFV->update_foto_fotocheck_Colab($dato);
                /*$get_detalle = $this->Model_IFV->get_detalle_alumno_empresa($dato['id_matriculado'],$get_doc[0]['id_documento']);
                $dato['id_detalle'] = $get_detalle[0]['id_detalle'];
                $dato['archivo'] = $dato['foto_fotocheck'];
                $this->Model_IFV->update_documento_alumno($dato);*/
            }

            if ($_FILES["foto_fotocheck_3"]["name"] != "") {
                if (file_exists($dato['foto_fotocheck_3'])) {
                    unlink($dato['foto_fotocheck_3']);
                }
                $dato['nom_documento'] = str_replace(' ', '_', $_FILES["foto_fotocheck_3"]["name"]);
                $config['upload_path'] = './documento_alumno_fv/0/' . $dato['id_matriculado'];
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./documento_alumno_fv/', 0777);
                    chmod('./documento_alumno_fv/0', 0777);
                    chmod('./documento_alumno_fv/0/' . $dato['id_matriculado'], 0777);
                }
                $config["allowed_types"] = 'jpeg|png|jpg|pdf|JPEG|JPG|PNG|PDF';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $_FILES["foto_fotocheck_3"]["name"];
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["foto_fotocheck_3"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["foto_fotocheck_3"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["foto_fotocheck_3"]["error"];
                $_FILES["file"]["size"] = $_FILES["foto_fotocheck_3"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['foto_fotocheck_3'] = "documento_alumno_fv/0/" . $dato['id_matriculado'] . "/" . $dato['nom_documento'];
                }

                $dato['n_foto'] = 3;
                $this->Model_IFV->update_foto_fotocheck($dato);
            }

            $valida = $this->Model_IFV->valida_fotocheck_completo_Colab($dato['id_fotocheck']);

            if (count($valida) == 0) {
                $this->Model_IFV->update_fotocheck_completo_Colab($dato);
            }

            /*$foto=  $_FILES["foto_fotocheck"]["type"];
            $foto2= $_FILES["foto_fotocheck_2"]["type"];
            $foto3= $_FILES["foto_fotocheck_3"]["type"];

            $alumno=$this->Model_IFV->get_id_fotocheck($id_matriculado);
            $cantidad=$alumno[0]['total_subidos'];
            if($alumno[0]['foto_fotocheck']!='' && $foto!=''){
                $cantidad--;
            }
            if($alumno[0]['foto_fotocheck_2']!='' && $foto2!=''){
                $cantidad--;
            }
            if($alumno[0]['foto_fotocheck_3']!='' && $foto3!=''){
                $cantidad--;
            }
            $this->Model_IFV->insert_foto_fotocheck($id_matriculado,$cantidad);*/
        } else {
            redirect('/login');
        }
    }

    public function Carne_Colaborador($id_fotocheck)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_fotocheck_colab($id_fotocheck);
            $dato['altura'] = 560;//+$cantidad_filas;

            $mpdf = new \Mpdf\Mpdf([
                'margin_top' => 0,
                'mode' => 'utf-8',
                'format' => array(55, 85), 'portrait',
                'margin_bottom' => 0,
                'margin_right' => -14,
                'bleedMargin' => 0,
                'crossMarkMargin' => 0,
                'cropMarkMargin' => 0,
                'nonPrintMargin' => 0,
                'margBuffer' => 0,
                'collapseBlockMargins' => false,
                'default_font' => 'Gotham',
            ]);
            $html = $this->load->view('view_IFV/fotocheck_colaborador/carnet', $dato, true);
            //$mpdf->SetHTMLHeader("Content-Disposition: inline");
            $mpdf->WriteHTML($html);
            $mpdf->Output($dato['get_id'][0]['Id'] . ".pdf", "I");
        } else {
            redirect('');
        }
    }

    public function Modal_Detalle_Colab($id_fotocheck)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_fotocheck_colab($id_fotocheck);
            $this->load->view('view_IFV/fotocheck_colaborador/modal_detalle', $dato);
        } else {
            redirect('');
        }
    }

    public function Impresion_Fotocheck_Colab()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_fotocheck'] = $this->input->post("id_fotocheck");
            $this->Model_IFV->impresion_fotocheck_colab($dato);
        } else {
            redirect('');
        }
    }

    /// Detalle Postulante
    public function Detalle_Postulantes_C($id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_postulantes($id_alumno);
            $dni_alumno = $dato['get_id'][0]['Nro_Doc_Alumno'];
            $dato['list_grupo'] = $this->Model_IFV->get_grupo_postulante($dni_alumno);
            //$dato['get_foto'] = $this->Model_IFV->get_list_foto_matriculados($id_alumno);
            $dato['list_modulo'] = $this->Model_IFV->get_ingresos_modulo($id_alumno);
            $dato['list_tutor'] = $this->Model_IFV->get_id_postulantes($id_alumno);
            $dato['id_empresa'] = 6;

            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
            $dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
            $dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
            $dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa'] = $this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/postulantes_formulario/detalle_postulante', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Fotocheck_Colaboradores()
    {
        if ($this->session->userdata('usuario')) {
            $dato['tipo'] = $this->input->post("tipo");
            $dato['list_fotocheck'] = $this->Model_IFV->get_list_fotocheck_colab($dato['tipo']);
            $this->load->view('view_IFV/fotocheck_colaborador/lista', $dato);
        } else {
            redirect('');
        }
    }

    public function Modal_Anular_Colab($id_fotocheck)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_fotocheck_colab($id_fotocheck);
            $this->load->view('view_IFV/fotocheck_colaborador/modal_anular', $dato);
        } else {
            redirect('');
        }
    }

    public function Anular_Envio_Colab()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_fotocheck'] = $this->input->post("id_fotocheck");
            $dato['obs_anulado'] = $this->input->post("obs_anulado");
            $this->Model_IFV->anular_envio_colab($dato);
        } else {
            redirect('/login');
        }
    }

    public function Modal_Envio_Colab()
    {
        if ($this->session->userdata('usuario')) {
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            //$dato['get_id'] = $this->Model_IFV->get_list_todos_alumno(1);
            $dato['get_id_user'] = $this->Model_IFV->get_id_user();
            $dato['list_cargo_sesion'] = $this->Model_IFV->get_cargo_x_id($id_usuario);
            $this->load->view('view_IFV/fotocheck_colaborador/modal_envio', $dato);
        } else {
            redirect('');
        }
    }

    public function Traer_Cargo()
    {
        if ($this->session->userdata('usuario')) {
            $id_usuario_de = $this->input->post("usuario_encomienda");
            $dato['list_cargo'] = $this->Model_IFV->get_cargo_x_id($id_usuario_de);
            $dato['id_cargo'] = "cargo_envio_f";
            $this->load->view('view_IFV/fotocheck_colaborador/cargo', $dato);
        } else {
            redirect('');
        }
    }

    public function Guardar_Envio_Colab()
    {
        if ($this->session->userdata('usuario')) {
            $cadena = substr($this->input->post("cadena"), 0, -1);
            $cantidad = $this->input->post("cantidad");

            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $id_nivel = $_SESSION['usuario'][0]['id_nivel'];

            if ($id_usuario == 1 || $id_nivel == 6 || $id_usuario == 7) {
                $dato['usuario_encomienda'] = $this->input->post("id_usuario_u");
            } else {
                $dato['usuario_encomienda'] = $_SESSION['usuario'][0]['id_usuario'];
            }

            $dato['fecha_envio'] = $this->input->post("fecha_u");
            $dato['cargo_envio'] = $this->input->post("id_cargo_u");

            if ($cantidad > 0) {
                $array = explode(",", $cadena);
                $i = 0;

                while ($i < count($array)) {
                    $dato['id_fotocheck'] = $array[$i];

                    $alumno = $this->Model_IFV->get_id_fotocheck_colab($dato['id_fotocheck']);

                    if (count($alumno) > 0) {
                        if ($alumno[0]['esta_fotocheck'] == 'Foto Rec') {
                            $this->Model_IFV->update_envio_fotocheck_colab($dato);
                        }
                    }

                    $i++;
                }
            }
        } else {
            redirect('/login');
        }
    }

    public function Detalle_Admision_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['dni_postulante'] = $this->input->post("dni_postulante");
            $dato['grupo'] = $this->input->post("grupo");
            $dato['get_id'] = $this->Model_IFV->get_id_postulantes_grupo($dato['dni_postulante'], $dato['grupo']);
            $this->load->view('view_IFV/postulantes_formulario/detalle_admision', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Lista_Documento_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_postulante'] = $this->input->post("id_postulante");
            $dato['list_documento'] = $this->Model_IFV->get_list_documento_postulante($dato['id_postulante']);

            $this->load->view('view_IFV/postulantes_formulario/lista_documentos_postulante', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Documento_Postulante($id_postulante)
    {
        $list_documento = $this->Model_IFV->get_list_documento_postulante($id_postulante);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("B1:D2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("B1:D2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Documentos');

        $sheet->setAutoFilter('B2:D2');

        $sheet->getColumnDimension('B')->setWidth(30);
        $sheet->getColumnDimension('C')->setWidth(30);
        $sheet->getColumnDimension('D')->setWidth(20);

        $sheet->getStyle('B2:D2')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("B2:D2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("B2:D2")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("B2", 'Nombre');
        $sheet->setCellValue("C2", 'Nombre Documento');
        $sheet->setCellValue("D2", 'Fecha Subido');

        $contador = 2;

        $sheet->freezePane('A3');

        foreach ($list_documento as $list) {
            $contador++;

            $sheet->getStyle("B{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("B{$contador}:D{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("B{$contador}:D{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("B{$contador}", $list['ColumnaNombre']);
            $sheet->setCellValue("C{$contador}", $list['ColumnaValor']);
            $sheet->setCellValue("D{$contador}", Date::PHPToExcel($list['Fec_reg']));
            $sheet->getStyle("D{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Documentos (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Sms_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            /*
            $id_postulante = $this->input->post("id_postulante");
            $get_id = $this->Model_IFV->get_id_matriculados($id_postulante);
            $dato['list_sms'] = $this->Model_IFV->get_list_sms_matriculados($get_id[0]['Celular']);
            $this->load->view('view_IFV/postulantes_formulario/lista_sms_postulante',$dato);*/
            $this->load->view('view_IFV/postulantes_formulario/lista_sms_postulante');
        } else {
            redirect('/login');
        }
    }

    public function Excel_Sms_Postulante($id_alumno)
    {
        $get_id = $this->Model_IFV->get_id_matriculados($id_alumno);
        $list_sms = $this->Model_IFV->get_list_sms_matriculados($get_id[0]['Celular']);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:C1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:C1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('SMS Alumno');

        $sheet->setAutoFilter('A1:C1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(200);

        $sheet->getStyle('A1:C1')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("A1:C1")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:C1")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("A1", 'Fecha');
        $sheet->setCellValue("B1", 'Usuario');
        $sheet->setCellValue("C1", 'Mensaje');

        $contador = 1;

        foreach ($list_sms as $list) {
            $contador++;

            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("B{$contador}:C{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:C{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:C{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['fecha']);
            $sheet->setCellValue("B{$contador}", $list['usuario']);
            $sheet->setCellValue("C{$contador}", $list['mensaje']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'SMS Alumno (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Lista_Ingreso_Postulante()
    {
        if ($this->session->userdata('usuario')) {

            $this->load->view('view_IFV/postulantes_formulario/lista_ingreso_postulante');

        } else {
            redirect('/login');
        }
    }

    public function Lista_Contrato_Postulante()
    {
        if ($this->session->userdata('usuario')) {

            $this->load->view('view_IFV/postulantes_formulario/lista_contrato_postulante');

        } else {
            redirect('/login');
        }
    }

    public function Lista_Pago_Arpay_Postulante()
    {
        if ($this->session->userdata('usuario')) {

            $this->load->view('view_IFV/postulantes_formulario/lista_pagos_arpay');

        } else {
            redirect('/login');
        }
    }

    public function Lista_Pago_Snappy_Postulante()
    {
        if ($this->session->userdata('usuario')) {

            $this->load->view('view_IFV/postulantes_formulario/lista_pagos_snappy');

        } else {
            redirect('/login');
        }
    }

    public function Lista_Observacion_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_postulante'] = $this->input->post("id_postulante");
            $dato['list_observacion'] = $this->Model_IFV->get_list_observacion_postulante($dato['id_postulante']);
            $this->load->view('view_IFV/postulantes_formulario/lista_observacion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Observacion_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_postulante'] = $this->input->post("id_postulante");
            $dato['get_id'] = $this->Model_IFV->get_id_postulantes($dato['id_postulante']);
            $dato['list_tipo_obs'] = $this->Model_IFV->get_list_tipo_obs_postulante(1);
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_observacion_postulante();
            $this->load->view('view_IFV/postulantes_formulario/registrar_observacion', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Insert_Observacion_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_postulante'] = $this->input->post("id_postulante");
            $dato['id_tipo_observacion'] = $this->input->post("id_tipo_o");
            $id_tipo = $this->input->post("id_tipo_o");
            $dato['fecha'] = $this->input->post("fecha_o");
            $dato['usuario'] = $this->input->post("usuario_o");
            $dato['observacion'] = $this->input->post("observacion_o");
            //$dato['comentariog'] = $this->input->post("comentariog_o");

            if ($_FILES["observacion_archivo"]["name"] != "") {

                $dato['path'] = $_FILES['observacion_archivo']['name'];
                $fecha = date('Y-m-d');
                $path = $_FILES['observacion_archivo']['name'];

                $ext = pathinfo($path, PATHINFO_EXTENSION);

                $mi_archivo = 'observacion_archivo';

                $dato['nom_documento'] = "obs_historial" . $dato['id_postulante'] . $fecha . "_" . rand(1, 200) . "." . $ext;
                $config['upload_path'] = './alumno/ifv/observacion/' . $dato['id_postulante'];//ruta del archivo
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./alumno/ifv/observacion/', 0777);
                    chmod('./alumno/ifv/observacion/' . $dato['id_postulante'], 0777);
                }
                $config["allowed_types"] = 'pdf|PDF|jpg|JPG|jpeg|JPEG|mp4|png|PNG';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $_FILES["file"]["name"] = $dato['nom_documento'];
                $_FILES["file"]["type"] = $_FILES["observacion_archivo"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["observacion_archivo"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["observacion_archivo"]["error"];
                $_FILES["file"]["size"] = $_FILES["observacion_archivo"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['observacion_archivo'] = "alumno/ifv/observacion/" . $dato['id_postulante'] . "/" . $dato['nom_documento'];
                }
            } else {
                $dato['observacion_archivo'] = "";
            }

            if ($id_tipo != 0) {

                $valida = $this->Model_IFV->valida_insert_observacion_postulante($dato);

                if (count($valida) > 0) {
                    echo "error";
                } else {
                    $this->Model_IFV->insert_observacion_postulante($dato);
                }
            }

            //$this->Model_IFV->update_comentario_alumno($dato);

        } else {
            redirect('/login');
        }
    }

    //pendiente por consultar funcionamiento
    public function Descargar_Archivo_postulante($id_comuimg)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_id_obsaimg_postulante($id_comuimg);
            $image = $dato['get_file'][0]['observacion_archivo'];
            $name = basename($image);
            $ext = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name, file_get_contents($dato['get_file'][0]['observacion_archivo']));
        } else {
            redirect('');
        }
    }


    public function Editar_Observacion_Postulacion()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_observacion'] = $this->input->post("id_observacion");
            $dato['get_id'] = $this->Model_IFV->get_list_observacion_postulante(null, $dato['id_observacion']);
            $dato['list_tipo_obs'] = $this->Model_IFV->get_list_tipo_obs_postulante(1);
            $dato['list_usuario'] = $this->Model_IFV->get_list_usuario_observacion_postulante();
            $this->load->view('view_IFV/postulantes_formulario/editar_observacion', $dato);

        } else {
            redirect('/login');
        }
    }

    public function Update_Observacion_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_observacion'] = $this->input->post("id_observacion");
            $dato['id_postulante'] = $this->input->post("id_postulante");
            $dato['id_tipo_observacion'] = $this->input->post("id_tipo_o");
            $dato['fecha'] = $this->input->post("fecha_o");
            $dato['usuario'] = $this->input->post("usuario_o");
            $dato['observacion'] = $this->input->post("observacion_o");

            $valida = $this->Model_IFV->valida_update_observacion_postulante($dato);

            if (count($valida) > 0) {
                echo "error";
            } else {
                $this->Model_IFV->update_observacion_postulante($dato);
            }
        } else {
            redirect('/login');
        }
    }

    public function Delete_Observacion_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_observacion'] = $this->input->post("id_observacion");


            $dato['get_id'] = $this->Model_IFV->get_id_obsaimg_postulante($dato['id_observacion']);

            if (file_exists($dato['get_id'][0]['observacion_archivo'])) {
                unlink($dato['get_id'][0]['observacion_archivo']);
            }

            $this->Model_IFV->delete_observacion_postulante($dato);
        } else {
            redirect('/login');
        }
    }

    public function Excel_Observacion_Postulante($id_alumno)
    {
        $list_observacion = $this->Model_IFV->get_list_observacion_postulante($id_alumno);

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("B1:E2")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("B1:E2")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Observaciones');

        $sheet->setAutoFilter('B2:E2');

        $sheet->getColumnDimension('B')->setWidth(15);
        $sheet->getColumnDimension('C')->setWidth(15);
        $sheet->getColumnDimension('D')->setWidth(15);
        $sheet->getColumnDimension('E')->setWidth(80);

        $sheet->getStyle('B2:E2')->getFont()->setBold(true);

        $spreadsheet->getActiveSheet()->getStyle("B2:E2")->getFill()
            ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
            ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("B2:E2")->applyFromArray($styleThinBlackBorderOutline);

        $sheet->setCellValue("B2", 'Fecha');
        $sheet->setCellValue("C2", 'Tipo');
        $sheet->setCellValue("D2", 'Usuario');
        $sheet->setCellValue("E2", 'Comentario');

        $contador = 2;

        $sheet->freezePane('A3');

        foreach ($list_observacion as $list) {
            $contador++;

            $sheet->getStyle("B{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("D{$contador}:E{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("B{$contador}:E{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("B{$contador}:E{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("B{$contador}", Date::PHPToExcel($list['Fecha']));
            $sheet->getStyle("B{$contador}")->getNumberFormat()->setFormatCode(NumberFormat::FORMAT_DATE_DDMMYYYY);
            $sheet->setCellValue("C{$contador}", $list['nom_tipo']);
            $sheet->setCellValue("D{$contador}", $list['usuario']);
            $sheet->setCellValue("E{$contador}", $list['observacion']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Observaciones (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="' . $filename . '.xlsx"');
        header('Cache-Control: max-age=0');

        $writer->save('php://output');
    }

    public function Descargar_Documento_Postulante($id_admision, $nombre_documento)
    {
        if ($this->session->userdata('usuario')) {
            $dato['doc'] = $this->Model_IFV->get_id_doc_postulante($id_admision);
            $nombreArchivo = $dato['doc'][0][$nombre_documento];

            $rutaBaseArchivos = 'C:/xampp/htdocs/webgllg/ifv/admision/';
            $rutaCompletaArchivo = $rutaBaseArchivos . $nombreArchivo;

            force_download($rutaCompletaArchivo, NULL);

        } else {
            redirect('');
        }
    }

    public function Delete_Documento_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_detalle'] = $this->input->post("id_detalle");
            $dato['doc'] = $this->Model_IFV->get_id_detalle_alumno_empresa($dato['id_detalle']);
            unlink($dato['doc'][0]['archivo']);
            $this->Model_IFV->delete_documento_alumno($dato);
        } else {
            redirect('/login');
        }
    }

    public function Editar_Postulante($id_alumno)
    {
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_id_postulante_upd($id_alumno);
            $dato['list_tutor'] = $this->Model_IFV->get_id_postulante_upd($id_alumno);

            $dato['list_tipo_doc'] = $this->Model_IFV->get_list_tipo_doc_post(2, null); //dni
            $dato['list_sexo'] = $this->Model_IFV->get_list_tipo_doc_post(4, null);
            $dato['list_parentesco'] = $this->Model_IFV->get_list_tipo_doc_post(5, null);
            $dato['list_programa_interes'] = $this->Model_IFV->get_list_programa_interes_post(22); //especialidad
            $dato['list_cen'] = $this->Model_IFV->get_list_tipo_doc_post(7, null);
            $dato['list_departamento'] = $this->Model_IFV->get_list_departamento();

            //$dato['list_turno'] = $this->Model_IFV->get_list_tipo_doc(3);
            //$dato['list_modalidad'] = $this->Model_IFV->get_list_tipo_doc(8);
            $dato['list_estados'] = $this->Model_IFV->get_list_tipo_doc(9);

            $this->load->view('view_IFV/postulantes_formulario/editar_postulante', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Listar_Modalidad()
    {
        $dato['admi_programa_admision'] = $this->input->post("admi_programa_admision");
        $dato['list_modalidad'] = $this->Model_IFV->get_list_tipo_doc_post(8, $dato);
        $this->load->view('view_IFV/postulantes_formulario/lista_modalidad', $dato);
    }

    //---------------------------------------------DOCUMENTO_POSTULANTES-------------------------------------------
    public function Documento_Postulantes() {
        if ($this->session->userdata('usuario')) {
            //NO BORRAR AVISO
            $dato['cant_avisos'] = count($this->Model_General->get_list_aviso());
            $dato['list_aviso'] = $this->Model_General->get_list_aviso();

            //----------------NO BORRAR ES PARA EL MENU DINAMICO----------------
$dato['contador_contactenos'] = $this->Model_IFV->get_list_contactenos(1);
$dato['cierres_caja_pendientes'] = count($this->Model_IFV->get_cierres_caja_pendientes());
$dato['cierres_caja_sin_cofre'] = count($this->Model_IFV->get_cierres_caja_sin_cofre());
            $nivel = $_SESSION['usuario'][0]['id_nivel'];
            $id_usuario = $_SESSION['usuario'][0]['id_usuario'];
            $dato['menu'] = $this->Admin_model->get_list_menus_usuario($id_usuario);
            $dato['modulo'] = $this->Admin_model->get_list_modulo($id_usuario);
            $dato['submodulo'] = $this->Admin_model->get_list_submodulo($id_usuario);
            $dato['list_empresa']=$this->Admin_model->get_id_empresa_usuario($id_usuario);
            $dato['list_nav_sede'] = $this->Model_IFV->get_list_nav_sede();
            //$dato['cantidadnulos'] = $this->Model_IFV->get_list_matriculadosnulosst(1);
            $dato['contador_renovar'] = $this->Model_IFV->get_busqueda_centro_contadores(1);
            $dato['contador_caducado'] = $this->Model_IFV->get_busqueda_centro_contadores(2);

            $this->load->view('view_IFV/documento_postulante/index',$dato);
        }else{
            redirect('/login');
        }
    }

    public function Lista_Documento_Postulantes() {
        if ($this->session->userdata('usuario')) {
            $dato['list_documento_postulante'] = $this->Model_IFV->get_list_documento_post();
            $this->load->view('view_IFV/documento_postulante/lista',$dato);
        }else{
            redirect('/login');
        }
    }

    public function Modal_Documento_Postulante(){
        if ($this->session->userdata('usuario')) {
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo_postulante();
            $this->load->view('view_IFV/documento_postulante/modal_registrar',$dato);   
        }else{
            redirect('/login');
        }
    }

    public function Insert_Documento_Postulante(){
        $dato['cod_documento']= $this->input->post("cod_documento_i");
        $dato['id_especialidad']= $this->input->post("id_especialidad_i");
        $dato['nom_documento']= $this->input->post("nom_documento_i");
        $dato['descripcion_documento']= $this->input->post("descripcion_documento_i");  
        $dato['obligatorio']= $this->input->post("obligatorio_i");
        $dato['digital']= $this->input->post("digital_i");
        $dato['aplicar_todos']= $this->input->post("aplicar_todos_i");
        $dato['departamento']= $this->input->post("departamento_i");
        $dato['aparece_doc']= $this->input->post("aparece_doc_i");
        $dato['validacion']= $this->input->post("validacion_i");

        $total=count($this->Model_IFV->valida_insert_documento_postulante($dato));
 
        if($total>0){
            echo "error";
        }else{
            $this->Model_IFV->insert_documento_postulante($dato);        
            if($dato['aplicar_todos']==1){
                $get_id = $this->Model_IFV->ultimo_id_documento_postulante();
                $dato['id_documento'] = $get_id[0]['id_documento'];
                $dato['anio'] = date('Y');

                $list_postulante = $this->Model_IFV->get_list_postulante_documento_todos();

                foreach($list_postulante as $list){
                    $dato['id_postulante'] = $list['id_admision'];
                    $valida = $this->Model_IFV->valida_insert_documento_todos_postulante($dato);
                    if(count($valida)==0){
                        $this->Model_IFV->insert_documento_todos_postulante($dato);
                    }
                }
            }
        }
    }

    public function Modal_Update_Documento_Postulante($id_documento){
        if ($this->session->userdata('usuario')) {
            $dato['get_id'] = $this->Model_IFV->get_list_documento_post($id_documento);
            $dato['list_especialidad'] = $this->Model_IFV->get_list_especialidad_combo_postulante();
            $dato['list_status'] = $this->Model_IFV->get_list_estado_post();
            $this->load->view('view_IFV/documento_postulante/modal_editar', $dato);   
        }else{
            redirect('/login');
        }
    }

    public function Update_Documento_Postulante(){
        $dato['id_documento']= $this->input->post("id_documento");
        $dato['cod_documento']= $this->input->post("cod_documento_u");
        $dato['id_especialidad']= $this->input->post("id_especialidad_u");
        $dato['nom_documento']= $this->input->post("nom_documento_u");
        $dato['descripcion_documento']= $this->input->post("descripcion_documento_u");  
        $dato['obligatorio']= $this->input->post("obligatorio_u");
        $dato['digital']= $this->input->post("digital_u");
        $dato['aplicar_todos']= $this->input->post("aplicar_todos_u");
        $dato['estado']= $this->input->post("estado_u");
        $dato['departamento']= $this->input->post("departamento_u");
        $dato['aparece_doc']= $this->input->post("aparece_doc_u");
        $dato['validacion']= $this->input->post("validacion_u");

        $total=count($this->Model_IFV->valida_update_documento_postulante($dato));

        if($total>0){
            echo "error";
        }else{
            $this->Model_IFV->update_documento_postulante($dato);
            if($dato['aplicar_todos']==1){
                $dato['anio'] = date('Y');

                $list_postulante = $this->Model_IFV->get_list_postulante_documento_todos();

                foreach($list_postulante as $list){
                    $dato['id_admision'] = $list['id_postulante'];
                    $valida = $this->Model_IFV->valida_insert_documento_todos_postulante($dato);
                    if(count($valida)==0){
                        $this->Model_IFV->insert_documento_todos_postulante($dato);
                    }
                }
            }
        }
    }

    public function Delete_Documento_Post(){
        $dato['id_documento']= $this->input->post("id_documento");
        $this->Model_IFV->delete_documento_validar_postulante($dato);
    }

    public function Excel_Documento_Post(){
        $list_documento_postulante = $this->Model_IFV->get_list_documento_post();

        $spreadsheet = new Spreadsheet();
        $sheet = $spreadsheet->getActiveSheet();

        $sheet->getStyle("A1:G1")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
        $sheet->getStyle("A1:G1")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);

        $spreadsheet->getActiveSheet()->setTitle('Documento');

        $sheet->setAutoFilter('A1:G1');

        $sheet->getColumnDimension('A')->setWidth(15);
        $sheet->getColumnDimension('B')->setWidth(20);
        $sheet->getColumnDimension('C')->setWidth(50);
        $sheet->getColumnDimension('D')->setWidth(50);
        $sheet->getColumnDimension('E')->setWidth(20);
        $sheet->getColumnDimension('F')->setWidth(15);
        $sheet->getColumnDimension('G')->setWidth(15);

        $sheet->getStyle('A1:G1')->getFont()->setBold(true);  

        $spreadsheet->getActiveSheet()->getStyle("A1:G1")->getFill()
        ->setFillType(\PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID)
        ->getStartColor()->setARGB('C8C8C8');

        $styleThinBlackBorderOutline = [
            'borders' => [
                'allBorders' => [
                    'borderStyle' => Border::BORDER_THIN,
                    'color' => ['argb' => 'FF000000'],
                ],
            ],
        ];

        $sheet->getStyle("A1:G1")->applyFromArray($styleThinBlackBorderOutline);
          
        $sheet->setCellValue("A1", 'Código');
        $sheet->setCellValue("B1", 'Especialidad');
        $sheet->setCellValue("C1", 'Nombre');
        $sheet->setCellValue("D1", 'Descripción');
        $sheet->setCellValue("E1", 'Obligatorio');
        $sheet->setCellValue("F1", 'Estado');
        $sheet->setCellValue("G1", 'Validación');

        $contador=1;
        
        foreach($list_documento_postulante as $list){
            $contador++;

            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_CENTER);
            $sheet->getStyle("C{$contador}:D{$contador}")->getAlignment()->setHorizontal(Alignment::HORIZONTAL_LEFT);
            $sheet->getStyle("A{$contador}:G{$contador}")->getAlignment()->setVertical(Alignment::VERTICAL_CENTER);
            $sheet->getStyle("A{$contador}:G{$contador}")->applyFromArray($styleThinBlackBorderOutline);

            $sheet->setCellValue("A{$contador}", $list['cod_documento']);
            $sheet->setCellValue("B{$contador}", $list['nom_especialidad']);
            $sheet->setCellValue("C{$contador}", $list['nom_documento']);
            $sheet->setCellValue("D{$contador}", $list['descripcion_documento']);
            $sheet->setCellValue("E{$contador}", $list['obligatorio']);
            $sheet->setCellValue("F{$contador}", $list['nom_status']);
            $sheet->setCellValue("G{$contador}", $list['validacion']);
        }

        $writer = new Xlsx($spreadsheet);
        $filename = 'Documento Postulante (Lista)';
        if (ob_get_contents()) ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename="'. $filename .'.xlsx"'); 
        header('Cache-Control: max-age=0');

        $writer->save('php://output'); 
    }

    public function Lista_Documento_Post() { 
        if ($this->session->userdata('usuario')) { 
            /*$dato['id_alumno'] = $this->input->post("id_alumno");
            $get_id = $this->Model_IFV->get_id_matriculados($dato['id_alumno']);

            $fec_de = new DateTime($get_id[0]['Fecha_Cumpleanos']);
            $fec_hasta = new DateTime(date('Y-m-d'));
            $diff = $fec_de->diff($fec_hasta); 
            $dato['has']=count($this->Model_IFV->get_has_year($dato['id_alumno'],$diff->y));
            $dato['list_documento']=$this->Model_IFV->get_list_documento_alumno($dato['id_alumno'],$diff->y);
            $dato['arpay']=$this->Model_IFV->get_list_documento_alumno_arpay($dato['id_alumno']);*/

            $dato['id_postulante'] = $this->input->post("id_postulante");
            $dato['list_documento_postulante']=$this->Model_IFV->get_list_documentos_postulante($dato['id_postulante']);

            $this->load->view('view_IFV/postulantes_formulario/lista_documentos_postulante',$dato);
        }else{
            redirect('/login');
        }
    }

    public function Descargar_Documento_Post($id_detalle) {
        if ($this->session->userdata('usuario')) {
            $dato['get_file'] = $this->Model_IFV->get_documento_postulante($id_detalle);
            $image = $dato['get_file'][0]['archivo'];
            $name     = basename($image);
            $ext      = pathinfo($image, PATHINFO_EXTENSION);
            force_download($name , file_get_contents($dato['get_file'][0]['archivo']));
        }
        else{
            redirect('/login');
        }
    }
            
    public function Listar_Turno()
    {
        $dato['admi_programa_admision'] = $this->input->post("admi_programa_admision");
        $dato['admi_modalidad_admision'] = $this->input->post("admi_modalidad_admision");
        $dato['list_turno'] = $this->Model_IFV->get_list_tipo_doc_post(3, $dato);
        $this->load->view('view_IFV/postulantes_formulario/lista_turno', $dato);
    }

    public function Buscar_Provincia()
    {
        if ($this->session->userdata('usuario')) {
            $id_departamento = $this->input->post("id_departamento");
            $dato['list_provincia'] = $this->Model_IFV->get_list_provincia($id_departamento);
            $this->load->view('view_IFV/postulantes_formulario/list_provincia', $dato);
        } else {
            redirect('');
        }
    }

    public function Busca_Distrito_Edit()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_departamento'] = $this->input->post("id_departamento");
            $dato['id_provincia'] = $this->input->post("id_provincia");
            $dato['list_distrito'] = $this->Model_IFV->get_list_distrito_post($dato);
            $this->load->view('view_IFV/postulantes_formulario/list_distrito', $dato);
        } else {
            redirect('');
        }
    }

    public function Update_Datos_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_admision'] = $this->input->post("id_admision");
            $dato['alum_apepat_admision'] = $this->input->post("alum_apepat_admision");
            $dato['alum_apemat_admision'] = $this->input->post("alum_apemat_admision");
            $dato['alum_nombre_admision'] = $this->input->post("alum_nombre_admision");
            $dato['tipo_doc_e'] = $this->input->post("tipo_doc_e");
            $dato['dni_postulante'] = $this->input->post("dni_postulante");
            $dnialumno = $this->input->post("dni_postulante");
            $dato['fechaNacimiento'] = $this->input->post("fechaNacimiento");
            $dato['sexo_e'] = $this->input->post("sexo_e");
            $dato['cont_celular_admision'] = $this->input->post("cont_celular_admision");
            $dato['cont_email_admision'] = $this->input->post("cont_email_admision");
            $dato['cen_e'] = $this->input->post("cen_e");
            $dato['domi_dir_admision'] = $this->input->post("domi_dir_admision");
            $dato['admi_departamento_admision'] = $this->input->post("admi_departamento_admision");
            $dato['cod_provincia'] = $this->input->post("cod_provincia");
            $dato['cod_distrito'] = $this->input->post("cod_distrito");
            $dato['colegio_post'] = $this->input->post("colegio_post");
            $dato['col_departamento_admision'] = $this->input->post("col_departamento_admision");
            $dato['cod_provincia_col'] = $this->input->post("cod_provincia_col");
            $dato['cod_distrito_col'] = $this->input->post("cod_distrito_col");
            $dato['admi_programa_admision'] = $this->input->post("admi_programa_admision");
            $dato['admi_modalidad_admision'] = $this->input->post("admi_modalidad_admision");
            $dato['admi_turno_admision'] = $this->input->post("admi_turno_admision");

            $dato['nom_grupo'] = $this->Model_IFV->get_grupo($dato);

            $dato['doc_dni_alum_admision'] = $this->input->post("doc_dni_alum_admision");
            $dato['doc_dni_tuto_admision'] = $this->input->post("doc_dni_tuto_admision");
            $dato['doc_certificado_admision'] = $this->input->post("doc_certificado_admision");
            $dato['doc_tramite_admision'] = $this->input->post("doc_tramite_admision");
            $edad = $this->input->post("edad");

            //$dato['id_admision'] = $this->input->post("id_admision"); ya esta
            $dato['flag_seccion_doc'] = '1';
            $dato['flag_seccion_col'] = '1';
            $dato['flag_seccion_tutor'] = '1';
            $dato['flag_seccion_admi'] = '1';
            $dato['flag_seccion_domi'] = '1';
            $dato['flag_seccion_alum'] = '1';
            $dato['flag_seccion_cont'] = '1';
            if ($dato['colegio_post'] == "" || $dato['col_departamento_admision'] == "0" || $dato['cod_provincia_col'] == "0" || $dato['cod_distrito_col'] == "0") {
                $dato['flag_seccion_col'] = '0';
            }

            if ($dato['admi_programa_admision'] == "0" || $dato['admi_modalidad_admision'] == "5" || $dato['cen_e'] == "0" || $dato['admi_turno_admision'] == "5") {
                $dato['flag_seccion_admi'] = '0';
            }
            if ($dato['domi_dir_admision'] == "" || $dato['admi_departamento_admision'] == "0" || $dato['cod_provincia'] == "0" || $dato['cod_distrito'] == "0") {
                $dato['flag_seccion_domi'] = '0';
            }
            if ($dato['alum_apepat_admision'] == "" || $dato['alum_apemat_admision'] == "" || $dato['alum_nombre_admision'] == "" || $dato['fechaNacimiento'] == "" || $dato['sexo_e'] == "5") {
                $dato['flag_seccion_alum'] = '0';
            }
            if ($dato['tipo_doc_e'] == '5' || $dato['dni_postulante'] == "" || $dato['cont_celular_admision'] == "" || $dato['cont_email_admision'] == "") {
                $dato['flag_seccion_cont'] = '0';
            }
            if ($dato['doc_dni_alum_admision'] == "") {
                $dato['doc_dni_alum_admision'] = null;
            }
            if ($dato['doc_dni_tuto_admision'] == "") {
                $dato['doc_dni_tuto_admision'] = null;
            }
            if ($dato['doc_certificado_admision'] == "") {
                $dato['doc_certificado_admision'] = 0;
            }
            //if($dato['doc_tramite_admision']==""){$dato['doc_tramite_admision']=0;}

            if ($dato['fechaNacimiento'] == "" || $dato['fechaNacimiento'] == "1900-01-01") {
                if ($_FILES["doc_dni_alum_admision"]["name"] == "" || $_FILES["doc_dni_tuto_admision"]["name"] == "" || ($_FILES["doc_certificado_admision"]["name"] != "" and $dato['doc_tramite_admision'] == 1)) {
                    $dato['flag_seccion_doc'] = '0';
                }
            } else {
                if ($_FILES["doc_dni_alum_admision"]["name"] != 0 || ($_FILES["doc_certificado_admision"]["name"] != "" and $dato['doc_tramite_admision'] == '')) {
                    $dato['flag_seccion_doc'] = '0';
                }
            }

            $dato['get_id_docu'] = $this->Model_IFV->get_id_contacto($dato);
            $dato['archivo_1'] = "";
            $dato['archivo_1_nombre'] = "";
            $dato['archivo_2'] = "";
            $dato['archivo_2_nombre'] = "";
            $dato['archivo_3'] = "";
            $dato['archivo_3_nombre'] = "";
            if ($dato['get_id_docu'][0]['doc_dni_alum_admision'] != "" && $_FILES["doc_dni_alum_admision"]["name"] == "") {
                $dato['archivo_1'] = $dato['get_id_docu'][0]['doc_dni_alum_admision'];
                $dato['archivo_1_nombre'] = $dato['get_id_docu'][0]['doc_nombre_dni_alum_admision'];
            }
            if ($dato['get_id_docu'][0]['doc_dni_tuto_admision'] != "" && $_FILES["doc_dni_tuto_admision"]["name"] == "") {
                $dato['archivo_2'] = $dato['get_id_docu'][0]['doc_dni_tuto_admision'];
                $dato['archivo_2_nombre'] = $dato['get_id_docu'][0]['doc_nombre_dni_tuto_admision'];
            }
            if ($dato['get_id_docu'][0]['doc_certificado_admision'] != "" && $_FILES["doc_certificado_admision"]["name"] == "") {
                $dato['archivo_3'] = $dato['get_id_docu'][0]['doc_certificado_admision'];
                $dato['archivo_3_nombre'] = $dato['get_id_docu'][0]['doc_nombre_certificado_admision'];
            }


            if ($_FILES["doc_dni_alum_admision"]["name"] != "") {
                if ($dato['get_id_docu'][0]['doc_dni_alum_admision'] != "") {
                    unlink('./DocumentosFormulario/' . $dnialumno . '/' . $dato['get_id_docu'][0]['doc_nombre_dni_alum_admision']);
                    rmdir('./DocumentosFormulario/' . $dnialumno . '/');
                }

                //echo($dnialumn);
                $dato['nom_archivo'] = str_replace(' ', '_', $_FILES["doc_dni_alum_admision"]["name"]);
                $config['upload_path'] = './DocumentosFormulario/' . $dnialumno . '/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./DocumentosFormulario/', 0777);
                    chmod('./DocumentosFormulario/' . $dnialumno . '/', 0777);
                    //echo('estoy aqui');
                }

                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $dnialumno;
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $nombre = $dato['nom_archivo'];
                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["doc_dni_alum_admision"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["doc_dni_alum_admision"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["doc_dni_alum_admision"]["error"];
                $_FILES["file"]["size"] = $_FILES["doc_dni_alum_admision"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['archivo_1'] = "DocumentosFormulario/" . $dnialumno . "/" . $nombre;
                    $dato['archivo_1_nombre'] = $nombre;
                }
            }

            if ($_FILES["doc_dni_tuto_admision"]["name"] != "") {
                if ($dato['get_id_docu'][0]['doc_dni_tuto_admision'] != "") {
                    unlink('./DocumentosFormulario/' . 'Tutor-' . $dnialumno . '/' . $dato['get_id_docu'][0]['doc_nombre_dni_tuto_admision']);
                    rmdir('./DocumentosFormulario/' . 'Tutor-' . $dnialumno . '/');
                }

                $dato['nom_archivo'] = str_replace(' ', '_', $_FILES["doc_dni_tuto_admision"]["name"]);
                $config['upload_path'] = './DocumentosFormulario/' . 'Tutor-' . $dnialumno . '/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./DocumentosFormulario/', 0777);
                    chmod('./DocumentosFormulario/' . 'Tutor-' . $dnialumno . '/', 0777);
                }
                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = 'Tutor-' . $dnialumno;
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $nombre = $dato['nom_archivo'];
                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["doc_dni_tuto_admision"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["doc_dni_tuto_admision"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["doc_dni_tuto_admision"]["error"];
                $_FILES["file"]["size"] = $_FILES["doc_dni_tuto_admision"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['archivo_2'] = "DocumentosFormulario/" . "Tutor-" . $dnialumno . "/" . $nombre;
                    $dato['archivo_2_nombre'] = $nombre;
                }
            }

            if ($_FILES["doc_certificado_admision"]["name"] != "") {
                if ($dato['get_id_docu'][0]['doc_dni_tuto_admision'] != "") {
                    unlink('./DocumentosFormulario/' . 'Certificado-' . $dnialumno . '/' . $dato['get_id_docu'][0]['doc_nombre_certificado_admision']);
                    rmdir('./DocumentosFormulario/' . 'Certificado-' . $dnialumno . '/');
                }

                $dato['nom_archivo'] = str_replace(' ', '_', $_FILES["doc_certificado_admision"]["name"]);
                $config['upload_path'] = './DocumentosFormulario/' . 'Certificado-' . $dnialumno . '/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./DocumentosFormulario/', 0777);
                    chmod('./DocumentosFormulario/' . 'Certificado-' . $dnialumno . '/', 0777);
                }
                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = 'Certificado-' . $dnialumno;
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $nombre = $dato['nom_archivo'];
                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["doc_certificado_admision"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["doc_certificado_admision"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["doc_certificado_admision"]["error"];
                $_FILES["file"]["size"] = $_FILES["doc_certificado_admision"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['archivo_3'] = "DocumentosFormulario/" . "Certificado-" . $dnialumno . "/" . $nombre;
                    $dato['archivo_3_nombre'] = $nombre;
                }
            }

            if ($edad < 18) {
                $dato['parentesco_tut_e'] = $this->input->post("parentesco_tut_e");
                $dato['tipo_doc_tutor'] = $this->input->post("tipo_doc_tutor");
                $dato['num_doc_tutor'] = $this->input->post("num_doc_tutor");
                $dato['apepat_admision_tutor'] = $this->input->post("apepat_admision_tutor");
                $dato['apemat_admision_tutor'] = $this->input->post("apemat_admision_tutor");
                $dato['nombres_admision_tutor'] = $this->input->post("nombres_admision_tutor");

                if ($dato['tipo_doc_tutor'] == "5" || $dato['num_doc_tutor'] == "" || $dato['parentesco_tut_e'] == "0" || $dato['apepat_admision_tutor'] == "" || $dato['apemat_admision_tutor'] == "" || $dato['nombres_admision_tutor'] == "") {
                    $dato['flag_seccion_tutor'] = '0';
                }
            }

            $this->Model_IFV->update_datos_postulante($dato, $edad);
        } else {
            redirect('');
        }
    }

    public function Eliminar_Documento_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            $dato['id_admision'] = $this->input->post("id_admision");
            $dato['campo'] = $this->input->post("campo");
            $dato['archivo'] = $this->input->post("archivo");
            $dato['doc'] = $this->Model_IFV->get_id_postulante_upd($dato['id_admision']);
            $nombre = $dato['campo'];
            //unlink($dato['doc'][0][$nombre]);
            //unlink($dato['doc'][0][$dato['archivo']]);
            if (file_exists($dato['doc'][0][$nombre])) {
                unlink($dato['doc'][0][$nombre]);
            }
            if (file_exists($dato['doc'][0][$dato['archivo']])) {
                unlink($dato['doc'][0][$dato['archivo']]);
            }
            $this->Model_IFV->delete_documento_postulante($dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Postulante()
    {
        if ($this->session->userdata('usuario')) {
            //$dato['get_id'] = $this->Model_IFV->get_id_postulante_upd($id_alumno);
            //$dato['list_tutor'] = $this->Model_IFV->get_id_postulante_upd($id_alumno);

            $dato['list_tipo_doc'] = $this->Model_IFV->get_list_tipo_doc_post(2, null); //dni
            $dato['list_sexo'] = $this->Model_IFV->get_list_tipo_doc_post(4, null);
            $dato['list_parentesco'] = $this->Model_IFV->get_list_tipo_doc_post(5, null);
            $dato['list_programa_interes'] = $this->Model_IFV->get_list_programa_interes_post(22); //editar para que sea toda la especialidad
            $dato['list_cen'] = $this->Model_IFV->get_list_tipo_doc_post(7, null);
            $dato['list_departamento'] = $this->Model_IFV->get_list_departamento();

            $dato['list_turno'] = $this->Model_IFV->get_list_tipo_doc(3);
            $dato['list_modalidad'] = $this->Model_IFV->get_list_tipo_doc(8);
            $dato['list_estados'] = $this->Model_IFV->get_list_tipo_doc(9);
            $this->load->view('view_IFV/postulantes_formulario/registrar_postulante', $dato);
        } else {
            redirect('/login');
        }
    }

    public function Registrar_Datos_Postulante(){
        if ($this->session->userdata('usuario')) {
            //$dato['id_admision'] = $this->input->post("id_admision");
            $dato['alum_apepat_admision'] = $this->input->post("alum_apepat_admision");
            $dato['alum_apemat_admision'] = $this->input->post("alum_apemat_admision");
            $dato['alum_nombre_admision'] = $this->input->post("alum_nombre_admision");
            $dato['tipo_doc_e'] = $this->input->post("tipo_doc_e");
            $dato['dni_postulante'] = $this->input->post("dni_postulante");
            $dnialumno = $this->input->post("dni_postulante");
            $dato['fechaNacimiento'] = $this->input->post("fechaNacimiento");
            $dato['sexo_e'] = $this->input->post("sexo_e");
            $dato['cont_celular_admision'] = $this->input->post("cont_celular_admision");
            $dato['cont_email_admision'] = $this->input->post("cont_email_admision");
            $dato['cen_e'] = $this->input->post("cen_e");
            $dato['domi_dir_admision'] = $this->input->post("domi_dir_admision");
            $dato['admi_departamento_admision'] = $this->input->post("admi_departamento_admision");
            $dato['cod_provincia'] = $this->input->post("cod_provincia");
            $dato['cod_distrito'] = $this->input->post("cod_distrito");
            $dato['colegio_post'] = $this->input->post("colegio_post");
            $dato['col_departamento_admision'] = $this->input->post("col_departamento_admision");
            $dato['cod_provincia_col'] = $this->input->post("cod_provincia_col");
            $dato['cod_distrito_col'] = $this->input->post("cod_distrito_col");
            $dato['admi_programa_admision'] = $this->input->post("admi_programa_admision");
            $dato['admi_modalidad_admision'] = $this->input->post("admi_modalidad_admision");
            $dato['admi_turno_admision'] = $this->input->post("admi_turno_admision");

            $dato['nom_grupo'] = $this->Model_IFV->get_grupo($dato);

            $dato['doc_dni_alum_admision'] = $this->input->post("doc_dni_alum_admision");
            $dato['doc_dni_tuto_admision'] = $this->input->post("doc_dni_tuto_admision");
            $dato['doc_certificado_admision'] = $this->input->post("doc_certificado_admision");
            $dato['doc_tramite_admision'] = $this->input->post("doc_tramite_admision");
            $edad = $this->input->post("edad");

            //$dato['id_admision'] = $this->input->post("id_admision"); ya esta
            $dato['flag_seccion_doc'] = '1';
            $dato['flag_seccion_col'] = '1';
            $dato['flag_seccion_tutor'] = '1';
            $dato['flag_seccion_admi'] = '1';
            $dato['flag_seccion_domi'] = '1';
            $dato['flag_seccion_alum'] = '1';
            $dato['flag_seccion_cont'] = '1';
            $dato['flag_btn_enviar'] = '0';
            if ($dato['colegio_post'] == "" || $dato['col_departamento_admision'] == "0" || $dato['cod_provincia_col'] == "0" || $dato['cod_distrito_col'] == "0") {
                $dato['flag_seccion_col'] = '0';
            }

            if ($dato['admi_programa_admision'] == "0" || $dato['admi_modalidad_admision'] == "5" || $dato['cen_e'] == "5" || $dato['admi_turno_admision'] == "5") {
                $dato['flag_seccion_admi'] = '0';
            }
            if ($dato['domi_dir_admision'] == "" || $dato['admi_departamento_admision'] == "0" || $dato['cod_provincia'] == "0" || $dato['cod_distrito'] == "0") {
                $dato['flag_seccion_domi'] = '0';
            }
            if ($dato['alum_apepat_admision'] == "" || $dato['alum_apemat_admision'] == "" || $dato['alum_nombre_admision'] == "" || $dato['fechaNacimiento'] == "" || $dato['sexo_e'] == "0") {
                $dato['flag_seccion_alum'] = '0';
            }
            if ($dato['tipo_doc_e'] == '0' || $dato['dni_postulante'] == "" || $dato['cont_celular_admision'] == "" || $dato['cont_email_admision'] == "") {
                $dato['flag_seccion_cont'] = '0';
            }

            if ($dato['doc_dni_alum_admision'] == "") {
                $dato['doc_dni_alum_admision'] = null;
            }
            if ($dato['doc_dni_tuto_admision'] == "") {
                $dato['doc_dni_tuto_admision'] = null;
            }
            if ($dato['doc_certificado_admision'] == "") {
                $dato['doc_certificado_admision'] = 0;
            }
            //if($dato['doc_tramite_admision']==""){$dato['doc_tramite_admision']=0;}

            if ($dato['fechaNacimiento'] == "" || $dato['fechaNacimiento'] == "1900-01-01") {
                if ($_FILES["doc_dni_alum_admision"]["name"] == "" || $_FILES["doc_dni_tuto_admision"]["name"] == "" || ($_FILES["doc_certificado_admision"]["name"] != "" and $dato['doc_tramite_admision'] == 1)) {
                    $dato['flag_seccion_doc'] = '0';
                }
            } else {
                if ($_FILES["doc_dni_alum_admision"]["name"] == '' || ($_FILES["doc_certificado_admision"]["name"] == "" and $dato['doc_tramite_admision'] == '')) {
                    $dato['flag_seccion_doc'] = '0';
                }
            }
            if ($dato['flag_seccion_doc'] == 1 && $dato['flag_seccion_col'] == 1 && $dato['flag_seccion_tutor'] == 1 && $dato['flag_seccion_admi'] == 1 &&
                $dato['flag_seccion_domi'] == 1 && $dato['flag_seccion_alum'] == 1 && $dato['flag_seccion_cont'] == 1) {
                $dato['flag_btn_enviar'] = '1';
            }

            $dato['get_id_docu'] = $this->Model_IFV->get_id_documento_x_postulante($dato);
            $dato['archivo_1'] = "";
            $dato['archivo_1_nombre'] = "";
            $dato['archivo_2'] = "";
            $dato['archivo_2_nombre'] = "";
            $dato['archivo_3'] = "";
            $dato['archivo_3_nombre'] = "";
            if($dato['get_id_docu'][0]['archivo_dni_alumno'] != "" && $_FILES["doc_dni_alum_admision"]["name"] == ""){
                $dato['archivo_1']=$dato['get_id_docu'][0]['archivo_dni_alumno'];
                $dato['archivo_1_nombre']=$dato['get_id_docu'][0]['archivo_dni_alumno'];
            }
            if($dato['get_id_docu'][0]['archivo_dni_tutor'] != "" && $_FILES["doc_dni_tuto_admision"]["name"] == ""){
                $dato['archivo_2']=$dato['get_id_docu'][0]['archivo_dni_tutor'];
                $dato['archivo_2_nombre']=$dato['get_id_docu'][0]['archivo_dni_tutor'];
            }
            if($dato['get_id_docu'][0]['archivo_certificado'] != "" && $_FILES["doc_certificado_admision"]["name"] == ""){
                $dato['archivo_3']=$dato['get_id_docu'][0]['archivo_certificado'];
                $dato['archivo_3_nombre']=$dato['get_id_docu'][0]['archivo_certificado'];
            }


            if ($_FILES["doc_dni_alum_admision"]["name"] != "") {
                if($dato['get_id_docu'][0]['archivo_dni_alumno'] != ""){
                    unlink('./DocumentosFormulario/'.$dnialumno.'/'.$dato['get_id_docu'][0]['archivo_dni_alumno']);
                    rmdir('./DocumentosFormulario/'.$dnialumno.'/');
                }

                //echo($dnialumn);
                $dato['nom_archivo'] = str_replace(' ', '_', $_FILES["doc_dni_alum_admision"]["name"]);
                $config['upload_path'] = './DocumentosFormulario/' . $dnialumno . '/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./DocumentosFormulario/', 0777);
                    chmod('./DocumentosFormulario/' . $dnialumno . '/', 0777);
                    //echo('estoy aqui');
                }

                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = $dnialumno;
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $nombre = $dato['nom_archivo'];
                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["doc_dni_alum_admision"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["doc_dni_alum_admision"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["doc_dni_alum_admision"]["error"];
                $_FILES["file"]["size"] = $_FILES["doc_dni_alum_admision"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['archivo_1'] = "DocumentosFormulario/" . $dnialumno . "/" . $nombre;
                    $dato['archivo_1_nombre'] = $nombre;
                }
            }

            if ($_FILES["doc_dni_tuto_admision"]["name"] != "") {
                if($dato['get_id_docu'][0]['archivo_dni_tutor'] != ""){
                    unlink('./DocumentosFormulario/'.'Tutor-'.$dnialumno.'/'.$dato['get_id_docu'][0]['archivo_dni_tutor']);
                    rmdir('./DocumentosFormulario/'.'Tutor-'.$dnialumno.'/');
                }

                $dato['nom_archivo'] = str_replace(' ', '_', $_FILES["doc_dni_tuto_admision"]["name"]);
                $config['upload_path'] = './DocumentosFormulario/' . 'Tutor-' . $dnialumno . '/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./DocumentosFormulario/', 0777);
                    chmod('./DocumentosFormulario/' . 'Tutor-' . $dnialumno . '/', 0777);
                }
                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = 'Tutor-' . $dnialumno;
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $nombre = $dato['nom_archivo'];
                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["doc_dni_tuto_admision"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["doc_dni_tuto_admision"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["doc_dni_tuto_admision"]["error"];
                $_FILES["file"]["size"] = $_FILES["doc_dni_tuto_admision"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['archivo_2'] = "DocumentosFormulario/" . "Tutor-" . $dnialumno . "/" . $nombre;
                    $dato['archivo_2_nombre'] = $nombre;
                }
            }

            if ($_FILES["doc_certificado_admision"]["name"] != "") {
                if($dato['get_id_docu'][0]['archivo_certificado'] != ""){
                    unlink('./DocumentosFormulario/'.'Certificado-'.$dnialumno.'/'.$dato['get_id_docu'][0]['archivo_certificado']);
                    rmdir('./DocumentosFormulario/'.'Certificado-'.$dnialumno.'/');
                }

                $dato['nom_archivo'] = str_replace(' ', '_', $_FILES["doc_certificado_admision"]["name"]);
                $config['upload_path'] = './DocumentosFormulario/' . 'Certificado-' . $dnialumno . '/';
                if (!file_exists($config['upload_path'])) {
                    mkdir($config['upload_path'], 0777, true);
                    chmod($config['upload_path'], 0777);
                    chmod('./DocumentosFormulario/', 0777);
                    chmod('./DocumentosFormulario/' . 'Certificado-' . $dnialumno . '/', 0777);
                }
                $config["allowed_types"] = 'pdf';
                $this->load->library('upload', $config);
                $this->upload->initialize($config);
                $path = 'Certificado-' . $dnialumno;
                $fecha = date('Y-m-d');
                $ext = pathinfo($path, PATHINFO_EXTENSION);
                $nombre = $dato['nom_archivo'];
                $_FILES["file"]["name"] = $nombre;
                $_FILES["file"]["type"] = $_FILES["doc_certificado_admision"]["type"];
                $_FILES["file"]["tmp_name"] = $_FILES["doc_certificado_admision"]["tmp_name"];
                $_FILES["file"]["error"] = $_FILES["doc_certificado_admision"]["error"];
                $_FILES["file"]["size"] = $_FILES["doc_certificado_admision"]["size"];
                if ($this->upload->do_upload('file')) {
                    $data = $this->upload->data();
                    $dato['archivo_3'] = "DocumentosFormulario/" . "Certificado-" . $dnialumno . "/" . $nombre;
                    $dato['archivo_3_nombre'] = $nombre;
                }
            }

            if ($edad < 18) {
                $dato['parentesco_tut_e'] = $this->input->post("parentesco_tut_e");
                $dato['tipo_doc_tutor'] = $this->input->post("tipo_doc_tutor");
                $dato['num_doc_tutor'] = $this->input->post("num_doc_tutor");
                $dato['apepat_admision_tutor'] = $this->input->post("apepat_admision_tutor");
                $dato['apemat_admision_tutor'] = $this->input->post("apemat_admision_tutor");
                $dato['nombres_admision_tutor'] = $this->input->post("nombres_admision_tutor");

                if ($dato['tipo_doc_tutor'] == "0" || $dato['num_doc_tutor'] == "" || $dato['parentesco_tut_e'] == "0" || $dato['apepat_admision_tutor'] == "" || $dato['apemat_admision_tutor'] == "" || $dato['nombres_admision_tutor'] == "") {
                    $dato['flag_seccion_tutor'] = '0';
                }
            }
            $anio=date('Y');
            $query_id = $this->Model_IFV->ultimo_cod_admision($anio);
            $totalRows_t = count($query_id);
            //echo($totalRows_t);
            $aniof=substr($anio, 2,2);
            $codigo='';

            if($totalRows_t < 9)
            {
                $codigo=$aniof."A000".($totalRows_t+1);
            }

            if($totalRows_t > 8 && $totalRows_t < 99)
            {
                $codigo=$aniof."A00".($totalRows_t+1);
            }

            if($totalRows_t > 998 )
            {
                $codigo=$aniof."A0".($totalRows_t+1);
            }

            $dato['codigo_admision']=$codigo;

            $this->Model_IFV->registrar_datos_postulante($dato, $edad);
        } else {
            redirect('/login');
        }
    }

    public function Listar_Seccion_Documentos(){
        
        $dato['cont_email_admision'] = $this->input->post("cont_email_admision");
        $dato['cont_dni_admision'] = $this->input->post("cont_dni_admision");
        $dato['cont_tipo_doc_admision'] = $this->input->post("cont_tipo_doc_admision");

        $dato['get_id_docu']=$this->Model_IFV->get_id_documento_x_postulante($dato);

        $this->load->view('view_IFV/postulantes_formulario/registrar_postulante',$dato);
    }
}